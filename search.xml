<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>某周写题报告</title>
    <url>/project/posts/a443d63f/</url>
    <content><![CDATA[
把某周做过的题稍微整理了一下，主要是DP，方便随时复习，也方便后人踩坑。




1 完全背包 · 洛谷 P1616 疯狂的采药思路把「时间」看成背包容量，「价值」就是药草收益。每种药草可以无限次采集 ⇒ 完全背包。
状态转移  
dp[j] = max(dp[j], dp[j - h[i]] + w[i])

代码
#include &lt;bits/stdc++.h&gt;using namespace std;const int N = 1e4 + 10;typedef long long ll;int h[N], w[N];const int M = 1e7 + 10;ll dp[M];int main()&#123;    int t, m;    scanf(&quot;%d%d&quot;, &amp;t, &amp;m);    for (int i = 1; i &lt;= m; i++)    &#123;        scanf(&quot;%d%d&quot;, &amp;h[i], &amp;w[i]);    &#125;    for (int i = 1; i &lt;= m; i++)    &#123;        for (int j = h[i]; j &lt;= t; j++)        &#123;            dp[j] = max(dp[j - h[i]] + w[i], dp[j]);        &#125;    &#125;    printf(&quot;%lld\n&quot;, dp[t]);    return 0;&#125;


2 混合背包 · 洛谷 P1833 樱花思路题目同时出现 01、多重、完全三种背包。

p[i] == 0 → 完全背包
p[i] &gt; 0  → 01 &#x2F; 多重背包

状态转移完全背包：正序多重背包：拆成 01 后逆序
代码
#include &lt;bits/stdc++.h&gt;using namespace std;const int N = 1e4 + 10;int t[N], w[N], p[N];int dp[1008];int main()&#123;    int h1, h2, m1, m2;    scanf(&quot;%d:%d %d:%d&quot;, &amp;h1, &amp;m1, &amp;h2, &amp;m2);    int n;    scanf(&quot;%d&quot;, &amp;n);    int ans = (m2 - m1) + (h2 - h1) * 60;    for (int i = 1; i &lt;= n; i++)    &#123;        scanf(&quot;%d%d%d&quot;, &amp;t[i], &amp;w[i], &amp;p[i]);    &#125;    for (int i = 1; i &lt;= n; i++)    &#123;        if (p[i] == 0) //完全背包        &#123;            for (int j = t[i]; j &lt;= ans; j++)            &#123;                dp[j] = max(dp[j - t[i]] + w[i], dp[j]);            &#125;        &#125;        else //多重背包和01背包        &#123;            for (int k = 1; k &lt;= p[i]; k++)            &#123;                for (int j = ans; j &gt;= k * t[i]; j--)                &#123;                    dp[j] = max(dp[j - t[i]] + w[i], dp[j]);                &#125;            &#125;        &#125;    &#125;    printf(&quot;%d\n&quot;, dp[ans]);    return 0;&#125;


3 二维背包 · 洛谷 P1855 榨取kkksc03思路背包有两个限制维度：时间 &amp; 金钱 ⇒ 二维 01 背包。
状态转移
dp[j][k] = max(dp[j][k], dp[j - a[i]][k - b[i]] + 1)

代码
#include &lt;bits/stdc++.h&gt;using namespace std;int a[108], b[108];int dp[300][300];int main()&#123;    int n, m, t;    scanf(&quot;%d%d%d&quot;, &amp;n, &amp;m, &amp;t);    for (int i = 1; i &lt;= n; i++)    &#123;        scanf(&quot;%d%d&quot;, &amp;a[i], &amp;b[i]);    &#125;    for (int i = 1; i &lt;= n; i++)    &#123;        for (int j = m; j &gt;= a[i]; j--)        &#123;            for (int k = t; k &gt;= b[i]; k--)            &#123;                dp[j][k] = max(dp[j][k], dp[j - a[i]][k - b[i]] + 1);            &#125;        &#125;    &#125;    printf(&quot;%d\n&quot;, dp[m][t]);    return 0;&#125;


4 分组背包 · 洛谷 P1757 通天之分组背包思路物品分多组，每组最多选一个 ⇒ 经典分组背包。
代码
#include &lt;bits/stdc++.h&gt;using namespace std;const int N = 1e4 + 10;int cnt[N];int dp[N];int a[N], b[N];int vis[N][N];int main()&#123;    int m, n;    scanf(&quot;%d%d&quot;, &amp;m, &amp;n);    int ans;    int maxn = 0;    for (int i = 1; i &lt;= n; i++)    &#123;        scanf(&quot;%d%d%d&quot;, &amp;a[i], &amp;b[i], &amp;ans);        ++cnt[ans];        vis[ans][cnt[ans]] = i;        maxn = max(maxn, ans);    &#125;    for (int i = 1; i &lt;= maxn; i++)    &#123;        for (int j = m; j &gt;= 0; j--)        &#123;            for (int k = 1; k &lt;= cnt[i]; k++)            &#123;                if (j &gt;= a[vis[i][k]])                &#123;                    dp[j] = max(dp[j], dp[j - a[vis[i][k]]] + b[vis[i][k]]);                &#125;            &#125;        &#125;    &#125;    printf(&quot;%d\n&quot;, dp[m]);    return 0;&#125;


5 带附件的 01 背包 · 洛谷 P1064 [NOIP2006 提高组] 金明的预算方案思路每个主件最多带 2 个附件，决策从 2 种变成 5 种：不选、只选主件、主件 + 附件1、主件 + 附件2、主件 + 全部附件。
代码
#include &lt;bits/stdc++.h&gt;using namespace std;const int N = 4e4 + 10;int dpmainv[N], dpmainw[N];int dpannexv[N][3], dpannexw[N][3];int cnt[N];int dp[N];int main()&#123;    int n, m;    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);    int a, b, q;    for (int i = 1; i &lt;= m; i++)    &#123;        scanf(&quot;%d%d%d&quot;, &amp;a, &amp;b, &amp;q);        if (q == 0)        &#123;            dpmainv[i] = a;            dpmainw[i] = a * b;        &#125;        else        &#123;            cnt[q]++;            dpannexv[q][cnt[q]] = a;            dpannexw[q][cnt[q]] = a * b;        &#125;    &#125;    for (int i = 1; i &lt;= m; i++)    &#123;        for (int j = n; j &gt;= dpmainv[i] &amp;&amp; dpmainv[i] &gt; 0; j--)        &#123;            dp[j] = max(dp[j], dp[j - dpmainv[i]] + dpmainw[i]);            if (j &gt;= dpmainv[i] + dpannexv[i][1])            &#123;                dp[j] = max(dp[j], dp[j - dpmainv[i] - dpannexv[i][1]] + dpmainw[i] + dpannexw[i][1]);            &#125;            if (j &gt;= dpmainv[i] + dpannexv[i][2])            &#123;                dp[j] = max(dp[j], dp[j - dpmainv[i] - dpannexv[i][2]] + dpmainw[i] + dpannexw[i][2]);            &#125;            if (j &gt;= dpmainv[i] + dpannexv[i][1] + dpannexv[i][2])            &#123;                dp[j] = max(dp[j], dp[j - dpmainv[i] - dpannexv[i][1] - dpannexv[i][2]] + dpmainw[i] + dpannexw[i][1] + dpannexw[i][2]);            &#125;        &#125;    &#125;    printf(&quot;%d\n&quot;, dp[n]);    return 0;&#125;


6 树形 DP · 洛谷 P1352 没有上司的舞会思路树上做 01 背包：

dp[u][0] 不参加，儿子可选可不选
dp[u][1] 参加，儿子不能参加

代码
#include &lt;bits/stdc++.h&gt;using namespace std;const int N = 6e3 + 10;int a[N];int dp[N][2];int vis[N];vector&lt;int&gt; v[N];void dfs(int ans)&#123;    dp[ans][1] = a[ans];    for (int i = 0; i &lt; v[ans].size(); i++)    &#123;        int cnt = v[ans][i];        dfs(cnt);                                  //往下遍历        dp[ans][0] += max(dp[cnt][0], dp[cnt][1]); //他的下属参加还是不参加        dp[ans][1] += dp[cnt][0];                  //此时下属不能参加    &#125;&#125;int main()&#123;    int n;    scanf(&quot;%d&quot;, &amp;n);    for (int i = 1; i &lt;= n; i++)    &#123;        scanf(&quot;%d&quot;, &amp;a[i]);    &#125;    int p, q;    for (int i = 1; i &lt;= n - 1; i++)    &#123;        scanf(&quot;%d%d&quot;, &amp;p, &amp;q);        v[q].push_back(p);        vis[p] = 1; //把职员标记上    &#125;    int ans = 0;    for (int i = 1; i &lt;= n; i++)    &#123;        if (vis[i] == 0) //找最高职位，也就是树的根        &#123;            ans = i;            break;        &#125;    &#125;    dfs(ans);    printf(&quot;%d\n&quot;, max(dp[ans][0], dp[ans][1]));    return 0;&#125;


7 区间 DP · 能量项链思路环形合并石子模板：枚举长度 → 枚举左端点 → 枚举断点。
代码
#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;math.h&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;using namespace std;const int N = 2e2 + 10;int a[N];int dp[N][N];int main()&#123;    int n;    scanf(&quot;%d&quot;, &amp;n);    for (int i = 1; i &lt;= n; i++)    &#123;        scanf(&quot;%d&quot;, &amp;a[i]);        a[i + n] = a[i];    &#125;    // 2 3 5 10 2 3 5 10    //还是环形石子问题    for (int len = 3; len &lt;= n + 1; len++) //最少要三个值才能聚合两个珠子，但最后一个值最后还会用到    &#123;        for (int l = 1; l + len - 1 &lt;= 2 * n; l++)        &#123;            int r = l + len - 1;            for (int k = l + 1; k &lt; r; k++) //由于每颗珠子分首尾，所以k最小也得是l+1            &#123;                dp[l][r] = max(dp[l][r], dp[l][k] + dp[k][r] + a[l] * a[k] * a[r]); //由于k位置这个元素会重复用到，所以不用加一！！！            &#125;        &#125;    &#125;    int maxn = 0;    for (int i = 1; i &lt;= n; i++)    &#123;        maxn = max(maxn, dp[i][n + i]);        // printf(&quot;%d\n&quot;, dp[i][i + n]);    &#125;    printf(&quot;%d\n&quot;, maxn);    return 0;&#125;


8 第 k 优解 · HDU 2639思路在 01 背包基础上多开一维 dp[j][k] 记录体积为 j 时的前 k 大值。
核心技巧每次用归并排序思想把两条链（选&#x2F;不选）的前 k 大合并。
代码
#include &lt;bits/stdc++.h&gt;using namespace std;const int N = 1e3 + 10;int dp[N][N];int a[108], b[108];int c[108], d[108];int main()&#123;    int t;    scanf(&quot;%d&quot;, &amp;t);    while (t--)    &#123;        memset(dp, 0, sizeof(dp));        memset(c, 0, sizeof(c));        memset(d, 0, sizeof(d));        int n, v, p;        scanf(&quot;%d%d%d&quot;, &amp;n, &amp;v, &amp;p);        for (int i = 1; i &lt;= n; i++)        &#123;            scanf(&quot;%d&quot;, &amp;a[i]);        &#125;        for (int i = 1; i &lt;= n; i++)        &#123;            scanf(&quot;%d&quot;, &amp;b[i]);        &#125;        for (int i = 1; i &lt;= n; i++)        &#123;            for (int j = v; j &gt;= b[i]; j--)            &#123;                for (int k = 1; k &lt;= p; k++)                &#123;                    c[k] = dp[j][k]; //体积为j时的第k大价值                    d[k] = dp[j - b[i]][k] + a[i];                &#125;                int q = 1, l = 1, r = 1;                while (q &lt;= p &amp;&amp; (l &lt;= p || r &lt;= p))                &#123;                    if (c[l] &gt;= d[r]) //比较两个数的大小，谁大就用谁赋值                    &#123;                        dp[j][q] = c[l++];                    &#125;                    else                    &#123;                        dp[j][q] = d[r++];                    &#125;                    if (dp[j][q] != dp[j][q - 1]) //这里要去一下重                    &#123;                        q++;                    &#125;                &#125;            &#125;        &#125;        printf(&quot;%d\n&quot;, dp[v][p]);    &#125;    return 0;&#125;


9 线段树&#x2F;搜索 · HDU 5323思路根据父子区间关系做 DFS，剪枝：右端点大于当前答案或左端点越界时返回。
代码
#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;ll ans;void dfs(ll l, ll r) //建立左区间和右区间递归搜索&#123;    if (l == 0)    &#123;        if (r != 0)        &#123;            ans = min(ans, r);        &#125;    &#125;    if (r &gt;= ans) //右边界    &#123;        return;    &#125;    if (l - 1 - (r - l) &lt; 0) //左边界    &#123;        return;    &#125;    dfs(l - 1 - (r - l), r); //奇数区间    dfs(l, r + 1 + r - l);    dfs(l - 1 - (r - l) - 1, r); //偶数区间    dfs(l, r + 1 + r - l - 1);&#125;int main()&#123;    ll l, r;    while (scanf(&quot;%lld%lld&quot;, &amp;l, &amp;r) != EOF)    &#123;        ans = 0x3f3f3f3f;        dfs(l, r);        if (l == 0 &amp;&amp; r == 0)        &#123;            printf(&quot;0\n&quot;);        &#125;        else        &#123;            if (ans == 0x3f3f3f3f)            &#123;                printf(&quot;-1\n&quot;);            &#125;            else            &#123;                printf(&quot;%lld\n&quot;, ans);            &#125;        &#125;    &#125;    return 0;&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>动态规划</tag>
        <tag>背包</tag>
        <tag>线段树 ，搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌账号注册教程</title>
    <url>/project/posts/a3c9f8a9/</url>
    <content><![CDATA[准备工作
稳定的科学上网环境  
可接收验证码的手机号（国内 +86 亦可）

注册步骤
打开 Google 账号注册页面。
依次填写姓名、用户名、密码并点击「下一步」。
输入手机号 → 接收并填写验证码 → 继续。
填写出生日期与性别 → 下一步。
阅读隐私条款 → 点击「我同意」。
完成后自动跳转至 Google 首页，即注册成功。

常见问题
收不到验证码？更换浏览器&#x2F;设备，或尝试语音电话验证。  
提示“此号码已用过太多次”？更换号码，或等待 24 h 后再试。

至此，谷歌账号注册完毕，可用于 Gmail、YouTube、Google Drive 等服务。
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/project/posts/4a17b156/</url>
    <content><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.
Quick StartCreate a new post$ hexo new &quot;My New Post&quot;

More info: Writing
Run server$ hexo server

More info: Server
Generate static files$ hexo generate

More info: Generating
Deploy to remote sites$ hexo deploy

More info: Deployment
]]></content>
  </entry>
  <entry>
    <title>分类</title>
    <url>/project/categories/index.html</url>
    <content><![CDATA[


📂 文章分类点击任一分区，浏览该分类下的全部内容。
]]></content>
  </entry>
  <entry>
    <title>关于我</title>
    <url>/project/about/index.html</url>
    <content><![CDATA[
  
  
  

  
  
  扫码加我微信



👋 Hi, I’m xwybq一名在读学生，正朝着 Java 后端开发工程师 的方向狂奔。日常折腾代码、折腾硬件、折腾算法，乐此不疲。
🔗 找到我
GitHub: github.com&#x2F;xwybq
邮箱:  w3290819205@gmail.com

🛠 技术栈


方向
具体技能



Java 后端
Java SE &#x2F; Java EE, Spring Boot, Spring MVC, MyBatis, MySQL, Redis, Maven , Vue


Python 拓展
数学建模（NumPy &#x2F; Pandas &#x2F; Matplotlib）MicroPython 硬件控制（Arduino &#x2F; ESP32 &#x2F; Raspberry Pi Pico）深度学习（PyTorch &#x2F; TensorFlow）


算法 &amp; 基础
C++ 刷题（LeetCode &#x2F; AcWing &#x2F; NowCoder &#x2F; Codeforces）、数据结构、算法设计



“Stay hungry, stay foolish, stay coding.”

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/project/styles/fish-base.js</url>
    <content><![CDATA[var RENDERER = {
    POINT_INTERVAL : 5,
    FISH_COUNT : 3,
    MAX_INTERVAL_COUNT : 50,
    INIT_HEIGHT_RATE : 0.5,
    THRESHOLD : 50,

    init : function(){
        this.setParameters();
        this.reconstructMethods();
        this.setup();
        this.bindEvent();
        this.render();
    },
    setParameters : function(){
        this.$window = $(window);
        this.$container = $('#jsi-flying-fish-container');
        this.$canvas = $('');
        this.context = this.$canvas.appendTo(this.$container).get(0).getContext('2d');
        this.points = [];
        this.fishes = [];
        this.watchIds = [];
    },
    createSurfacePoints : function(){
        var count = Math.round(this.width / this.POINT_INTERVAL);
        this.pointInterval = this.width / (count - 1);
        this.points.push(new SURFACE_POINT(this, 0));

        for(var i = 1; i < count; i++){
            var point = new SURFACE_POINT(this, i * this.pointInterval),
                previous = this.points[i - 1];

            point.setPreviousPoint(previous);
            previous.setNextPoint(point);
            this.points.push(point);
        }
    },
    reconstructMethods : function(){
        this.watchWindowSize = this.watchWindowSize.bind(this);
        this.jdugeToStopResize = this.jdugeToStopResize.bind(this);
        this.startEpicenter = this.startEpicenter.bind(this);
        this.moveEpicenter = this.moveEpicenter.bind(this);
        this.reverseVertical = this.reverseVertical.bind(this);
        this.render = this.render.bind(this);
    },
    setup : function(){
        this.points.length = 0;
        this.fishes.length = 0;
        this.watchIds.length = 0;
        this.intervalCount = this.MAX_INTERVAL_COUNT;
        this.width = this.$container.width();
        this.height = this.$container.height();
        this.fishCount = this.FISH_COUNT * this.width / 500 * this.height / 500;
        this.$canvas.attr({width : this.width, height : this.height});
        this.reverse = false;

        this.fishes.push(new FISH(this));
        this.createSurfacePoints();
    },
    watchWindowSize : function(){
        this.clearTimer();
        this.tmpWidth = this.$window.width();
        this.tmpHeight = this.$window.height();
        this.watchIds.push(setTimeout(this.jdugeToStopResize, this.WATCH_INTERVAL));
    },
    clearTimer : function(){
        while(this.watchIds.length > 0){
            clearTimeout(this.watchIds.pop());
        }
    },
    jdugeToStopResize : function(){
        var width = this.$window.width(),
            height = this.$window.height(),
            stopped = (width == this.tmpWidth && height == this.tmpHeight);

        this.tmpWidth = width;
        this.tmpHeight = height;

        if(stopped){
            this.setup();
        }
    },
    bindEvent : function(){
        this.$window.on('resize', this.watchWindowSize);
        this.$container.on('mouseenter', this.startEpicenter);
        this.$container.on('mousemove', this.moveEpicenter);
        this.$container.on('click', this.reverseVertical);
    },
    getAxis : function(event){
        var offset = this.$container.offset();

        return {
            x : event.clientX - offset.left + this.$window.scrollLeft(),
            y : event.clientY - offset.top + this.$window.scrollTop()
        };
    },
    startEpicenter : function(event){
        this.axis = this.getAxis(event);
    },
    moveEpicenter : function(event){
        var axis = this.getAxis(event);

        if(!this.axis){
            this.axis = axis;
        }
        this.generateEpicenter(axis.x, axis.y, axis.y - this.axis.y);
        this.axis = axis;
    },
    generateEpicenter : function(x, y, velocity){
        if(y < this.height / 2 - this.THRESHOLD || y > this.height / 2 + this.THRESHOLD){
            return;
        }
        var index = Math.round(x / this.pointInterval);

        if(index < 0 || index >= this.points.length){
            return;
        }
        this.points[index].interfere(y, velocity);
    },
    reverseVertical : function(){
        this.reverse = !this.reverse;

        for(var i = 0, count = this.fishes.length; i < count; i++){
            this.fishes[i].reverseVertical();
        }
    },
    controlStatus : function(){
        for(var i = 0, count = this.points.length; i < count; i++){
            this.points[i].updateSelf();
        }
        for(var i = 0, count = this.points.length; i < count; i++){
            this.points[i].updateNeighbors();
        }
        if(this.fishes.length < this.fishCount){
            if(--this.intervalCount == 0){
                this.intervalCount = this.MAX_INTERVAL_COUNT;
                this.fishes.push(new FISH(this));
            }
        }
    },
    render : function(){
        requestAnimationFrame(this.render);
        this.controlStatus();
        this.context.clearRect(0, 0, this.width, this.height);
        this.context.fillStyle = 'hsl(0, 0%, 95%)';

        for(var i = 0, count = this.fishes.length; i < count; i++){
            this.fishes[i].render(this.context);
        }
        this.context.save();
        this.context.globalCompositeOperation = 'xor';
        this.context.beginPath();
        this.context.moveTo(0, this.reverse ? 0 : this.height);

        for(var i = 0, count = this.points.length; i < count; i++){
            this.points[i].render(this.context);
        }
        this.context.lineTo(this.width, this.reverse ? 0 : this.height);
        this.context.closePath();
        this.context.fill();
        this.context.restore();
    }
};
var SURFACE_POINT = function(renderer, x){
    this.renderer = renderer;
    this.x = x;
    this.init();
};
SURFACE_POINT.prototype = {
    SPRING_CONSTANT : 0.03,
    SPRING_FRICTION : 0.9,
    WAVE_SPREAD : 0.3,
    ACCELARATION_RATE : 0.01,

    init : function(){
        this.initHeight = this.renderer.height * this.renderer.INIT_HEIGHT_RATE;
        this.height = this.initHeight;
        this.fy = 0;
        this.force = {previous : 0, next : 0};
    },
    setPreviousPoint : function(previous){
        this.previous = previous;
    },
    setNextPoint : function(next){
        this.next = next;
    },
    interfere : function(y, velocity){
        this.fy = this.renderer.height * this.ACCELARATION_RATE * ((this.renderer.height - this.height - y) >= 0 ? -1 : 1) * Math.abs(velocity);
    },
    updateSelf : function(){
        this.fy += this.SPRING_CONSTANT * (this.initHeight - this.height);
        this.fy *= this.SPRING_FRICTION;
        this.height += this.fy;
    },
    updateNeighbors : function(){
        if(this.previous){
            this.force.previous = this.WAVE_SPREAD * (this.height - this.previous.height);
        }
        if(this.next){
            this.force.next = this.WAVE_SPREAD * (this.height - this.next.height);
        }
    },
    render : function(context){
        if(this.previous){
            this.previous.height += this.force.previous;
            this.previous.fy += this.force.previous;
        }
        if(this.next){
            this.next.height += this.force.next;
            this.next.fy += this.force.next;
        }
        context.lineTo(this.x, this.renderer.height - this.height);
    }
};
var FISH = function(renderer){
    this.renderer = renderer;
    this.init();
};
FISH.prototype = {
    GRAVITY : 0.4,

    init : function(){
        this.direction = Math.random() < 0.5;
        this.x = this.direction ? (this.renderer.width + this.renderer.THRESHOLD) : -this.renderer.THRESHOLD;
        this.previousY = this.y;
        this.vx = this.getRandomValue(4, 10) * (this.direction ? -1 : 1);

        if(this.renderer.reverse){
            this.y = this.getRandomValue(this.renderer.height * 1 / 10, this.renderer.height * 4 / 10);
            this.vy = this.getRandomValue(2, 5);
            this.ay = this.getRandomValue(0.05, 0.2);
        }else{
            this.y = this.getRandomValue(this.renderer.height * 6 / 10, this.renderer.height * 9 / 10);
            this.vy = this.getRandomValue(-5, -2);
            this.ay = this.getRandomValue(-0.2, -0.05);
        }
        this.isOut = false;
        this.theta = 0;
        this.phi = 0;
    },
    getRandomValue : function(min, max){
        return min + (max - min) * Math.random();
    },
    reverseVertical : function(){
        this.isOut = !this.isOut;
        this.ay *= -1;
    },
    controlStatus : function(context){
        this.previousY = this.y;
        this.x += this.vx;
        this.y += this.vy;
        this.vy += this.ay;

        if(this.renderer.reverse){
            if(this.y > this.renderer.height * this.renderer.INIT_HEIGHT_RATE){
                this.vy -= this.GRAVITY;
                this.isOut = true;
            }else{
                if(this.isOut){
                    this.ay = this.getRandomValue(0.05, 0.2);
                }
                this.isOut = false;
            }
        }else{
            if(this.y < this.renderer.height * this.renderer.INIT_HEIGHT_RATE){
                this.vy += this.GRAVITY;
                this.isOut = true;
            }else{
                if(this.isOut){
                    this.ay = this.getRandomValue(-0.2, -0.05);
                }
                this.isOut = false;
            }
        }
        if(!this.isOut){
            this.theta += Math.PI / 20;
            this.theta %= Math.PI * 2;
            this.phi += Math.PI / 30;
            this.phi %= Math.PI * 2;
        }
        this.renderer.generateEpicenter(this.x + (this.direction ? -1 : 1) * this.renderer.THRESHOLD, this.y, this.y - this.previousY);

        if(this.vx > 0 && this.x > this.renderer.width + this.renderer.THRESHOLD || this.vx < 0 && this.x < -this.renderer.THRESHOLD){
            this.init();
        }
    },
    render : function(context){
        context.save();
        context.translate(this.x, this.y);
        context.rotate(Math.PI + Math.atan2(this.vy, this.vx));
        context.scale(1, this.direction ? 1 : -1);
        context.beginPath();
        context.moveTo(-30, 0);
        context.bezierCurveTo(-20, 15, 15, 10, 40, 0);
        context.bezierCurveTo(15, -10, -20, -15, -30, 0);
        context.fill();

        context.save();
        context.translate(40, 0);
        context.scale(0.9 + 0.2 * Math.sin(this.theta), 1);
        context.beginPath();
        context.moveTo(0, 0);
        context.quadraticCurveTo(5, 10, 20, 8);
        context.quadraticCurveTo(12, 5, 10, 0);
        context.quadraticCurveTo(12, -5, 20, -8);
        context.quadraticCurveTo(5, -10, 0, 0);
        context.fill();
        context.restore();

        context.save();
        context.translate(-3, 0);
        context.rotate((Math.PI / 3 + Math.PI / 10 * Math.sin(this.phi)) * (this.renderer.reverse ? -1 : 1));

        context.beginPath();

        if(this.renderer.reverse){
            context.moveTo(5, 0);
            context.bezierCurveTo(10, 10, 10, 30, 0, 40);
            context.bezierCurveTo(-12, 25, -8, 10, 0, 0);
        }else{
            context.moveTo(-5, 0);
            context.bezierCurveTo(-10, -10, -10, -30, 0, -40);
            context.bezierCurveTo(12, -25, 8, -10, 0, 0);
        }
        context.closePath();
        context.fill();
        context.restore();
        context.restore();
        this.controlStatus(context);
    }
};
$(function(){
    RENDERER.init();
});]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/project/styles/main.css</url>
    <content><![CDATA[/* 鱼塘固定宽度 */
canvas:not(#ribbon-canvas), #web_bg {
    margin-bottom: -0.5rem;
    display: block;
    width: 100%;
    height: 160px
}

/* 鱼塘渐变色 */
body{
    overflow-x: hidden;
}
#footer {
    height:160px;
    background: linear-gradient(
            135deg,
            rgba(23, 23, 116, 0.2),
            rgba(28, 181, 224, 0.2)
    );
}
#footer #footer-wrap,
#footer-wrap a {
    color: #000;
}
#footer #footer-wrap {
    z-index: 1;
}

#footer .container {
    line-height: 0;
    position: relative;
    height: 100%;
    width: 100vw;
}

/* 侧边栏个人信息卡片动态渐变色 */
#aside-content>.card-widget.card-info{
    background: linear-gradient(-45deg, rgba(255, 225, 245, 0.6),
    rgba(255, 225, 225, 0.9),
    rgba(225, 255, 251, 0.9),
    rgba(255, 225, 255, 0.6));
}
[data-theme=dark] #aside-content>.card-widget.card-info {
    background: linear-gradient(-45deg, rgb(225, 238, 255),
    rgba(225, 255, 253, 0.9),
    rgba(225, 243, 255, 0.9),
    rgba(255, 225, 253, 0.6));
}
/* 侧边栏公告栏卡片渐变色 */
#aside-content>.card-widget.card-announcement{
    background: linear-gradient(-45deg, rgba(255, 225, 245, 0.6),
    rgba(255, 225, 225, 0.9),
    rgba(225, 255, 251, 0.9),
    rgba(255, 225, 255, 0.6));
}
[data-theme=dark] #aside-content>.card-widget.card-announcement{
    background: linear-gradient(-45deg, rgba(255, 225, 245, 0.6),
    rgba(255, 225, 225, 0.9),
    rgba(225, 255, 251, 0.9),
    rgba(255, 225, 255, 0.6));
}
/* 侧边栏目录最新文章卡片渐变色 */
#aside-content>.sticky_layout>.card-widget{
    background: linear-gradient(-45deg, rgba(255, 225, 245, 0.6),
    rgba(255, 225, 225, 0.9),
    rgba(225, 255, 251, 0.9),
    rgba(255, 225, 255, 0.6));
}
[data-theme=dark] #aside-content>.sticky_layout>.card-widget{
    background: linear-gradient(-45deg, rgba(255, 225, 245, 0.6),
    rgba(255, 225, 225, 0.9),
    rgba(225, 255, 251, 0.9),
    rgba(255, 225, 255, 0.6));
}
/* 个人信息Follow me按钮 */
#aside-content>.card-widget.card-info>#card-info-btn {
    background-color: #3eb8be;
    border-radius: 8px;
}
/*文章页面*/
/* .layout>#post {
    background: linear-gradient(-45deg, rgba(225, 255, 252, 0.8),
rgba(255, 225, 229, 0.9),
rgba(225, 255, 225, 0.9),
rgba(253, 255, 225, 0.8));
}
[data-theme=dark] .layout>#post {
    background: linear-gradient(-45deg, rgba(24,40,72,.2),
rgba(35,37,58,.9),
rgba(35,37,58,.9),
rgba(24,40,72,.2));
} */
/*主页文章预览页面*/
#recent-posts>.recent-post-item{
    background: linear-gradient(-45deg, rgba(225, 255, 252, 0.8),
    rgba(255, 225, 229, 0.9),
    rgba(225, 255, 225, 0.9),
    rgba(253, 255, 225, 0.8));
}
[data-theme=dark] #recent-posts>.recent-post-item{
    background: linear-gradient(-45deg, rgba(24,40,72,.2),
    rgba(35,37,58,.9),
    rgba(35,37,58,.9),
    rgba(24,40,72,.2));
}

/*分类页面*/
.layout>#page {
    background: linear-gradient(-45deg, rgba(225,235,255,.8),
    rgba(225,235,255,.9),
    rgba(225,235,255,.9),
    rgba(225,235,255,.8));
}
[data-theme=dark] .layout>#page {
    background: linear-gradient(-45deg, rgba(24,40,72,.2),
    rgba(35,37,58,.9),
    rgba(35,37,58,.9),
    rgba(24,40,72,.2));
}

/*时间轴页面*/
.layout>#archive {
    background: linear-gradient(-45deg, rgba(225,235,255,.8),
    rgba(225,235,255,.9),
    rgba(225,235,255,.9),
    rgba(225,235,255,.8));
}
[data-theme=dark] .layout>#archive {
    background: linear-gradient(-45deg, rgba(24,40,72,.2),
    rgba(35,37,58,.9),
    rgba(35,37,58,.9),
    rgba(24,40,72,.2));
}]]></content>
  </entry>
  <entry>
    <title>标签</title>
    <url>/project/tags/index.html</url>
    <content><![CDATA[


🔖 文章标签云点击任意标签，即可查看该主题下的所有文章。
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/project/styles/fish.js</url>
    <content><![CDATA[fish();
function fish() {
    return (
        $("#footer-wrap").css({
            position: "absolute",
            "text-align": "center",
            top: 0,
            right: 0,
            left: 0,
            bottom: 0,
        }),
            $("footer").append(
                ''
            ),
            $("body").append(
                ''
            ),
            this
    );
}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/project/gallery/baby.html</url>
    <content><![CDATA[
    [{"url":"http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-23/46201997695900.jpeg","alt":"","title":""},{"url":"http://blog-1253652709.cos.ap-guangzhou.myqcloud.com/pasteimageintomarkdown/2023-08-23/46974523049100.jpeg","alt":"","title":""}]
  ]]></content>
  </entry>
  <entry>
    <title>折腾</title>
    <url>/project/gallery/tinkering.html</url>
    <content><![CDATA[
    [{"url":"https://img.cdn1.vip/i/68a3282a46476_1755523114.webp","alt":"桌面改造.jpg","title":""}]
  ]]></content>
  </entry>
  <entry>
    <title>相册</title>
    <url>/project/gallery/index.html</url>
    <content><![CDATA[🧳 旅行
    
    
      旅行
      走过的地方
      
    
  

🔧 折腾
    
    
      折腾
      桌面 & 设备
      
    
  ]]></content>
  </entry>
  <entry>
    <title>旅行</title>
    <url>/project/gallery/travel.html</url>
    <content><![CDATA[
    [{"url":"https://img.cdn1.vip/i/68a32829ed36b_1755523113.webp","alt":"厦门·鼓浪屿.jpg","title":""},{"url":"https://img.cdn1.vip/i/68a3282a4aa68_1755523114.webp","alt":"上海·外滩.jpg","title":""}]
  ]]></content>
  </entry>
</search>
