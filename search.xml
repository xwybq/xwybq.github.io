<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022年上海市大学生程序设计竞赛</title>
    <url>/posts/99f768c5/</url>
    <content><![CDATA[<h2 id="N-Nine-Is-Greater-Than-Ten-签到）"><strong><a href="https://ac.nowcoder.com/acm/contest/41614/N">N.Nine Is Greater Than Ten</a>(签到）</strong></h2>
<p><strong>直接比较字典序。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string a, b;<br>    cin &gt;&gt; a &gt;&gt; b;<br>    <span class="hljs-keyword">if</span> (a &gt; b)<br>    &#123;<br>        cout &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot;&gt;&quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a &lt; b)<br>    &#123;<br>        cout &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot;&lt;&quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot;=&quot;</span> &lt;&lt; b &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="G-Gua-签到"><strong><a href="https://ac.nowcoder.com/acm/contest/41614/G">G.Gua!</a>(签到)</strong></h2>
<p><strong>细节比较多的签到，主要是0的问题。若R = 0，那么一枪都开不出，否则能开出 ⌊RxS/60⌋ + 1枪。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-type">int</span> b, r, d, s;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;b, &amp;r, &amp;d, &amp;s);<br>        <span class="hljs-keyword">if</span> (r == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (d &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;gua!\n&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ok\n&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (d &gt; b)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;gua!\n&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ok\n&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">int</span> ans = s * r;<br>            <span class="hljs-type">int</span> cnt;<br>            cnt = (ans / <span class="hljs-number">60</span> + <span class="hljs-number">1</span>) * b;<br>            <span class="hljs-keyword">if</span> (d &gt; cnt)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;gua!\n&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ok\n&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="E-Expenditure-Reduction（dp）"><strong><a href="https://ac.nowcoder.com/acm/contest/41614/E">E.Expenditure Reduction</a>（dp）</strong></h2>
<p><strong>题意：给一个字符串S，和S一个子序列F。求最短的S的子串T，使F也是T的子序列。</strong></p>
<p><strong>思路：正解是dp（还可以枚举二分卡过去）</strong></p>
<p><strong>dp[i][j]表示S到i，F匹配到第j位的最短长度。</strong></p>
<p><strong>若s[i] != f[j]， 则dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);</strong></p>
<p><strong>若s[i] == f[j]，则dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + 1);</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> dp[N][<span class="hljs-number">108</span>];<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> tt;<br>    cin &gt;&gt; tt;<br>    <span class="hljs-keyword">while</span> (tt--)<br>    &#123;<br>        string s, f;<br>        cin &gt;&gt; s &gt;&gt; f;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> m = f.<span class="hljs-built_in">size</span>();<br>        s = <span class="hljs-string">&#x27;#&#x27;</span> + s;<br>        f = <span class="hljs-string">&#x27;#&#x27;</span> + f;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            &#123;<br>                dp[i][j] = INF;<br>            &#125;<br>        &#125;<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> pos = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (s[i] == f[j])<br>                &#123;<br>                    dp[i][j] = <span class="hljs-built_in">min</span>(dp[i][j], dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    dp[i][j] = <span class="hljs-built_in">min</span>(dp[i][j], dp[i - <span class="hljs-number">1</span>][j] + <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (dp[pos][m] &gt; dp[i][m])<br>            &#123;<br>                pos = i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// cout &lt;&lt; pos &lt;&lt; &quot; &quot; &lt;&lt; dp[pos][m] &lt;&lt; &quot;\n&quot;;</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = pos - dp[pos][m] + <span class="hljs-number">1</span>; i &lt;= pos; i++)<br>        &#123;<br>            cout &lt;&lt; s[i];<br>        &#125;<br>        <span class="hljs-comment">// cout &lt;&lt; s + pos - dp[pos][m] + 1;</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="H-Heirloom-Painting（模拟，贪心）"><strong><a href="https://ac.nowcoder.com/acm/contest/41614/H">H.Heirloom Painting</a>（模拟，贪心）</strong></h2>
<p><strong>题意：用刷子刷长度为n的墙，每次用一种颜色刷连续的长度为k的一段，后刷的颜色会覆盖前刷的颜色。问给定结果，最小的刷墙次数。</strong></p>
<p><strong>思路：容易想到，如果结果中根本没有长度不小于k的一段颜色相同，那么不可能刷出来，否则都可以刷出这个结果。</strong></p>
<p><strong>我们发现只要有一段长度大于等于k，就一定能刷出来，所以直接从第一个连续段开始，从前往后刷就行了</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> b[N];<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;t);<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-type">int</span> n, m, k;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>, &amp;n, &amp;m, &amp;k);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            b[i] = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;a[i]);<br>        &#125;<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        a[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (a[i] != a[i - <span class="hljs-number">1</span>])<br>            &#123;<br>                b[++cnt] += <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                b[cnt] += <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (a[<span class="hljs-number">1</span>] == a[n] &amp;&amp; cnt != <span class="hljs-number">1</span>) <span class="hljs-comment">//看1和最后面的有无联系，如果相同就合并</span><br>        &#123;<br>            b[<span class="hljs-number">1</span>] += b[cnt];<br>            cnt -= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (b[i] &gt;= k)<br>            &#123;<br>                flag = <span class="hljs-number">1</span>;<br>            &#125;<br>            sum += <span class="hljs-built_in">ceil</span>(b[i] * <span class="hljs-number">1.0</span> / k);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, sum);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="A-Another-A-B-Problem（搜索）"><strong><a href="https://ac.nowcoder.com/acm/contest/41614/A">A.Another A+B Problem</a>（搜索）</strong></h2>
<p><strong>思路：这题题意读着很难受，做不出来大概率是因为没读懂题QAQ</strong></p>
<p><strong>本题主要难点就是搜索出满足约束的答案。容易发现，如果某个地方对应的是G，那么我们可以完全不管这个地方。然后我们查看每个数字对应的’P’,‘B’个数。如果一个数字没有对应的’P’,‘B’，意味着他在搜索时可以随便拿，没有数量限制。如果一个数字对应的全都是’P’（假设k个）,那么意味着它至少出现k次。如果一个数字既有’P’（k个）也有’B’，说明这个数字要刚好出现k次。同时，最后搜索结果要满足等式。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">11</span>;<br><span class="hljs-type">char</span> a[<span class="hljs-number">11</span>], b[<span class="hljs-number">11</span>];<br>vector&lt;<span class="hljs-type">int</span>&gt; v[<span class="hljs-number">11</span>];<br><span class="hljs-type">int</span> num[N];<br><span class="hljs-type">int</span> vis[N];<br><span class="hljs-type">char</span> c[N];<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> ans[<span class="hljs-number">1000000</span> + <span class="hljs-number">10</span>][N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x == <span class="hljs-number">9</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (num[i] &gt; <span class="hljs-number">0</span> &amp;&amp; num[i] &lt; <span class="hljs-number">1e4</span>)<br>            &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> z = (c[<span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>) * <span class="hljs-number">10</span> + c[<span class="hljs-number">2</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-type">int</span> x = (c[<span class="hljs-number">4</span>] - <span class="hljs-string">&#x27;0&#x27;</span>) * <span class="hljs-number">10</span> + c[<span class="hljs-number">5</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-type">int</span> m = (c[<span class="hljs-number">7</span>] - <span class="hljs-string">&#x27;0&#x27;</span>) * <span class="hljs-number">10</span> + c[<span class="hljs-number">8</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (z + x != m)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        cnt += <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">8</span>; i++)<br>        &#123;<br>            ans[cnt][i] = c[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (b[x] == <span class="hljs-string">&#x27;G&#x27;</span>)<br>    &#123;<br>        <span class="hljs-built_in">dfs</span>(x + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (vis[i] == <span class="hljs-number">0</span> &amp;&amp; num[i] == <span class="hljs-number">0</span> || i == a[x] - <span class="hljs-string">&#x27;0&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        num[i] -= <span class="hljs-number">1</span>;<br>        c[x] = i + <span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-built_in">dfs</span>(x + <span class="hljs-number">1</span>);<br>        num[i] += <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; a + <span class="hljs-number">1</span> &gt;&gt; b + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        num[i] = <span class="hljs-number">1e5</span>;<br>        vis[i] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">8</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b[i] == <span class="hljs-string">&#x27;G&#x27;</span>)<br>        &#123;<br>            c[i] = a[i];<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        v[a[i] - <span class="hljs-string">&#x27;0&#x27;</span>].<span class="hljs-built_in">push_back</span>(i);<br>        <span class="hljs-comment">// printf(&quot;%d %d\n&quot;, a[i] - &#x27;0&#x27;, i);</span><br>    &#125;<br>    <span class="hljs-comment">// for (int i = 0; i &lt; 10; i++)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     printf(&quot;%d\n&quot;, v[i]);</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (v[i].<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> t : v[i])<br>        &#123;<br>            <span class="hljs-keyword">if</span> (b[t] == <span class="hljs-string">&#x27;P&#x27;</span>)<br>            &#123;<br>                sum++;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                vis[i] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        num[i] = sum;<br>    &#125;<br>    <span class="hljs-comment">// for (int i = 0; i &lt; 10; i++)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     printf(&quot;%d\n&quot;, num[i]);</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>    cout &lt;&lt; cnt &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; i++)<br>    &#123;<br>        cout &lt;&lt; ans[i] + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="M-My-University-Is-Better-Than-Yours（tarjan缩点）"><strong><a href="https://ac.nowcoder.com/acm/contest/41614/M">M.My University Is Better Than Yours</a>（tarjan缩点）</strong></h2>
<p><strong>题意：m个排行榜，只要有一个排行榜中a比b前，那么a就比b好。（a比b好和b比a好可以同时成立）且如果a比b好，b比c好，那么a比c好。求每所学校好于多少所学校。</strong></p>
<p><strong>思路：每一个排行榜相邻两点建图的话是一条链状DAG，如果多个排行榜一起建图的话就会形成很多环，容易发现环上的点是共享答案的。因此可以缩成一个点。可以证明，缩完点之后的DAG也是链状的，因此可以直接求得。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, m, b;<br>vector&lt;<span class="hljs-type">int</span>&gt; e[N];<br><span class="hljs-type">int</span> dfn[N], low[N], tot;<br>stack&lt;<span class="hljs-type">int</span>&gt; s;<br><span class="hljs-type">int</span> scc[N], siz[N], cnt;<br><span class="hljs-type">int</span> din[N], dout[N];<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> num[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; v[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    dfn[x] = low[x] = ++tot;<br>    s.<span class="hljs-built_in">push</span>(x);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> y : e[x])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!dfn[y])<br>        &#123;<br>            <span class="hljs-built_in">tarjan</span>(y);<br>            low[x] = <span class="hljs-built_in">min</span>(low[x], low[y]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!scc[y])<br>        &#123;<br>            low[x] = <span class="hljs-built_in">min</span>(low[x], dfn[y]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (dfn[x] == low[x])<br>    &#123;<br>        ++cnt;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> y = s.<span class="hljs-built_in">top</span>();<br>            s.<span class="hljs-built_in">pop</span>();<br>            scc[y] = cnt;<br>            ++siz[cnt];<br>            <span class="hljs-keyword">if</span> (x == y)<br>            &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> fa)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t : v[x])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (t == fa)<br>        &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-built_in">dfs</span>(t, x);<br>        siz[x] += siz[t];<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">1</span>)<br>            &#123;<br>                e[a[i - <span class="hljs-number">1</span>]].<span class="hljs-built_in">push_back</span>(a[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!dfn[i])<br>        &#123;<br>            <span class="hljs-built_in">tarjan</span>(i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> t : e[i])<br>        &#123;<br>            <span class="hljs-keyword">if</span> (scc[t] != scc[i])<br>            &#123;<br>                e[scc[i]].<span class="hljs-built_in">push_back</span>(scc[t]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; i++)<br>    &#123;<br>        siz[i] += siz[i - <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, siz[scc[i]] - <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="L-Last-Warning-of-the-Competition-Finance-Officer（AC自动机-dp）"><strong><a href="https://ac.nowcoder.com/acm/contest/41614/L">L.Last Warning of the Competition Finance Officer</a>（AC自动机+dp）</strong></h2>
<p><strong>思路：</strong></p>
<p><strong>设dp[i]为1-i的得分, 划分中没有包含的子串）dp[i]=dp[i−1](划分中没有包含i的子串）+∑j dp[i−len(tj)]∗val[tj] 我们可以发现，不同长度的t最多只有 ∑t 个，所以AC自动机压缩完路径后跳fail指针最多不超过 ∑t 个，直接AC自动机+转移即可。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> ch[N][<span class="hljs-number">26</span>];<br><span class="hljs-type">int</span> idx;<br><span class="hljs-type">int</span> ne[N];<br><span class="hljs-type">char</span> str[N], s[N];<br><span class="hljs-type">int</span> e[N], g[N];<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">int</span> fuck[N];<br><span class="hljs-type">int</span> dp[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> j = s[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!ch[p][j])<br>        &#123;<br>            ch[p][j] = ++idx;<br>        &#125;<br>        p = ch[p][j];<br>    &#125;<br>    e[p] = x;<br>    g[p] = len;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ch[<span class="hljs-number">0</span>][i])<br>        &#123;<br>            q.<span class="hljs-built_in">push</span>(ch[<span class="hljs-number">0</span>][i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> u = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span> (e[u])<br>        &#123;<br>            fuck[u] = u;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            fuck[u] = fuck[ne[u]];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> v = ch[u][i];<br>            <span class="hljs-keyword">if</span> (v)<br>            &#123;<br>                ne[v] = ch[ne[u]][i];<br>                q.<span class="hljs-built_in">push</span>(v);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ch[u][i] = ch[ne[u]][i];<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str + <span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-type">int</span> ans;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%d&quot;</span>, s + <span class="hljs-number">1</span>, &amp;ans);<br>        <span class="hljs-built_in">insert</span>(ans);<br>    &#125;<br>    <span class="hljs-built_in">build</span>();<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(str + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, u = <span class="hljs-number">0</span>; i &lt;= n; i++)<br>    &#123;<br>        dp[i] = dp[i - <span class="hljs-number">1</span>];<br>        u = ch[u][str[i] - <span class="hljs-string">&#x27;a&#x27;</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = fuck[u]; j; j = fuck[ne[j]])<br>        &#123;<br>            <span class="hljs-keyword">if</span> (g[j] &lt;= i)<br>            &#123;<br>                dp[i] += <span class="hljs-number">1ll</span> * dp[i - g[j]] * e[j] % mod;<br>                dp[i] %= mod;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, dp[i]);<br>    &#125;<br>    <span class="hljs-comment">// printf(&quot;\n&quot;);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>2023牛客寒假算法基础集训营3</title>
    <url>/posts/a82b503b/</url>
    <content><![CDATA[<p>G：<a href="https://ac.nowcoder.com/acm/contest/46811/G">严肃古板的秩序</a></p>
<p>思路：暴力搜索，暴力搜索三种符号的情况，看是否有一种能符合题意，如果有，就return 1，否则就是return 0；这个题写的时候有几个坑点要注意一下：</p>
<p><strong>1.定义a#b当且仅当a和b都是正整数时是有意义的。也就是说，在讨论#的时候，要先判断一下当前数和下一个数是否都大于0，才能递归下去</strong></p>
<p><strong>2.a^a%b,用快速幂写时，不要忘了先把a初始化为a%b,不然就会WA</strong></p>
<p><strong>代码：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> ans;<br><span class="hljs-type">char</span> ch;<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> b[<span class="hljs-number">100</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ksm</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>;<br>    a = a % p;<br>    <span class="hljs-keyword">while</span> (b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>        &#123;<br>            ans = ans * a % p;<br>        &#125;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>        a = a * a % p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans % p;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> pos)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (pos == cnt)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (x == ans)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (i == cnt)<br>                &#123;<br>                    cout &lt;&lt; a[cnt] &lt;&lt; <span class="hljs-string">&quot;=&quot;</span> &lt;&lt; ans;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    cout &lt;&lt; a[i] &lt;&lt; b[i];<br>                &#125;<br>            &#125;<br>            cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    b[pos] = <span class="hljs-string">&#x27;+&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dfs</span>(x + a[pos + <span class="hljs-number">1</span>], pos + <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    b[pos] = <span class="hljs-string">&#x27;-&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dfs</span>(x - a[pos + <span class="hljs-number">1</span>], pos + <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    b[pos] = <span class="hljs-string">&#x27;#&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">0</span> &amp;&amp; a[pos + <span class="hljs-number">1</span>] &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dfs</span>(<span class="hljs-built_in">ksm</span>(x, x, a[pos + <span class="hljs-number">1</span>]), pos + <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        ++cnt;<br>        cin &gt;&gt; a[cnt];<br>        cin &gt;&gt; ch;<br>        <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;=&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    cin &gt;&gt; ans;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dfs</span>(a[<span class="hljs-number">1</span>], <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌账号注册教程</title>
    <url>/posts/a3c9f8a9/</url>
    <content><![CDATA[<h2 id="准备工作">准备工作</h2>
<ul>
<li>稳定的科学上网环境</li>
<li>可接收验证码的手机号（国内 +86 亦可）</li>
</ul>
<h2 id="注册步骤">注册步骤</h2>
<ol>
<li>打开 <a href="https://accounts.google.com/signup">Google 账号注册页面</a>。</li>
<li>依次填写姓名、用户名、密码并点击「下一步」。</li>
<li>输入手机号 → 接收并填写验证码 → 继续。</li>
<li>填写出生日期与性别 → 下一步。</li>
<li>阅读隐私条款 → 点击「我同意」。</li>
<li>完成后自动跳转至 Google 首页，即注册成功。</li>
</ol>
<h2 id="常见问题">常见问题</h2>
<ul>
<li><strong>收不到验证码？</strong><br>
更换浏览器/设备，或尝试语音电话验证。</li>
<li><strong>提示“此号码已用过太多次”？</strong><br>
更换号码，或等待 24 h 后再试。</li>
</ul>
<p>至此，谷歌账号注册完毕，可用于 Gmail、YouTube、Google Drive 等服务。</p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>配置</tag>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title>常用模板</title>
    <url>/posts/1590894c/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1><strong>树状数组求逆序对</strong></h1>
<p>[<a href="https://vjudge.net/contest/515986#problem/C">https://vjudge.net/contest/515986#problem/C</a>]:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> t[N];<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x &amp; -x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (x &lt;= n)<br>    &#123;<br>        t[x]++;<br>        x += <span class="hljs-built_in">lowbit</span>(x);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (x &gt;= <span class="hljs-number">1</span>)<br>    &#123;<br>        sum += t[x];<br>        x -= <span class="hljs-built_in">lowbit</span>(x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    ll sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        <span class="hljs-built_in">add</span>(a[i]);<br>        sum += (i - <span class="hljs-built_in">ask</span>(a[i]));<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, sum);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>树状数组求一个区间内有几种数</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> tr[N];<br><span class="hljs-type">int</span> num[N];<br><span class="hljs-type">int</span> last[N];<br><span class="hljs-type">int</span> ans[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r, pos;<br>&#125; ask[N];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node a, node b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a.r &lt; b.r;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x &amp; (-x);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> ans)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (x &lt;= n)<br>    &#123;<br>        tr[x] += ans;<br>        x += <span class="hljs-built_in">lowbit</span>(x);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (x != <span class="hljs-number">0</span>)<br>    &#123;<br>        ans += tr[x];<br>        x -= <span class="hljs-built_in">lowbit</span>(x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num[i]);<br>    &#125;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;ask[i].l, &amp;ask[i].r);<br>        ask[i].pos = i;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(ask + <span class="hljs-number">1</span>, ask + <span class="hljs-number">1</span> + m, cmp);<br>    <span class="hljs-type">int</span> fuck = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = fuck; j &lt;= ask[i].r; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (last[num[j]])<br>            &#123;<br>                <span class="hljs-built_in">add</span>(last[num[j]], <span class="hljs-number">-1</span>);<br>            &#125;<br>            <span class="hljs-built_in">add</span>(j, <span class="hljs-number">1</span>);<br>            last[num[j]] = j;<br>        &#125;<br>        fuck = ask[i].r + <span class="hljs-number">1</span>;<br>        ans[ask[i].pos] = <span class="hljs-built_in">sum</span>(ask[i].r) - <span class="hljs-built_in">sum</span>(ask[i].l - <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1><strong>二维前缀和</strong></h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> sum[<span class="hljs-number">1001</span>][<span class="hljs-number">1001</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m, n, x1, y1, x2, y2, value;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m); <span class="hljs-comment">//从一开始避免了分类讨论</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;value);<br>            sum[i][j] = sum[i][j - <span class="hljs-number">1</span>] + sum[i - <span class="hljs-number">1</span>][j] - sum[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + value;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> q;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q);<br>    <span class="hljs-keyword">while</span> (q--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, sum[x2][y2] - sum[x1 - <span class="hljs-number">1</span>][y2] - sum[x2][y1 - <span class="hljs-number">1</span>] + sum[x1 - <span class="hljs-number">1</span>][y1 - <span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1><strong>主席树查询一个区间有几个数</strong></h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 给出一个序列，查询区间内有多少个不相同的数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">30010</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = MAXN * <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> n, q, tot;<br><span class="hljs-type">int</span> a[MAXN];<br><span class="hljs-type">int</span> T[M], lson[M], rson[M], c[M];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> root = tot++;<br>    c[root] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l != r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        lson[root] = <span class="hljs-built_in">build</span>(l, mid);<br>        rson[root] = <span class="hljs-built_in">build</span>(mid + <span class="hljs-number">1</span>, r);<br>    &#125;<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> root, <span class="hljs-type">int</span> pos, <span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> newroot = tot++, tmp = newroot;<br>    c[newroot] = c[root] + val;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r = n;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (pos &lt;= mid)<br>        &#123;<br>            lson[newroot] = tot++;<br>            rson[newroot] = rson[root];<br>            newroot = lson[newroot];<br>            root = lson[root];<br>            r = mid;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            rson[newroot] = tot++;<br>            lson[newroot] = lson[root];<br>            newroot = rson[newroot];<br>            root = rson[root];<br>            l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        c[newroot] = c[root] + val;<br>    &#125;<br>    <span class="hljs-keyword">return</span> tmp;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> root, <span class="hljs-type">int</span> pos)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r = n;<br>    <span class="hljs-keyword">while</span> (pos &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (pos &lt;= mid)<br>        &#123;<br>            r = mid;<br>            root = lson[root];<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            ret += c[lson[root]];<br>            root = rson[root];<br>            l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret + c[root];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin);</span><br>    <span class="hljs-comment">// freopen(&quot;out.txt&quot;,&quot;w&quot;,stdout);</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n) == <span class="hljs-number">1</span>)<br>    &#123;<br>        tot = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        T[n + <span class="hljs-number">1</span>] = <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, n); <span class="hljs-comment">//建立一颗空树</span><br>        map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (mp.<span class="hljs-built_in">find</span>(a[i]) == mp.<span class="hljs-built_in">end</span>())<br>            &#123;<br>                T[i] = <span class="hljs-built_in">update</span>(T[i + <span class="hljs-number">1</span>], i, <span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-type">int</span> tmp = <span class="hljs-built_in">update</span>(T[i + <span class="hljs-number">1</span>], mp[a[i]], <span class="hljs-number">-1</span>);<br>                T[i] = <span class="hljs-built_in">update</span>(tmp, i, <span class="hljs-number">1</span>);<br>            &#125;<br>            mp[a[i]] = i;<br>        &#125;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q);<br>        <span class="hljs-keyword">while</span> (q--)<br>        &#123;<br>            <span class="hljs-type">int</span> l, r;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">query</span>(T[l], r));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>线段树求区间最大值减最小值</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e4</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> w[N];<br><span class="hljs-type">int</span> n, q;<br><span class="hljs-type">int</span> _max, _min;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r, minn, maxn;<br>&#125; tr[N * <span class="hljs-number">4</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    tr[u].minn = <span class="hljs-built_in">min</span>(tr[u &lt;&lt; <span class="hljs-number">1</span>].minn, tr[u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].minn);<br>    tr[u].maxn = <span class="hljs-built_in">max</span>(tr[u &lt;&lt; <span class="hljs-number">1</span>].maxn, tr[u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].maxn);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    tr[u].l = l;<br>    tr[u].r = r;<br>    <span class="hljs-keyword">if</span> (l == r)<br>    &#123;<br>        tr[u].maxn = tr[u].minn = w[l];<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(u &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    <span class="hljs-built_in">build</span>(u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-built_in">pushup</span>(u);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r)<br>    &#123;<br>        _max = <span class="hljs-built_in">max</span>(_max, tr[u].maxn);<br>        _min = <span class="hljs-built_in">min</span>(_min, tr[u].minn);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid)<br>    &#123;<br>        <span class="hljs-built_in">query</span>(u &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (r &gt; mid)<br>    &#123;<br>        <span class="hljs-built_in">query</span>(u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;w[i]);<br>    &#125;<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-type">int</span> l, r;<br>    <span class="hljs-keyword">while</span> (q--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);<br>        _max = -INF;<br>        _min = INF;<br>        <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, l, r);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, _max - _min);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>线段树区间修改和求和</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> w[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r, sum, lazy;<br>&#125; tr[N * <span class="hljs-number">4</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    tr[u].sum = tr[u &lt;&lt; <span class="hljs-number">1</span>].sum + tr[u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (tr[u].lazy != <span class="hljs-number">0</span>)<br>    &#123;<br>        tr[u &lt;&lt; <span class="hljs-number">1</span>].sum += (tr[u &lt;&lt; <span class="hljs-number">1</span>].r - tr[u &lt;&lt; <span class="hljs-number">1</span>].l + <span class="hljs-number">1</span>) * tr[u].lazy;<br>        tr[u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum += (tr[u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].r - tr[u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].l + <span class="hljs-number">1</span>) * tr[u].lazy;<br>        tr[u &lt;&lt; <span class="hljs-number">1</span>].lazy += tr[u].lazy;<br>        tr[u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].lazy += tr[u].lazy;<br>        tr[u].lazy = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    tr[u] = &#123;l, r, w[l], <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">if</span> (l == r)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">build</span>(u &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    <span class="hljs-built_in">build</span>(u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-built_in">pushup</span>(u);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r)<br>    &#123;<br>        tr[u].sum += (tr[u].r - tr[u].l + <span class="hljs-number">1</span>) * k;<br>        tr[u].lazy += k;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (tr[u].l + tr[u].r) / <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">pushdown</span>(u);<br>    <span class="hljs-keyword">if</span> (l &lt;= mid)<br>    &#123;<br>        <span class="hljs-built_in">update</span>(u &lt;&lt; <span class="hljs-number">1</span>, l, r, k);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (r &gt; mid)<br>    &#123;<br>        <span class="hljs-built_in">update</span>(u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r, k);<br>    &#125;<br>    <span class="hljs-built_in">pushup</span>(u);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r)<br>    &#123;<br>        <span class="hljs-keyword">return</span> tr[u].sum;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">pushdown</span>(u);<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid)<br>    &#123;<br>        sum += <span class="hljs-built_in">query</span>(u &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (r &gt; mid)<br>    &#123;<br>        sum += <span class="hljs-built_in">query</span>(u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;w[i]);<br>    &#125;<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-type">int</span> op;<br>    <span class="hljs-type">int</span> x, y, k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;op);<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>, &amp;x, &amp;y, &amp;k);<br>            <span class="hljs-built_in">update</span>(<span class="hljs-number">1</span>, x, y, k);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;x, &amp;y);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, x, y));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>线段树单点修改和区间求和</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> w[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r, sum;<br>&#125; tr[N * <span class="hljs-number">4</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    tr[u].sum = tr[u &lt;&lt; <span class="hljs-number">1</span>].sum + tr[u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    tr[u] = &#123;l, r, w[l]&#125;;<br>    <span class="hljs-keyword">if</span> (l == r)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(u &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    <span class="hljs-built_in">build</span>(u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-built_in">pushup</span>(u);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (tr[u].l == x &amp;&amp; tr[u].r == x)<br>    &#123;<br>        tr[u].sum += k;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid)<br>    &#123;<br>        <span class="hljs-built_in">update</span>(u &lt;&lt; <span class="hljs-number">1</span>, x, k);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &gt; mid)<br>    &#123;<br>        <span class="hljs-built_in">update</span>(u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, x, k);<br>    &#125;<br>    <span class="hljs-built_in">pushup</span>(u);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r)<br>    &#123;<br>        <span class="hljs-keyword">return</span> tr[u].sum;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= mid)<br>    &#123;<br>        sum += <span class="hljs-built_in">query</span>(u &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (r &gt; mid)<br>    &#123;<br>        sum += <span class="hljs-built_in">query</span>(u &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;w[i]);<br>    &#125;<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>    <span class="hljs-type">int</span> op;<br>    <span class="hljs-type">int</span> x, y, k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;op);<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;x, &amp;k);<br>            <span class="hljs-built_in">update</span>(<span class="hljs-number">1</span>, x, k);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;x, &amp;y);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, x, y));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>AC自动机求有多少个不同的模式串在文本串里出现过</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> ne[N];<br><span class="hljs-type">int</span> ch[N][<span class="hljs-number">26</span>], cnt[N], idx;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; s[i]; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> j = s[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!ch[p][j])<br>        &#123;<br>            ch[p][j] = ++idx;<br>        &#125;<br>        p = ch[p][j];<br>    &#125;<br>    cnt[p]++;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ch[<span class="hljs-number">0</span>][i])<br>        &#123;<br>            q.<span class="hljs-built_in">push</span>(ch[<span class="hljs-number">0</span>][i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> u = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> v = ch[u][i];<br>            <span class="hljs-keyword">if</span> (v)<br>            &#123;<br>                ne[v] = ch[ne[u]][i];<br>                q.<span class="hljs-built_in">push</span>(v);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ch[u][i] = ch[ne[u]][i];<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>, i = <span class="hljs-number">0</span>; s[k]; k++)<br>    &#123;<br>        i = ch[i][s[k] - <span class="hljs-string">&#x27;a&#x27;</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &amp;&amp; ~cnt[j]; j = ne[j])<br>        &#123;<br>            ans += cnt[j];<br>            cnt[j] = <span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    string a;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        cin &gt;&gt; a;<br>        <span class="hljs-built_in">insert</span>(a);<br>    &#125;<br>    <span class="hljs-built_in">build</span>();<br>    cin &gt;&gt; a;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-built_in">query</span>(a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>欧拉函数求小于n的互质数</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//试除法求单个欧拉函数</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">phi</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans = n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i * i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            ans = ans * (i - <span class="hljs-number">1</span>) / i; <span class="hljs-comment">//这里实际上是ans*(i分之i减一)</span><br>            <span class="hljs-keyword">while</span> (n % i == <span class="hljs-number">0</span>)<br>            &#123;<br>                n /= i;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>)<br>    &#123;<br>        ans = ans * (n - <span class="hljs-number">1</span>) / n;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;n) != EOF)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">phi</span>(n));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//-------------------------------</span><br><span class="hljs-comment">//筛法求1~n的欧拉函数</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> p[N], vis[N], cnt;<br><span class="hljs-type">int</span> phi[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_phi</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    phi[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!vis[i])<br>        &#123;<br>            p[cnt++] = i;<br>            phi[i] = i - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; i * p[j] &lt;= n; j++)<br>        &#123;<br>            <span class="hljs-type">int</span> m = i * p[j];<br>            vis[m] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (i % p[j] == <span class="hljs-number">0</span>)<br>            &#123;<br>                phi[m] = p[j] * phi[i];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                phi[m] = (p[j] - <span class="hljs-number">1</span>) * phi[i];<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-built_in">get_phi</span>(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, phi[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>java中的BigInteger类</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.*;<br><span class="hljs-keyword">import</span> java.math.BigInteger;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sc.nextBigInteger();<br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> sc.nextBigInteger();<br>        System.out.println(a.add(b));<span class="hljs-comment">//相加</span><br>        System.out.println(a.subtract(b));<span class="hljs-comment">//相减</span><br>        System.out.println(a.multiply(b));<span class="hljs-comment">//相乘</span><br>        System.out.println(a.divide(b));<span class="hljs-comment">//相除取整</span><br>        System.out.println(a.gcd(b));<span class="hljs-comment">//最大公约数</span><br>        System.out.println(a.abs());<span class="hljs-comment">//绝对值</span><br>        System.out.println(a.negate());<span class="hljs-comment">//数字取反</span><br>        <span class="hljs-type">int</span> ans=<span class="hljs-number">10</span>;<br>        System.out.println(a.pow(ans));<span class="hljs-comment">//幂次方</span><br>        BigInteger mod=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;1000000007&quot;</span>);<br>        System.out.println(a.remainder(mod));<span class="hljs-comment">//取模</span><br>        System.out.println(a.compareTo(b));<span class="hljs-comment">//比较大小，大于返回1，小于返回-1，等于返回0</span><br>        <span class="hljs-type">int</span> x=<span class="hljs-number">2</span>;<br>        System.out.println(a.toString(x));<span class="hljs-comment">//返回大整数x进制的字符串表示</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>LCA倍增写法</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//vector存储边</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> dep[N];    <span class="hljs-comment">// dep[u]存u点在树上的深度</span><br><span class="hljs-type">int</span> fa[N][<span class="hljs-number">20</span>]; <span class="hljs-comment">// fa[u][i]存从u点向上跳2的i次方层的祖先结点</span><br>vector&lt;<span class="hljs-type">int</span>&gt; v[N];<br><span class="hljs-type">int</span> n, m, s;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> father)</span></span><br><span class="hljs-function"></span>&#123;<br>    dep[u] = dep[father] + <span class="hljs-number">1</span>;<br>    fa[u][<span class="hljs-number">0</span>] = father;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">19</span>; i++) <span class="hljs-comment">//跳2的0次方情况已经弄过了，所以从1开始</span><br>    &#123;<br>        fa[u][i] = fa[fa[u][i - <span class="hljs-number">1</span>]][i - <span class="hljs-number">1</span>]; <span class="hljs-comment">//先向上跳2的i-1层，再向上跳2^i-1层</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> t : v[u]) <span class="hljs-comment">// dfs深搜就行</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (t == father)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs</span>(t, u);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (dep[u] &lt; dep[v]) <span class="hljs-comment">//从深度大的开始跳</span><br>    &#123;<br>        <span class="hljs-built_in">swap</span>(u, v);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">19</span>; i &gt;= <span class="hljs-number">0</span>; i--) <span class="hljs-comment">//先跳到同一层</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (dep[fa[u][i]] &gt;= dep[v])<br>        &#123;<br>            u = fa[u][i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (u == v) <span class="hljs-comment">//看看他俩在不在一条路径上</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> v;<br>    &#125;<br>    <span class="hljs-comment">//否则就两个结点一起往上跳，找到第一个相同的结点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">19</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (fa[u][i] != fa[v][i])<br>        &#123;<br>            u = fa[u][i], v = fa[v][i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//跳到最后一定是再跳1层就行，但判断之后不符合条件就直接退出了，所以最后u和v并没有赋值，得到的实际上是最近公共祖先的子节点</span><br>    <span class="hljs-keyword">return</span> fa[u][<span class="hljs-number">0</span>]; <span class="hljs-comment">//返回再跳一层的值即可</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;s);<br>    <span class="hljs-type">int</span> x, y;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);<br>        v[x].<span class="hljs-built_in">push_back</span>(y);<br>        v[y].<span class="hljs-built_in">push_back</span>(x);<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(s, <span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> u, v;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">lca</span>(u, v));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//-----------------------------------------</span><br><span class="hljs-comment">//链式前向星存储边</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> to, nex;<br>&#125; a[N * <span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> dep[N];    <span class="hljs-comment">// dep[u]存u点在树上的深度</span><br><span class="hljs-type">int</span> fa[N][<span class="hljs-number">20</span>]; <span class="hljs-comment">// fa[u][i]存从u点向上跳2的i次方层的祖先结点</span><br><span class="hljs-comment">// vector&lt;int&gt; v[N];</span><br><span class="hljs-type">int</span> n, m, s;<br><span class="hljs-type">int</span> head[N];<br><span class="hljs-type">int</span> idx;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    a[++idx].to = v;<br>    a[idx].nex = head[u];<br>    head[u] = idx;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> father)</span></span><br><span class="hljs-function"></span>&#123;<br>    dep[u] = dep[father] + <span class="hljs-number">1</span>;<br>    fa[u][<span class="hljs-number">0</span>] = father;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">19</span>; i++) <span class="hljs-comment">//跳2的0次方情况已经弄过了，所以从1开始</span><br>    &#123;<br>        fa[u][i] = fa[fa[u][i - <span class="hljs-number">1</span>]][i - <span class="hljs-number">1</span>]; <span class="hljs-comment">//先向上跳2的i-1层，再向上跳2^i-1层</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[u]; i != <span class="hljs-number">-1</span>; i = a[i].nex)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a[i].to == father)<br>        &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-built_in">dfs</span>(a[i].to, u);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (dep[u] &lt; dep[v]) <span class="hljs-comment">//从深度大的开始跳</span><br>    &#123;<br>        <span class="hljs-built_in">swap</span>(u, v);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">19</span>; i &gt;= <span class="hljs-number">0</span>; i--) <span class="hljs-comment">//先跳到同一层</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (dep[fa[u][i]] &gt;= dep[v])<br>        &#123;<br>            u = fa[u][i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (u == v) <span class="hljs-comment">//看看他俩在不在一条路径上</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> v;<br>    &#125;<br>    <span class="hljs-comment">//否则就两个结点一起往上跳，找到第一个相同的结点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">19</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (fa[u][i] != fa[v][i])<br>        &#123;<br>            u = fa[u][i], v = fa[v][i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//跳到最后一定是再跳1层就行，但判断之后不符合条件就直接退出了，所以最后u和v并没有赋值，得到的实际上是最近公共祖先的子节点</span><br>    <span class="hljs-keyword">return</span> fa[u][<span class="hljs-number">0</span>]; <span class="hljs-comment">//返回再跳一层的值即可</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;s);<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(head));<br>    <span class="hljs-type">int</span> x, y;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);<br>        <span class="hljs-built_in">add</span>(x, y);<br>        <span class="hljs-built_in">add</span>(y, x);<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(s, <span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> u, v;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">lca</span>(u, v));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>LCATraJan写法</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, m, s, a, b;<br>vector&lt;<span class="hljs-type">int</span>&gt; e[N];<br>vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; query[N];<br><span class="hljs-type">int</span> fa[N], vis[N], ans[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x == fa[x])<br>    &#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> fa[x] = <span class="hljs-built_in">find</span>(fa[x]);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">tarjan</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    vis[x] = <span class="hljs-number">1</span>; <span class="hljs-comment">//标记x已访问</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> t : e[x])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (vis[t] == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">tarjan</span>(t);<br>            fa[t] = x; <span class="hljs-comment">//回到x时指向x</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//离开x时找LCA</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> q : query[x])<br>    &#123;<br>        <span class="hljs-type">int</span> y = q.first, i = q.second;<br>        <span class="hljs-keyword">if</span> (vis[y] == <span class="hljs-number">1</span>)<br>        &#123;<br>            ans[i] = <span class="hljs-built_in">find</span>(y);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;s);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        e[a].<span class="hljs-built_in">push_back</span>(b);<br>        e[b].<span class="hljs-built_in">push_back</span>(a);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        query[a].<span class="hljs-built_in">push_back</span>(&#123;b, i&#125;);<br>        query[b].<span class="hljs-built_in">push_back</span>(&#123;a, i&#125;);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        fa[i] = i;<br>    &#125;<br>    <span class="hljs-built_in">tarjan</span>(s);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>拓扑排序（Kahn算法)</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//https://vjudge.net/problem/UVA-10305</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e2</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> din[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; e[N], ans;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">toposort</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (din[i] == <span class="hljs-number">0</span>)<br>        &#123;<br>            q.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> x = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        ans.<span class="hljs-built_in">push_back</span>(x);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> y : e[x])<br>        &#123;<br>            --din[y];<br>            <span class="hljs-keyword">if</span> (din[y] == <span class="hljs-number">0</span>)<br>            &#123;<br>                q.<span class="hljs-built_in">push</span>(y);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        cin &gt;&gt; n &gt;&gt; m;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span> &amp;&amp; m == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)<br>        &#123;<br>            e[i].<span class="hljs-built_in">clear</span>();<br>        &#125;<br>        <span class="hljs-built_in">memset</span>(din, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(din));<br>        ans.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-type">int</span> a, b;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        &#123;<br>            cin &gt;&gt; a &gt;&gt; b;<br>            e[a].<span class="hljs-built_in">push_back</span>(b);<br>            din[b]++;<br>        &#125;<br>        <span class="hljs-built_in">toposort</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : ans)<br>        &#123;<br>            cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>字典树求最大异或对</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, a[N];<br><span class="hljs-type">int</span> ch[N * <span class="hljs-number">31</span>][<span class="hljs-number">2</span>];<span class="hljs-comment">//ch[p][j]表示p号结点沿着j这条边到达的子节点</span><br><span class="hljs-type">int</span> idx;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-type">int</span> j = x &gt;&gt; i &amp; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (!ch[p][j])<br>        &#123;<br>            ch[p][j] = ++idx;<br>        &#125;<br>        p = ch[p][j];<br>        <span class="hljs-comment">// printf(&quot;%d\n&quot;, idx);</span><br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>, sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-type">int</span> j = x &gt;&gt; i &amp; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (ch[p][!j])<br>        &#123;<br>            sum += <span class="hljs-number">1</span> &lt;&lt; i;<br>            p = ch[p][!j];<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            p = ch[p][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        <span class="hljs-built_in">insert</span>(a[i]);<br>    &#125;<br>    <span class="hljs-type">int</span> maxn = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        maxn = <span class="hljs-built_in">max</span>(maxn, <span class="hljs-built_in">query</span>(a[i]));<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, maxn);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1><strong>优先队列 priority_queue</strong></h1>
<p><strong>empty() 如果队列为空返回真</strong></p>
<p><strong>pop() 删除对顶元素</strong></p>
<p><strong>push() 加入一个元素</strong></p>
<p><strong>size() 返回优先队列中拥有的元素个数</strong></p>
<p><strong>top() 返回优先队列队顶元素</strong></p>
<p><strong>在默认的优先队列中，优先级高的先出队。在默认的 int 型中先出队的为较大的数</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-number">1</span> priority_queue&lt;<span class="hljs-type">int</span>&gt;q1;<span class="hljs-comment">//大的先出对</span><br><span class="hljs-number">2</span> priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;,greater&lt;<span class="hljs-type">int</span>&gt; &gt;q2; <span class="hljs-comment">//小的先出队</span><br></code></pre></td></tr></table></figure>
<p><strong>自定义比较函数：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-number">1</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">cmp</span><br><span class="hljs-number">2</span> &#123;<br><span class="hljs-number">3</span> <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span> <span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function">4 </span>&#123;<br><span class="hljs-number">5</span> <span class="hljs-keyword">return</span> x &gt; y; <span class="hljs-comment">// x 小的优先级高</span><br><span class="hljs-number">6</span> <span class="hljs-comment">//也可以写成其他方式，如：return p[x] &gt; p[y]; 表示 p[i] 小的优先级高</span><br><span class="hljs-number">7</span> &#125;<br><span class="hljs-number">8</span> &#125;;<br><span class="hljs-number">9</span> priority_queue&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, cmp&gt;q;<span class="hljs-comment">//定义方法</span><br><span class="hljs-number">10</span> <span class="hljs-comment">//其中，第二个参数为容器类型。第三个参数为比较函数。</span><br></code></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br><span class="hljs-number">2</span> &#123;<br><span class="hljs-number">3</span> <span class="hljs-type">int</span> x, y;<br><span class="hljs-number">4</span> <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt; (node a, node b)<br><span class="hljs-number">5</span> &#123;<br><span class="hljs-number">6</span> <span class="hljs-keyword">return</span> a.x &gt; b.x; <span class="hljs-comment">//结构体中，x 小的优先级高</span><br><span class="hljs-number">7</span> &#125;<br><span class="hljs-number">8</span> &#125;;<br><span class="hljs-number">9</span> priority_queue&lt;node&gt;q;<span class="hljs-comment">//定义方法</span><br><span class="hljs-number">10</span> <span class="hljs-comment">//在该结构中，y 为值, x 为优先级。</span><br><span class="hljs-number">11</span> <span class="hljs-comment">//通过自定义 operator&lt; 操作符来比较元素中的优先级。</span><br><span class="hljs-number">12</span> <span class="hljs-comment">//在重载”&lt;”时，最好不要重载”&gt;”，可能会发生编译错误</span><br></code></pre></td></tr></table></figure>
<h1>求逆元的四种方法</h1>
<ul>
<li>
<h3 id="扩展欧几里得求逆元">扩展欧几里得求逆元</h3>
</li>
</ul>
<p><strong>这种方法常数最小</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span>  <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">extgcd</span><span class="hljs-params">(ll a,ll b,ll&amp; d,ll&amp; x,ll&amp; y)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(!b)&#123; d=a; x=<span class="hljs-number">1</span>; y=<span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-keyword">else</span>&#123; <span class="hljs-built_in">extgcd</span>(b,a%b,d,y,x); y-=x*(a/b); &#125;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">inverse</span><span class="hljs-params">(ll a,ll n)</span></span>&#123;<br>    ll d,x,y;<br>    <span class="hljs-built_in">extgcd</span>(a,n,d,x,y);<br>    <span class="hljs-keyword">return</span> d==<span class="hljs-number">1</span>?(x+n)%n:<span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<ul>
<li>
<h3 id="费马小定理求逆元（-m为素数）">费马小定理求逆元（%m为素数）</h3>
</li>
</ul>
<p><strong>如果一个数m为素数，那么a^(m-1)≡1 (mod m)，那么a的逆元就是a^(m-2)，这是根据费马小定理推出来的。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span>  <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-function">ll <span class="hljs-title">pow_mod</span><span class="hljs-params">(ll x, ll n, ll mod)</span></span>&#123;<br>    ll res=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(n&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span>(n&amp;<span class="hljs-number">1</span>)res=res*x%mod;<br>        x=x*x%mod;<br>        n&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br>ll ans = <span class="hljs-built_in">pow_mod</span>(a,m<span class="hljs-number">-2</span>,m);<br></code></pre></td></tr></table></figure>
<ul>
<li>
<h3 id="欧拉函数求逆元（-p不为素数）：">欧拉函数求逆元（%p不为素数）：</h3>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">eular</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i*i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(n % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            ans -= ans/i; <span class="hljs-comment">//等价于通项，把n乘进去</span><br>            <span class="hljs-keyword">while</span>(n % i == <span class="hljs-number">0</span>) <span class="hljs-comment">//确保下一个i是n的素因数</span><br>                n /= i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(n &gt; <span class="hljs-number">1</span>)ans -= ans/n; <span class="hljs-comment">//最后可能还剩下一个素因数没有除</span><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>注意，求出φ(n)以后依旧是mod n。</strong></p>
<p><strong>然后根据a^(φ(n))≡1 (mod n)，再拉个快速幂就行了。</strong></p>
<ul>
<li>
<h3 id="逆元打表">逆元打表</h3>
<p>​      <strong>最喜欢的就是这个了</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span>  <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> inv[N];<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inverse</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> p)</span> </span>&#123;<br>    inv[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>; i&lt;=n; ++i) &#123;<br>        inv[i] = (ll) (p - p / i) * inv[p%i] % p;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li>
<h3 id="n-的逆元">n!的逆元</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 先利用费马小定理求出 n! 的逆元，再倒推求(n-1)!... 的逆元</span><br>inv[N] = <span class="hljs-built_in">power</span>(fac[N], MOD - <span class="hljs-number">2</span>); <span class="hljs-comment">// fac[n]为 N 的阶乘</span><br><br><span class="hljs-keyword">for</span> (i = N - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    inv[i] = <span class="hljs-number">1ll</span> * inv[i + <span class="hljs-number">1</span>] * (i + <span class="hljs-number">1</span>) % MOD;<br></code></pre></td></tr></table></figure>
</li>
</ul>
<h1>容斥原理（并集）</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> n, m, prim[N];<br><span class="hljs-comment">/*给定一个整数n和m个不同的质数p1,p2,...,pm ,</span><br><span class="hljs-comment">求1～n中能被p1,p2,…,pm中的至少一个数整除的数有多少个?</span><br><span class="hljs-comment">其中m≤16, n, pi ≤ 10*/</span><br><span class="hljs-comment">// 2 3</span><br><span class="hljs-comment">// 2 3 5</span><br><span class="hljs-comment">// 10</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calc</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">1</span> &lt;&lt; m; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>, sign = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i &amp; <span class="hljs-number">1</span> &lt;&lt; j)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (t * prim[j] &gt; n)<br>                &#123;<br>                    t = <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                t *= prim[j];<br>                sign = -sign;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (t)<br>        &#123;<br>            res += n / t * sign;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>    &#123;<br>        cin &gt;&gt; prim[i];<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-built_in">calc</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>容斥原理（交集）</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 洛谷P1450，它的本质是全集减补集的并集</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> c[<span class="hljs-number">10</span>], d[<span class="hljs-number">10</span>];<br><span class="hljs-type">int</span> dp[N];<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> s;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = c[i]; j &lt;= N; j++)<br>        &#123;<br>            dp[j] += dp[j - c[i]];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calc</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>, sign = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">4</span>; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i &amp; <span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>))<br>            &#123;<br>                t += c[j] * (d[j] + <span class="hljs-number">1</span>);<br>                sign = -sign;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (s &gt;= t)<br>        &#123;<br>            ans += dp[s - t] * sign;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[s] - ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span>; i++)<br>    &#123;<br>        cin &gt;&gt; c[i];<br>    &#125;<br>    <span class="hljs-built_in">init</span>();<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">while</span> (n--)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span>; i++)<br>        &#123;<br>            cin &gt;&gt; d[i];<br>        &#125;<br>        cin &gt;&gt; s;<br>        cout &lt;&lt; <span class="hljs-built_in">calc</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>筛法求莫比乌斯函数</h1>
<p><img src="https://i.328888.xyz/2023/03/17/Lei1C.png" alt="image-20230317212228262"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> p[N], vis[N], cnt;<br><span class="hljs-type">int</span> mu[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_mu</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    mu[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!vis[i])<br>        &#123;<br>            p[++cnt] = i;<br>            mu[i] = <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; i * p[j] &lt;= n; j++)<br>        &#123;<br>            <span class="hljs-type">int</span> m = i * p[j];<br>            vis[m] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (i % p[j] == <span class="hljs-number">0</span>)<br>            &#123;<br>                mu[m] = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                mu[m] = -mu[i];<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-built_in">get_mu</span>(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cout &lt;&lt; mu[i] &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>BSGS算法</h1>
<p><img src="https://i.328888.xyz/2023/03/21/Tzc6A.png" alt="image-20230321153331033"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bsgs</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    a %= p, b %= p;<br>    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> m = <span class="hljs-built_in">ceil</span>(<span class="hljs-built_in">sqrt</span>(p));<br>    <span class="hljs-type">int</span> t = b;<br>    unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; hash;<br>    hash[b] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; m; j++)<br>    &#123;<br>        t = t * a % p;<br>        hash[t] = j;<br>    &#125;<br>    <span class="hljs-type">int</span> mi = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        mi = mi * a % p;<br>    &#125;<br>    t = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        t = t * mi % p;<br>        <span class="hljs-keyword">if</span> (hash.<span class="hljs-built_in">count</span>(t))<br>        &#123;<br>            <span class="hljs-keyword">return</span> i * m - hash[t];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> p, b, n;<br>    cin &gt;&gt; p &gt;&gt; b &gt;&gt; n;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-built_in">bsgs</span>(b, n, p);<br>    <span class="hljs-keyword">if</span> (ans == <span class="hljs-number">-1</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;no solution&quot;</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>扩展BSGS算法</h1>
<p><img src="https://i.328888.xyz/2023/03/21/ay8et.png" alt="image-20230321165933077"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 洛谷 4195</span><br><span class="hljs-comment">// 用于a和p不互质的情况</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><span class="hljs-function">LL <span class="hljs-title">gcd</span><span class="hljs-params">(LL a, LL b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> b == <span class="hljs-number">0</span> ? a : <span class="hljs-built_in">gcd</span>(b, a % b);<br>&#125;<br><span class="hljs-function">LL <span class="hljs-title">exbsgs</span><span class="hljs-params">(LL a, LL b, LL p)</span></span><br><span class="hljs-function"></span>&#123;<br>    a %= p;<br>    b %= p;<br>    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">1</span> || p == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// x=0</span><br><br>    LL d, k = <span class="hljs-number">0</span>, A = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>    &#123;<br>        d = <span class="hljs-built_in">gcd</span>(a, p);<br>        <span class="hljs-keyword">if</span> (d == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span> (b % d)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// 无解</span><br>        k++;<br>        b /= d;<br>        p /= d;<br>        A = A * (a / d) % p; <span class="hljs-comment">// 求a^k/D</span><br>        <span class="hljs-keyword">if</span> (A == b)<br>            <span class="hljs-keyword">return</span> k;<br>    &#125;<br><br>    LL m = <span class="hljs-built_in">ceil</span>(<span class="hljs-built_in">sqrt</span>(p));<br>    LL t = b;<br>    unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; hash;<br>    hash[b] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; m; j++)<br>    &#123;<br>        t = t * a % p; <span class="hljs-comment">// 求b*a^j</span><br>        hash[t] = j;<br>    &#125;<br>    LL mi = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        mi = mi * a % p; <span class="hljs-comment">// 求a^m</span><br>    t = A;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        t = t * mi % p; <span class="hljs-comment">// 求(a^m)^i</span><br>        <span class="hljs-keyword">if</span> (hash.<span class="hljs-built_in">count</span>(t))<br>            <span class="hljs-keyword">return</span> i * m - hash[t] + k;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// 无解</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    LL a, p, b;<br>    <span class="hljs-keyword">while</span> ((<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>, &amp;a, &amp;p, &amp;b) != EOF) &amp;&amp; a)<br>    &#123;<br>        LL res = <span class="hljs-built_in">exbsgs</span>(a, b, p);<br>        <span class="hljs-keyword">if</span> (res == <span class="hljs-number">-1</span>)<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No Solution&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, res);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>威尔逊定理</h1>
<p><img src="https://i.328888.xyz/2023/03/21/TJXxy.png" alt="image-20230321161853459"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//HDU 2973</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000001</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mx = <span class="hljs-number">3000008</span>;<br><span class="hljs-type">int</span> s[N], p[N], vis[mx], t, n;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_prim</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-type">long</span> i = <span class="hljs-number">2</span>; i &lt; mx; ++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!vis[i])<br>        &#123;<br>            <span class="hljs-keyword">if</span> ((i - <span class="hljs-number">7</span>) % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>)<br>            &#123;<br>                p[(i - <span class="hljs-number">7</span>) / <span class="hljs-number">3</span>] = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-type">long</span> j = i * i; j &lt; mx; j += i)<br>            &#123;<br>                vis[j] = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">get_prim</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; N; ++i)<br>    &#123;<br>        s[i] = s[i - <span class="hljs-number">1</span>] + p[i];<br>    &#125;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        cin &gt;&gt; n;<br>        cout &lt;&lt; s[n] &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>裴蜀定理</h1>
<p><img src="https://i.328888.xyz/2023/03/21/TaBlQ.png" alt="image-20230321163914077"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// luogu 4549</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-type">int</span> s = a[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        s = __gcd(<span class="hljs-built_in">abs</span>(a[i]), s);<br>    &#125;<br>    cout &lt;&lt; s &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>卡特兰数(Catalan数)</h1>
<p><img src="https://i.328888.xyz/2023/03/21/apbTP.png" alt="image-20230321211646630"></p>
<p><img src="https://i.328888.xyz/2023/03/21/ap3Ac.png" alt="image-20230321211959934"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//luogu P1044</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">int</span> f[<span class="hljs-number">200</span>];<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>); <span class="hljs-comment">// 关闭同步流，提升cin、cout读入输出效率</span><br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);                  <span class="hljs-comment">// 解除 cin 与 cout 的绑定，提升输入速度</span><br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    f[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        f[i] = f[i - <span class="hljs-number">1</span>] * (i * <span class="hljs-number">4</span> - <span class="hljs-number">2</span>) / (i + <span class="hljs-number">1</span>);<br>    &#125;<br>    cout &lt;&lt; f[n] &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>普通生成函数</h1>
<p><img src="https://i.328888.xyz/2023/03/22/YKk4t.png" alt="image-20230322214258600"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//HDU 2152</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e2</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N], b[N], c[N], d[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">clac</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= m; i++)<br>    &#123;<br>        c[i] = d[i] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = a[<span class="hljs-number">1</span>]; i &lt;= b[<span class="hljs-number">1</span>]; i++)<br>    &#123;<br>        c[i] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= m; j++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = a[i]; k &lt;= b[i]; k++)<br>            &#123;<br>                d[j + k] += c[j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= m; j++)<br>        &#123;<br>            c[j] = d[j];<br>            d[j] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> c[m];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; n &gt;&gt; m)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            cin &gt;&gt; a[i] &gt;&gt; b[i];<br>        &#125;<br>        cout &lt;&lt; <span class="hljs-built_in">clac</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// HDU 1085</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N], b[N], c[N], d[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clac</span><span class="hljs-params">(<span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= m; i++)<br>    &#123;<br>        c[i] = d[i] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= a[<span class="hljs-number">1</span>]; i++)<br>    &#123;<br>        c[i] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">3</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= m; j++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= b[i] * a[i] &amp;&amp; (j + k) &lt;= m; k += b[i])<br>            &#123;<br>                d[j + k] += c[j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= m; j++)<br>        &#123;<br>            c[j] = d[j];<br>            d[j] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        cin &gt;&gt; a[<span class="hljs-number">1</span>] &gt;&gt; a[<span class="hljs-number">2</span>] &gt;&gt; a[<span class="hljs-number">3</span>];<br>        <span class="hljs-keyword">if</span> (a[<span class="hljs-number">1</span>] == <span class="hljs-number">0</span> &amp;&amp; a[<span class="hljs-number">2</span>] == <span class="hljs-number">0</span> &amp;&amp; a[<span class="hljs-number">3</span>] == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        b[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>, b[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span>, b[<span class="hljs-number">3</span>] = <span class="hljs-number">5</span>;<br>        <span class="hljs-type">int</span> m = a[<span class="hljs-number">1</span>] * <span class="hljs-number">1</span> + a[<span class="hljs-number">2</span>] * <span class="hljs-number">2</span> + a[<span class="hljs-number">3</span>] * <span class="hljs-number">5</span>;<br>        <span class="hljs-built_in">clac</span>(m);<br>        <span class="hljs-type">int</span> x = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (x &lt;= m &amp;&amp; c[x])<br>        &#123;<br>            x++;<br>        &#125;<br>        cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>指数生成函数</h1>
<p><img src="https://i.328888.xyz/2023/03/28/itEjLL.png" alt="image-20230328155848886"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// HDU 1521</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e2</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">double</span> c[N], d[N];<br><span class="hljs-type">double</span> fac[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    fac[<span class="hljs-number">0</span>] = fac[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        fac[i] = fac[i - <span class="hljs-number">1</span>] * i;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">calc</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= m; i++)<br>    &#123;<br>        c[i] = d[i] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= a[<span class="hljs-number">1</span>]; i++)<br>    &#123;<br>        c[i] = <span class="hljs-number">1.0</span> / fac[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= m; j++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= a[i]; k++)<br>            &#123;<br>                d[j + k] += c[j] / fac[k];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= m; j++)<br>        &#123;<br>            c[j] = d[j];<br>            d[j] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> c[m] * fac[m];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// ios::sync_with_stdio(false);</span><br>    <span class="hljs-comment">// cin.tie(0);</span><br>    <span class="hljs-comment">// cout.tie(0);</span><br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; n &gt;&gt; m)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            cin &gt;&gt; a[i];<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.0lf\n&quot;</span>, <span class="hljs-built_in">calc</span>());<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>生成函数的应用</h1>
<p><img src="https://i.328888.xyz/2023/03/28/itEXwZ.png" alt="image-20230328160008438"></p>
<p><img src="https://i.328888.xyz/2023/03/28/itESwc.png" alt="image-20230328160023580"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// https://darkbzoj.cc/problem/3028</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">10007</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qpow</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>        &#123;<br>            ans = ans * a % mod;<br>        &#125;<br>        a = a * a % mod;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    string a;<br>    cin &gt;&gt; a;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        n = (n * <span class="hljs-number">10</span> % mod + a[i] - <span class="hljs-string">&#x27;0&#x27;</span>) % mod;<br>    &#125;<br>    cout &lt;&lt; n * (n + <span class="hljs-number">1</span>) % mod * (n + <span class="hljs-number">2</span>) % <span class="hljs-function">mod * <span class="hljs-title">qpow</span><span class="hljs-params">(<span class="hljs-number">6</span>, mod - <span class="hljs-number">2</span>)</span> % mod &lt;&lt; &#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// POJ 3734</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">10007</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ksm</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>        &#123;<br>            ans = ans * a % mod;<br>        &#125;<br>        a = a * a % mod;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-type">int</span> n;<br>        cin &gt;&gt; n;<br>        cout &lt;&lt; (<span class="hljs-built_in">ksm</span>(<span class="hljs-number">4</span>, n - <span class="hljs-number">1</span>) + <span class="hljs-built_in">ksm</span>(<span class="hljs-number">2</span>, n - <span class="hljs-number">1</span>)) % mod &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>狄利克雷卷积</h1>
<p><img src="https://i.328888.xyz/2023/03/29/iknri8.png" alt="image-20230329161526083"></p>
<h1>和式的变换</h1>
<p><img src="https://i.328888.xyz/2023/03/29/iknRzF.png" alt="image-20230329161644649"></p>
<p><img src="https://i.328888.xyz/2023/03/29/ikt0oX.png" alt="image-20230329162008037"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// luogu 3455</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e4</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> mu[N];<br><span class="hljs-type">int</span> p[N], vis[N];<br><span class="hljs-type">int</span> cnt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_mu</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    mu[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!vis[i])<br>        &#123;<br>            p[++cnt] = i;<br>            mu[i] = <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; i * p[j] &lt;= n; j++)<br>        &#123;<br>            <span class="hljs-type">int</span> m = i * p[j];<br>            vis[m] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (i % p[j] == <span class="hljs-number">0</span>)<br>            &#123;<br>                mu[m] = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                mu[m] = -mu[i];<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">get_mu</span>(N);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++)<br>    &#123;<br>        mu[i] += mu[i - <span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n &gt; m)<br>    &#123;<br>        <span class="hljs-built_in">swap</span>(n, m);<br>    &#125;<br>    n /= k, m /= k;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r; l &lt;= n; l = r + <span class="hljs-number">1</span>)<br>    &#123;<br>        r = <span class="hljs-built_in">min</span>(n / (n / l), m / (m / l));<br>        ans += (mu[r] - mu[l - <span class="hljs-number">1</span>]) * (n / l) * (m / l);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> a, b, d;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; d;<br>        cout &lt;&lt; <span class="hljs-built_in">cal</span>(a, b, d) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><img src="https://i.328888.xyz/2023/03/29/ikts7H.png" alt="image-20230329162214379"></p>
<p><img src="https://i.328888.xyz/2023/03/29/iktPyX.png" alt="image-20230329162315906"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// luogu 2257</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e7</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> mu[N];<br><span class="hljs-type">int</span> p[N], vis[N];<br><span class="hljs-type">int</span> cnt;<br><span class="hljs-type">int</span> F[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    mu[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; N; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!vis[i])<br>        &#123;<br>            p[++cnt] = i;<br>            mu[i] = <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; i * p[j] &lt; N; j++)<br>        &#123;<br>            <span class="hljs-type">int</span> m = i * p[j];<br>            vis[m] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (i % p[j] == <span class="hljs-number">0</span>)<br>            &#123;<br>                mu[m] = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                mu[m] = -mu[i];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = p[i]; j &lt; N; j += p[i])<br>        &#123;<br>            F[j] += mu[j / p[i]];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++)<br>    &#123;<br>        F[i] += F[i - <span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n &gt; m)<br>    &#123;<br>        <span class="hljs-built_in">swap</span>(n, m);<br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r; l &lt;= n; l = r + <span class="hljs-number">1</span>)<br>    &#123;<br>        r = <span class="hljs-built_in">min</span>(n / (n / l), m / (m / l));<br>        ans += (F[r] - F[l - <span class="hljs-number">1</span>]) * (n / l) * (m / l);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-type">int</span> a, b;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        cout &lt;&lt; <span class="hljs-built_in">cal</span>(a, b) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><img src="https://i.328888.xyz/2023/03/29/ikWVmd.png" alt="image-20230329162407082"></p>
<p><img src="https://i.328888.xyz/2023/03/29/ikWAIz.png" alt="image-20230329162455494"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// luogu 3327</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e4</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> mu[N];<br><span class="hljs-type">int</span> p[N], vis[N];<br><span class="hljs-type">int</span> cnt;<br><span class="hljs-type">int</span> F[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    mu[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; N; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!vis[i])<br>        &#123;<br>            p[++cnt] = i;<br>            mu[i] = <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; i * p[j] &lt; N; j++)<br>        &#123;<br>            <span class="hljs-type">int</span> m = i * p[j];<br>            vis[m] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (i % p[j] == <span class="hljs-number">0</span>)<br>            &#123;<br>                mu[m] = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                mu[m] = -mu[i];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++)<br>    &#123;<br>        mu[i] += mu[i - <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r; l &lt;= i; l = r + <span class="hljs-number">1</span>)<br>        &#123;<br>            r = i / (i / l);<br>            F[i] += (r - l + <span class="hljs-number">1</span>) * (i / l);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n &gt; m)<br>    &#123;<br>        <span class="hljs-built_in">swap</span>(n, m);<br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r; l &lt;= n; l = r + <span class="hljs-number">1</span>)<br>    &#123;<br>        r = <span class="hljs-built_in">min</span>(n / (n / l), m / (m / l));<br>        ans += (mu[r] - mu[l - <span class="hljs-number">1</span>]) * F[n / l] * F[m / l];<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-type">int</span> a, b;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        cout &lt;&lt; <span class="hljs-built_in">cal</span>(a, b) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>莫比乌斯反演</h1>
<p><img src="https://i.328888.xyz/2023/04/20/iGFAOp.png" alt="image-20230420181457681"></p>
<p><img src="https://i.328888.xyz/2023/04/20/iGFt03.png" alt="image-20230420181725324"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// luogu 1829</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e7</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">20101009</span>;<br><span class="hljs-type">int</span> vis[N], p[N], mu[N], S[N], cnt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    mu[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; N; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!vis[i])<br>        &#123;<br>            p[++cnt] = i;<br>            mu[i] = <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; i * p[j] &lt; N; j++)<br>        &#123;<br>            vis[i * p[j]] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (i % p[j] == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            mu[i * p[j]] = -mu[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++)<br>    &#123;<br>        S[i] = (S[i - <span class="hljs-number">1</span>] + mu[i] * i * i % mod + mod) % mod;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">G</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (n * (n + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> % mod) * (m * (m + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> % mod) % mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">F</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r; l &lt;= n; l = r + <span class="hljs-number">1</span>)<br>    &#123;<br>        r = <span class="hljs-built_in">min</span>(n / (n / l), m / (m / l));<br>        ans = (ans + (S[r] - S[l - <span class="hljs-number">1</span>]) * <span class="hljs-built_in">G</span>(n / l, m / l) % mod + mod) % mod;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n &gt; m)<br>    &#123;<br>        <span class="hljs-built_in">swap</span>(n, m);<br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r; l &lt;= n; l = r + <span class="hljs-number">1</span>)<br>    &#123;<br>        r = <span class="hljs-built_in">min</span>(n / (n / l), m / (m / l));<br>        ans = (ans + (r - l + <span class="hljs-number">1</span>) * (l + r) / <span class="hljs-number">2</span> % mod * <span class="hljs-built_in">F</span>(n / l, m / l) % mod) % mod;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    cout &lt;&lt; <span class="hljs-built_in">cal</span>(n, m) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><img src="https://i.328888.xyz/2023/04/20/iGFl3Z.png" alt="image-20230420181753495"></p>
<p><img src="https://i.328888.xyz/2023/04/20/iGFmSA.png" alt="image-20230420181907970"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// https://www.luogu.com.cn/problem/P3704</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> prime[N], vis[N], mu[N];<br><span class="hljs-type">int</span> f[N], F[N];<br><span class="hljs-type">int</span> g[N];<br><span class="hljs-type">int</span> cnt;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ksm</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>        &#123;<br>            ans = ans * a % mod;<br>        &#125;<br>        a = a * a % mod;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    mu[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; N; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!vis[i])<br>        &#123;<br>            prime[++cnt] = i;<br>            mu[i] = <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; i * prime[j] &lt; N; j++)<br>        &#123;<br>            vis[i * prime[j]] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (i % prime[j] == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            mu[i * prime[j]] = -mu[i];<br>        &#125;<br>    &#125;<br>    f[<span class="hljs-number">1</span>] = g[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    F[<span class="hljs-number">0</span>] = F[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; N; i++)<br>    &#123;<br>        f[i] = (f[i - <span class="hljs-number">1</span>] + f[i - <span class="hljs-number">2</span>]) % mod;<br>        g[i] = <span class="hljs-built_in">ksm</span>(f[i], mod - <span class="hljs-number">2</span>);<br>        F[i] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt; N; j += i)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (mu[j / i])<br>            &#123;<br>                F[j] = F[j] * (mu[j / i] == <span class="hljs-number">1</span> ? f[i] : g[i]) % mod;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; N; i++)<br>    &#123;<br>        F[i] = F[i - <span class="hljs-number">1</span>] * F[i] % mod;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n &gt; m)<br>    &#123;<br>        <span class="hljs-built_in">swap</span>(n, m);<br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r; l &lt;= n; l = r + <span class="hljs-number">1</span>)<br>    &#123;<br>        r = <span class="hljs-built_in">min</span>(n / (n / l), m / (m / l));<br>        <span class="hljs-type">int</span> s = F[r] * <span class="hljs-built_in">ksm</span>(F[l - <span class="hljs-number">1</span>], mod - <span class="hljs-number">2</span>) % mod;<br>        ans = ans * <span class="hljs-built_in">ksm</span>(s, (n / l) * (m / l)) % mod;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        cin &gt;&gt; n &gt;&gt; m;<br>        cout &lt;&lt; <span class="hljs-built_in">calc</span>(n, m) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>欧拉定理幂级数取模</h1>
<p><img src="https://i.328888.xyz/2023/04/26/ivORwc.png" alt="img"></p>
<h1>矩阵快速幂</h1>
<p><img src="https://i.328888.xyz/2023/05/04/iPswgQ.png" alt="image-20230504204621558"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> n, k;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">matrix</span><br>&#123;<br>    <span class="hljs-type">int</span> c[<span class="hljs-number">101</span>][<span class="hljs-number">101</span>];<br>    <span class="hljs-built_in">matrix</span>() &#123; <span class="hljs-built_in">memset</span>(c, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(c)); &#125;<br>&#125; A, ans;<br>matrix <span class="hljs-keyword">operator</span>*(matrix &amp;x, matrix &amp;y)<br>&#123;<br>    matrix t;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++)<br>            &#123;<br>                t.c[i][j] = (t.c[i][j] + x.c[i][k] * y.c[k][j]) % mod;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quickpow</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 初始化单位矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        ans.c[i][i] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (k)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>)<br>        &#123;<br>            ans = ans * A;<br>        &#125;<br>        A = A * A;<br>        k &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>        &#123;<br>            cin &gt;&gt; A.c[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">quickpow</span>(k);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>        &#123;<br>            cout &lt;&lt; ans.c[i][j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>        cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>某周写题报告</title>
    <url>/posts/a443d63f/</url>
    <content><![CDATA[<blockquote>
<p>把某周做过的题稍微整理了一下，主要是DP，方便随时复习，也方便后人踩坑。</p>
</blockquote>
<span id="more"></span>
<hr>
<h2 id="1-完全背包-·-洛谷-P1616-疯狂的采药">1 完全背包 · 洛谷 P1616 疯狂的采药</h2>
<p><strong>思路</strong><br>
把「时间」看成背包容量，「价值」就是药草收益。每种药草可以无限次采集 ⇒ 完全背包。</p>
<p><strong>状态转移</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - h[i]] + w[i])<br></code></pre></td></tr></table></figure>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e4</span> + <span class="hljs-number">10</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> h[N], w[N];<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e7</span> + <span class="hljs-number">10</span>;<br>ll dp[M];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;t, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;h[i], &amp;w[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = h[i]; j &lt;= t; j++)<br>        &#123;<br>            dp[j] = <span class="hljs-built_in">max</span>(dp[j - h[i]] + w[i], dp[j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, dp[t]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<hr>
<h2 id="2-混合背包-·-洛谷-P1833-樱花">2 混合背包 · 洛谷 P1833 樱花</h2>
<p><strong>思路</strong><br>
题目同时出现 01、多重、完全三种背包。</p>
<ul>
<li><code>p[i] == 0</code> → 完全背包</li>
<li><code>p[i] &gt; 0</code>  → 01 / 多重背包</li>
</ul>
<p><strong>状态转移</strong><br>
完全背包：正序<br>
多重背包：拆成 01 后逆序</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e4</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> t[N], w[N], p[N];<br><span class="hljs-type">int</span> dp[<span class="hljs-number">1008</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> h1, h2, m1, m2;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d:%d %d:%d&quot;</span>, &amp;h1, &amp;m1, &amp;h2, &amp;m2);<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-type">int</span> ans = (m2 - m1) + (h2 - h1) * <span class="hljs-number">60</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;t[i], &amp;w[i], &amp;p[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (p[i] == <span class="hljs-number">0</span>) <span class="hljs-comment">//完全背包</span><br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = t[i]; j &lt;= ans; j++)<br>            &#123;<br>                dp[j] = <span class="hljs-built_in">max</span>(dp[j - t[i]] + w[i], dp[j]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-comment">//多重背包和01背包</span><br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= p[i]; k++)<br>            &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = ans; j &gt;= k * t[i]; j--)<br>                &#123;<br>                    dp[j] = <span class="hljs-built_in">max</span>(dp[j - t[i]] + w[i], dp[j]);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dp[ans]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<hr>
<h2 id="3-二维背包-·-洛谷-P1855-榨取kkksc03">3 二维背包 · 洛谷 P1855 榨取kkksc03</h2>
<p><strong>思路</strong><br>
背包有两个限制维度：时间 &amp; 金钱 ⇒ 二维 01 背包。</p>
<p><strong>状态转移</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">dp[j][k] = <span class="hljs-built_in">max</span>(dp[j][k], dp[j - a[i]][k - b[i]] + <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a[<span class="hljs-number">108</span>], b[<span class="hljs-number">108</span>];<br><span class="hljs-type">int</span> dp[<span class="hljs-number">300</span>][<span class="hljs-number">300</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, t;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;t);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a[i], &amp;b[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m; j &gt;= a[i]; j--)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = t; k &gt;= b[i]; k--)<br>            &#123;<br>                dp[j][k] = <span class="hljs-built_in">max</span>(dp[j][k], dp[j - a[i]][k - b[i]] + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dp[m][t]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<hr>
<h2 id="4-分组背包-·-洛谷-P1757-通天之分组背包">4 分组背包 · 洛谷 P1757 通天之分组背包</h2>
<p><strong>思路</strong><br>
物品分多组，每组最多选一个 ⇒ 经典分组背包。</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e4</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> cnt[N];<br><span class="hljs-type">int</span> dp[N];<br><span class="hljs-type">int</span> a[N], b[N];<br><span class="hljs-type">int</span> vis[N][N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m, n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;m, &amp;n);<br>    <span class="hljs-type">int</span> ans;<br>    <span class="hljs-type">int</span> maxn = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a[i], &amp;b[i], &amp;ans);<br>        ++cnt[ans];<br>        vis[ans][cnt[ans]] = i;<br>        maxn = <span class="hljs-built_in">max</span>(maxn, ans);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= maxn; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m; j &gt;= <span class="hljs-number">0</span>; j--)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= cnt[i]; k++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (j &gt;= a[vis[i][k]])<br>                &#123;<br>                    dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - a[vis[i][k]]] + b[vis[i][k]]);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dp[m]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<hr>
<h2 id="5-带附件的-01-背包-·-洛谷-P1064-NOIP2006-提高组-金明的预算方案">5 带附件的 01 背包 · 洛谷 P1064 [NOIP2006 提高组] 金明的预算方案</h2>
<p><strong>思路</strong><br>
每个主件最多带 2 个附件，决策从 2 种变成 5 种：<br>
不选、只选主件、主件 + 附件1、主件 + 附件2、主件 + 全部附件。</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">4e4</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> dpmainv[N], dpmainw[N];<br><span class="hljs-type">int</span> dpannexv[N][<span class="hljs-number">3</span>], dpannexw[N][<span class="hljs-number">3</span>];<br><span class="hljs-type">int</span> cnt[N];<br><span class="hljs-type">int</span> dp[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-type">int</span> a, b, q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;q);<br>        <span class="hljs-keyword">if</span> (q == <span class="hljs-number">0</span>)<br>        &#123;<br>            dpmainv[i] = a;<br>            dpmainw[i] = a * b;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cnt[q]++;<br>            dpannexv[q][cnt[q]] = a;<br>            dpannexw[q][cnt[q]] = a * b;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = n; j &gt;= dpmainv[i] &amp;&amp; dpmainv[i] &gt; <span class="hljs-number">0</span>; j--)<br>        &#123;<br>            dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - dpmainv[i]] + dpmainw[i]);<br>            <span class="hljs-keyword">if</span> (j &gt;= dpmainv[i] + dpannexv[i][<span class="hljs-number">1</span>])<br>            &#123;<br>                dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - dpmainv[i] - dpannexv[i][<span class="hljs-number">1</span>]] + dpmainw[i] + dpannexw[i][<span class="hljs-number">1</span>]);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (j &gt;= dpmainv[i] + dpannexv[i][<span class="hljs-number">2</span>])<br>            &#123;<br>                dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - dpmainv[i] - dpannexv[i][<span class="hljs-number">2</span>]] + dpmainw[i] + dpannexw[i][<span class="hljs-number">2</span>]);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (j &gt;= dpmainv[i] + dpannexv[i][<span class="hljs-number">1</span>] + dpannexv[i][<span class="hljs-number">2</span>])<br>            &#123;<br>                dp[j] = <span class="hljs-built_in">max</span>(dp[j], dp[j - dpmainv[i] - dpannexv[i][<span class="hljs-number">1</span>] - dpannexv[i][<span class="hljs-number">2</span>]] + dpmainw[i] + dpannexw[i][<span class="hljs-number">1</span>] + dpannexw[i][<span class="hljs-number">2</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dp[n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<hr>
<h2 id="6-树形-DP-·-洛谷-P1352-没有上司的舞会">6 树形 DP · 洛谷 P1352 没有上司的舞会</h2>
<p><strong>思路</strong><br>
树上做 01 背包：</p>
<ul>
<li><code>dp[u][0]</code> 不参加，儿子可选可不选</li>
<li><code>dp[u][1]</code> 参加，儿子不能参加</li>
</ul>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">6e3</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> dp[N][<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> vis[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; v[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> ans)</span></span><br><span class="hljs-function"></span>&#123;<br>    dp[ans][<span class="hljs-number">1</span>] = a[ans];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; v[ans].<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-type">int</span> cnt = v[ans][i];<br>        <span class="hljs-built_in">dfs</span>(cnt);                                  <span class="hljs-comment">//往下遍历</span><br>        dp[ans][<span class="hljs-number">0</span>] += <span class="hljs-built_in">max</span>(dp[cnt][<span class="hljs-number">0</span>], dp[cnt][<span class="hljs-number">1</span>]); <span class="hljs-comment">//他的下属参加还是不参加</span><br>        dp[ans][<span class="hljs-number">1</span>] += dp[cnt][<span class="hljs-number">0</span>];                  <span class="hljs-comment">//此时下属不能参加</span><br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    &#125;<br>    <span class="hljs-type">int</span> p, q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;p, &amp;q);<br>        v[q].<span class="hljs-built_in">push_back</span>(p);<br>        vis[p] = <span class="hljs-number">1</span>; <span class="hljs-comment">//把职员标记上</span><br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (vis[i] == <span class="hljs-number">0</span>) <span class="hljs-comment">//找最高职位，也就是树的根</span><br>        &#123;<br>            ans = i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(ans);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">max</span>(dp[ans][<span class="hljs-number">0</span>], dp[ans][<span class="hljs-number">1</span>]));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<hr>
<h2 id="7-区间-DP-·-能量项链">7 区间 DP · 能量项链</h2>
<p><strong>思路</strong><br>
环形合并石子模板：枚举长度 → 枚举左端点 → 枚举断点。</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e2</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> dp[N][N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        a[i + n] = a[i];<br>    &#125;<br>    <span class="hljs-comment">// 2 3 5 10 2 3 5 10</span><br>    <span class="hljs-comment">//还是环形石子问题</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">3</span>; len &lt;= n + <span class="hljs-number">1</span>; len++) <span class="hljs-comment">//最少要三个值才能聚合两个珠子，但最后一个值最后还会用到</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>; l + len - <span class="hljs-number">1</span> &lt;= <span class="hljs-number">2</span> * n; l++)<br>        &#123;<br>            <span class="hljs-type">int</span> r = l + len - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = l + <span class="hljs-number">1</span>; k &lt; r; k++) <span class="hljs-comment">//由于每颗珠子分首尾，所以k最小也得是l+1</span><br>            &#123;<br>                dp[l][r] = <span class="hljs-built_in">max</span>(dp[l][r], dp[l][k] + dp[k][r] + a[l] * a[k] * a[r]); <span class="hljs-comment">//由于k位置这个元素会重复用到，所以不用加一！！！</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> maxn = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        maxn = <span class="hljs-built_in">max</span>(maxn, dp[i][n + i]);<br>        <span class="hljs-comment">// printf(&quot;%d\n&quot;, dp[i][i + n]);</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, maxn);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<hr>
<h2 id="8-第-k-优解-·-HDU-2639">8 第 k 优解 · HDU 2639</h2>
<p><strong>思路</strong><br>
在 01 背包基础上多开一维 <code>dp[j][k]</code> 记录体积为 j 时的前 k 大值。</p>
<p><strong>核心技巧</strong><br>
每次用归并排序思想把两条链（选/不选）的前 k 大合并。</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e3</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> dp[N][N];<br><span class="hljs-type">int</span> a[<span class="hljs-number">108</span>], b[<span class="hljs-number">108</span>];<br><span class="hljs-type">int</span> c[<span class="hljs-number">108</span>], d[<span class="hljs-number">108</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(dp, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(dp));<br>        <span class="hljs-built_in">memset</span>(c, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(c));<br>        <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(d));<br>        <span class="hljs-type">int</span> n, v, p;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;v, &amp;p);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;b[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = v; j &gt;= b[i]; j--)<br>            &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= p; k++)<br>                &#123;<br>                    c[k] = dp[j][k]; <span class="hljs-comment">//体积为j时的第k大价值</span><br>                    d[k] = dp[j - b[i]][k] + a[i];<br>                &#125;<br>                <span class="hljs-type">int</span> q = <span class="hljs-number">1</span>, l = <span class="hljs-number">1</span>, r = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">while</span> (q &lt;= p &amp;&amp; (l &lt;= p || r &lt;= p))<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (c[l] &gt;= d[r]) <span class="hljs-comment">//比较两个数的大小，谁大就用谁赋值</span><br>                    &#123;<br>                        dp[j][q] = c[l++];<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        dp[j][q] = d[r++];<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (dp[j][q] != dp[j][q - <span class="hljs-number">1</span>]) <span class="hljs-comment">//这里要去一下重</span><br>                    &#123;<br>                        q++;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dp[v][p]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<hr>
<h2 id="9-线段树-搜索-·-HDU-5323">9 线段树/搜索 · HDU 5323</h2>
<p><strong>思路</strong><br>
根据父子区间关系做 DFS，剪枝：右端点大于当前答案或左端点越界时返回。</p>
<p><strong>代码</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>ll ans;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(ll l, ll r)</span> <span class="hljs-comment">//建立左区间和右区间递归搜索</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (r != <span class="hljs-number">0</span>)<br>        &#123;<br>            ans = <span class="hljs-built_in">min</span>(ans, r);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (r &gt;= ans) <span class="hljs-comment">//右边界</span><br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (l - <span class="hljs-number">1</span> - (r - l) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">//左边界</span><br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(l - <span class="hljs-number">1</span> - (r - l), r); <span class="hljs-comment">//奇数区间</span><br>    <span class="hljs-built_in">dfs</span>(l, r + <span class="hljs-number">1</span> + r - l);<br>    <span class="hljs-built_in">dfs</span>(l - <span class="hljs-number">1</span> - (r - l) - <span class="hljs-number">1</span>, r); <span class="hljs-comment">//偶数区间</span><br>    <span class="hljs-built_in">dfs</span>(l, r + <span class="hljs-number">1</span> + r - l - <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll l, r;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;l, &amp;r) != EOF)<br>    &#123;<br>        ans = <span class="hljs-number">0x3f3f3f3f</span>;<br>        <span class="hljs-built_in">dfs</span>(l, r);<br>        <span class="hljs-keyword">if</span> (l == <span class="hljs-number">0</span> &amp;&amp; r == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (ans == <span class="hljs-number">0x3f3f3f3f</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>动态规划</tag>
        <tag>背包</tag>
        <tag>线段树</tag>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>数位DP</title>
    <url>/posts/a3781d1f/</url>
    <content><![CDATA[<h3 id="数字游戏"><strong>数字游戏</strong></h3>
<p>[<a href="https://vjudge.net/problem/LibreOJ-10164">https://vjudge.net/problem/LibreOJ-10164</a>]:</p>
<p><strong>题目大意：</strong><br>
<strong>科协里最近很流行数字游戏。</strong></p>
<p><strong>某人命名了一种不降数，这种数字必须满足从左到右各位数字呈非下降关系，如 123，446。</strong></p>
<p><strong>现在大家决定玩一个游戏，指定一个整数闭区间 [a,b]，问这个区间内有多少个不降数。</strong></p>
<p><strong>输入格式</strong><br>
<strong>输入包含多组测试数据。</strong></p>
<p><strong>每组数据占一行，包含两个整数 a 和 b。</strong></p>
<p><strong>输出格式</strong><br>
<strong>每行给出一组测试数据的答案，即 [a,b] 之间有多少不降数。</strong></p>
<p><strong>数据范围</strong><br>
<strong>1≤ a ≤ b ≤2^31−1</strong></p>
<p><strong>解题思路：</strong><br>
<strong>f[i][j] 数组代表着最高位是j并且一共有i位不降数的集合</strong><br>
<strong>f[i][j] = f[i-1][j] + f[i-1][j+1] + f[i-1][j+2] +…+ f[i-1][9];</strong></p>
<p><strong>按照数位DP分析步骤： 假设我们当前枚举到第i位，且第i位上的数字是x，那么现在对于答案的第i位数字j来说，可以填两类数字：</strong></p>
<p><strong>1.j 取0~x-1 那么res += f[i+1][j];</strong></p>
<p><strong>2.j 取 x last记录x，再枚举下一位</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">12</span>;<br><span class="hljs-type">int</span> a[N];    <span class="hljs-comment">//存整数的每一位数字</span><br><span class="hljs-type">int</span> f[N][N]; <span class="hljs-comment">// f[i][j]表示一共有i位，且最高为数字是j的不降数的个数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span>  <span class="hljs-comment">//预处理不降数的个数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">9</span>; i++)<br>    &#123;<br>        f[<span class="hljs-number">1</span>][i] = <span class="hljs-number">1</span>; <span class="hljs-comment">//一位数就是1</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; N; i++) <span class="hljs-comment">//阶段：枚举位数</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">9</span>; j++) <span class="hljs-comment">//状态：枚举最高位</span><br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = j; k &lt;= <span class="hljs-number">9</span>; k++) <span class="hljs-comment">//决策：枚举次高位</span><br>            &#123;<br>                f[i][j] += f[i - <span class="hljs-number">1</span>][k]; <span class="hljs-comment">//累加所有方案数</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-comment">//特判，n=0就一个数字</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n)<br>    &#123;<br>        a[++cnt] = n % <span class="hljs-number">10</span>; <span class="hljs-comment">//从低到高存每一位数</span><br>        n /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> last = <span class="hljs-number">0</span>;                  <span class="hljs-comment">// last表示上一位数字</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = cnt; i &gt;= <span class="hljs-number">1</span>; i--) <span class="hljs-comment">//从高到低依次枚举</span><br>    &#123;<br>        <span class="hljs-type">int</span> now = a[i];                  <span class="hljs-comment">// now表示当前位数字</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = last; j &lt; now; j++) <span class="hljs-comment">//枚举当前为可填入的数字</span><br>        &#123;<br>            ans += f[i][j]; <span class="hljs-comment">//累加方案数</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (now &lt; last) <span class="hljs-comment">//若比上一位小，直接退出</span><br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        last = now; <span class="hljs-comment">//更新last的值</span><br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) <span class="hljs-comment">//走到a1时，最后会少加一个右边界数，要加一</span><br>        &#123;<br>            ans++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-type">int</span> l, r;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; l &gt;&gt; r)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">dp</span>(r) - <span class="hljs-built_in">dp</span>(l - <span class="hljs-number">1</span>));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="windy数"><strong>windy数</strong></h3>
<p>[<a href="https://www.luogu.com.cn/problem/P2657">https://www.luogu.com.cn/problem/P2657</a>]:</p>
<p><strong>题意：windy定义了一种windy数。</strong></p>
<p><strong>不含前导零且相邻两个数字之差至少为2的正整数被称为windy数。</strong></p>
<p><strong>windy想知道，在A<em>和B</em>之间，包括A<em>和B</em>，总共有多少个windy数？</strong></p>
<p><strong>Input</strong></p>
<p><strong>包含两个整数，A，B。</strong></p>
<p><strong>满足1≤<em>A</em>≤<em>B</em>≤2000000000 .</strong></p>
<p><strong>Sample 1</strong></p>
<table>
<thead>
<tr>
<th><strong>Input</strong></th>
<th><strong>Output</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong><code>1 10</code></strong></td>
<td><strong><code>9</code></strong></td>
</tr>
</tbody>
</table>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">12</span>;<br><span class="hljs-type">int</span> a[N];    <span class="hljs-comment">//存整数的每一位数字</span><br><span class="hljs-type">int</span> f[N][N]; <span class="hljs-comment">// f[i][j]表示一共有i位，且最高为数字是j的不降数的个数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span>  <span class="hljs-comment">//预处理不降数的个数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">9</span>; i++)<br>    &#123;<br>        f[<span class="hljs-number">1</span>][i] = <span class="hljs-number">1</span>; <span class="hljs-comment">//一位数就是1</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; N; i++) <span class="hljs-comment">//阶段：枚举位数</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">9</span>; j++) <span class="hljs-comment">//状态：枚举最高位</span><br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-number">9</span>; k++) <span class="hljs-comment">//决策：枚举次高位</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(j - k) &gt;= <span class="hljs-number">2</span>)<br>                &#123;<br>                    f[i][j] += f[i - <span class="hljs-number">1</span>][k];<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-comment">//特判，n=0就一个数字</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n)<br>    &#123;<br>        a[++cnt] = n % <span class="hljs-number">10</span>; <span class="hljs-comment">//从低到高存每一位数</span><br>        n /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> last = <span class="hljs-number">-2</span>;                 <span class="hljs-comment">// last表示上一位数字</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = cnt; i &gt;= <span class="hljs-number">1</span>; i--) <span class="hljs-comment">//从高到低依次枚举</span><br>    &#123;<br>        <span class="hljs-type">int</span> now = a[i];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = (i == cnt); j &lt; now; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(j - last) &gt;= <span class="hljs-number">2</span>)<br>            &#123;<br>                ans += f[i][j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(now - last) &lt; <span class="hljs-number">2</span>) <span class="hljs-comment">//若比上一位小，直接退出</span><br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        last = now; <span class="hljs-comment">//更新last的值</span><br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) <span class="hljs-comment">//走到a1时，最后会少加一个右边界数，要加一</span><br>        &#123;<br>            ans++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//前面算的都是cnt位的</span><br>    <span class="hljs-comment">//需要加上小于cnt位的数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; cnt; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">9</span>; j++) <span class="hljs-comment">//不能有前导0</span><br>        &#123;<br>            ans += f[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-type">int</span> l, r;<br>    cin &gt;&gt; l &gt;&gt; r;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">dp</span>(r) - <span class="hljs-built_in">dp</span>(l - <span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="acwing1081：度的数量"><strong>acwing1081：度的数量</strong></h3>
<p><img src="https://img-blog.csdnimg.cn/20201006182133577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNjE5Njgw,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p>
<p><img src="https://pic1.imgdb.cn/item/635a4bcb16f2c2beb1f9bebc.png" alt="image-20220920091633855"></p>
<p><img src="https://pic1.imgdb.cn/item/635a4bf616f2c2beb1fa2b78.png" alt="image-20220920094600561.png"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">35</span>;<br><span class="hljs-type">int</span> a[N];    <span class="hljs-comment">//把b进制的每一位数存起来</span><br><span class="hljs-type">int</span> f[N][N]; <span class="hljs-comment">// f[i][j]表示在i个位置上，放置j个1的组合数</span><br><span class="hljs-type">int</span> k, b;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) <span class="hljs-comment">//预处理组合数</span><br>    &#123;<br>        f[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++)<br>        &#123;<br>            f[i][j] += f[i - <span class="hljs-number">1</span>][j] + f[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// c(j,i)=c(j-1,i-1)+c(j,i-1);</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dp</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-comment">//特判，n==0返回0</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n) <span class="hljs-comment">//把b进制数的每一位存入数组</span><br>    &#123;<br>        a[++cnt] = n % b;<br>        n /= b;<br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>, last = <span class="hljs-number">0</span>;         <span class="hljs-comment">// last表示第i位之前放置的1</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = cnt; i &gt;= <span class="hljs-number">1</span>; i--) <span class="hljs-comment">//从高位到低位枚举</span><br>    &#123;<br>        <span class="hljs-type">int</span> x = a[i];<br>        <span class="hljs-keyword">if</span> (x) <span class="hljs-comment">//第i位==0时，直接跳过，枚举下一位</span><br>        &#123;<br>            ans += f[i - <span class="hljs-number">1</span>][k - last]; <span class="hljs-comment">//第i位放0</span><br>            <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (k - (last + <span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0</span>)<br>                &#123;<br>                    ans += f[i - <span class="hljs-number">1</span>][k - (last + <span class="hljs-number">1</span>)]; <span class="hljs-comment">//第i位放1</span><br>                    <span class="hljs-keyword">break</span>;                           <span class="hljs-comment">//第i位放大于1的数，不符合题意，直接退出</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-comment">//第i位等于1时，后面不能用组合数计算，比如65转换成4进制是1001，如果用组合数计算会出现比65大的值，所以应继续向下枚举</span><br>            &#123;<br>                last += <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (last &gt; k) <span class="hljs-comment">// 1的个数多于k，则break</span><br>                &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span> &amp;&amp; last == k) <span class="hljs-comment">//判断末位是否符合题意</span><br>        &#123;<br>            ans++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-type">int</span> l, r;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;k);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">dp</span>(r) - <span class="hljs-built_in">dp</span>(l - <span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客小白月赛60</title>
    <url>/posts/ec03080e/</url>
    <content><![CDATA[<h2 id="A-小竹与妈妈"><strong><a href="https://ac.nowcoder.com/acm/contest/45670/A">A. 小竹与妈妈</a></strong></h2>
<ul>
<li><strong>题意</strong>
<ul>
<li><strong>ay+b=x, 已知a,b,x,求y</strong></li>
</ul>
</li>
<li><strong>题解</strong>
<ul>
<li><strong>显然小竹的年龄为 <img src="https://www.nowcoder.com/equation?tex=%5Cfrac%7Bx-b%7D%7Ba%7D" alt="img"> 直接输出即可。</strong></li>
</ul>
</li>
<li><strong>代码</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> a, b, x;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>, &amp;a, &amp;b, &amp;x);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, (x - b) / a);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="B-走丢的小竹"><strong><a href="https://ac.nowcoder.com/acm/contest/45670/B">B.走丢的小竹</a></strong></h2>
<ul>
<li>
<p><strong>题意</strong></p>
<ul>
<li>
<p><strong>有 n 个出口，每个出口都连着 m 个房间其中一个，有 q 次询问，每次都问如果不能去 x 号房间的话，有多少出口能走。</strong></p>
<p><strong>1≤n,m,q≤105</strong></p>
</li>
</ul>
</li>
<li>
<p><strong>题解</strong></p>
<ul>
<li><strong>记录每个房间有多少个出口连接记为<img src="https://www.nowcoder.com/equation?tex=cnt" alt="cnt">,每次询问输出<img src="https://www.nowcoder.com/equation?tex=n-cnt_x" alt="n-cnt_x">即可。</strong></li>
</ul>
</li>
<li>
<p><strong>代码</strong></p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, q;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;q);<br>    map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br>    <span class="hljs-comment">// set&lt;int&gt; s;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        mp[a[i]]++;<br>        <span class="hljs-comment">// s.insert(a[i]);</span><br>    &#125;<br>    <span class="hljs-keyword">while</span> (q--)<br>    &#123;<br>        <span class="hljs-type">int</span> ans;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;ans);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, n - mp[ans]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="C-小竹关禁闭"><strong><a href="https://ac.nowcoder.com/acm/contest/45670/C">C.小竹关禁闭</a></strong></h2>
<ul>
<li>
<p><strong>题意</strong></p>
<ul>
<li><strong>有 n 个绳子，第 i 条绳子长度为 ai ，当你使用第 i 条绳子的时候，后面的 k 条绳子就都不能用了，问能拿到的所有绳子长度总和最大是多少。</strong></li>
</ul>
</li>
<li>
<p><strong>题解</strong></p>
<ul>
<li>
<p><strong>用一个 <img src="https://www.nowcoder.com/equation?tex=O(n%5E2)" alt="img"> 的 <img src="https://www.nowcoder.com/equation?tex=dp" alt="dp"> 即可解决该问题。</strong><br>
<strong>设 <img src="https://www.nowcoder.com/equation?tex=dp_i" alt="dp_i"> 为选择前 <img src="https://www.nowcoder.com/equation?tex=i" alt="i"> 个数绳子的最大长度。</strong></p>
<p><strong>很容易能列出 <img src="https://www.nowcoder.com/equation?tex=dp_i%20%3D%20%5Cmax_%7Bj%3D1%7D%5E%7Bi-k-1%7Ddp_j%2Ba_i" alt="img"> 。</strong></p>
<p><strong>由于允许 <img src="https://www.nowcoder.com/equation?tex=n%5E2" alt="img"> 通过,直接模拟该过程即。最后的答案为<img src="https://www.nowcoder.com/equation?tex=%5Cmax_%7Bi%3D1%7D%5E%7Bn%7Ddp_i" alt="img">。</strong></p>
</li>
</ul>
</li>
<li>
<p><strong>代码1 从前往后推</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n, k;<br><span class="hljs-type">int</span> a[<span class="hljs-number">2005</span>];<br><span class="hljs-type">int</span> dp[<span class="hljs-number">2005</span>];<br><span class="hljs-type">int</span> ans;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, i - k - <span class="hljs-number">1</span>); ++j)<br>        &#123;<br>            dp[i] = <span class="hljs-built_in">max</span>(dp[j] + a[i], dp[i]);<br>            ans = <span class="hljs-built_in">max</span>(ans, dp[i]);<br>        &#125;<br>    cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li>
<p><strong>代码2 从后往前推</strong></p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e3</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> dp[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, k;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    &#125;<br>    <span class="hljs-comment">// dp[0][0] = dp[0][1] = 0;</span><br>    <span class="hljs-comment">// dp[1][1] = a[1];</span><br>    <span class="hljs-comment">// dp[1][0] = 0;</span><br>    <span class="hljs-type">int</span> maxn = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--)<br>    &#123;<br>        dp[i] = <span class="hljs-built_in">max</span>(dp[i + <span class="hljs-number">1</span>], dp[<span class="hljs-built_in">min</span>(n + <span class="hljs-number">1</span>, i + k + <span class="hljs-number">1</span>)] + a[i]);<br>        maxn = <span class="hljs-built_in">max</span>(maxn, dp[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, maxn);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="D-游戏购买！"><strong><a href="https://ac.nowcoder.com/acm/contest/45670/D">D. 游戏购买！</a></strong></h2>
<ul>
<li>
<p><strong>题意</strong></p>
<ul>
<li><strong>有一个 n∗m 的矩阵，矩阵上有数值。玩家当前分数为 0 ，想从 (sx,sy) 走到 (ex,ey) ，每一步都可以将自己的分数更新为当前所在位置的数值。问想从(sx,sy) 走到 (ex,ey) ，且分数超过 x 需要的最小步数是多少。</strong></li>
</ul>
</li>
<li>
<p><strong>题解</strong></p>
<ul>
<li><strong>从起点开始 <img src="https://www.nowcoder.com/equation?tex=bfs" alt="bfs"> 求出起点到每个位置的最短路,从终点开始同样跑一遍 <img src="https://www.nowcoder.com/equation?tex=bfs" alt="bfs"> 求出终点到每个位置的最短路.对于每一个拥有刺激度高于 <img src="https://www.nowcoder.com/equation?tex=x" alt="x"> 游戏的店铺 <img src="https://www.nowcoder.com/equation?tex=p" alt="p"> ,要经过该店铺的答案即为起点到 <img src="https://www.nowcoder.com/equation?tex=p" alt="p"> 的最短路,加上终点到 <img src="https://www.nowcoder.com/equation?tex=p" alt="p"> 的最短路</strong></li>
</ul>
</li>
<li>
<p><strong>代码</strong></p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(2)</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e3</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N][N];<br><span class="hljs-type">int</span> ans;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> sx, sy, ex, ey;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> dx[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-type">int</span> dy[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> vis[N][N];<br><span class="hljs-type">int</span> xx, yy;<br><span class="hljs-type">int</span> dis1[N][N];<br><span class="hljs-type">int</span> dis2[N][N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> x, y, cnt;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    dis1[x][y] = <span class="hljs-number">0</span>;<br>    queue&lt;node&gt; q;<br>    q.<span class="hljs-built_in">push</span>(&#123;x, y, <span class="hljs-number">0</span>&#125;);<br>    vis[x][y] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        node t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> xx = t.x + dx[i];<br>            <span class="hljs-type">int</span> yy = t.y + dy[i];<br>            <span class="hljs-keyword">if</span> (vis[xx][yy] == <span class="hljs-number">0</span> &amp;&amp; xx &gt;= <span class="hljs-number">1</span> &amp;&amp; xx &lt;= n &amp;&amp; yy &gt;= <span class="hljs-number">1</span> &amp;&amp; yy &lt;= m &amp;&amp; a[xx][yy] != <span class="hljs-number">-1</span>)<br>            &#123;<br>                vis[xx][yy] = <span class="hljs-number">1</span>;<br>                node p;<br>                p.x = xx;<br>                p.y = yy;<br>                p.cnt = t.cnt + <span class="hljs-number">1</span>;<br>                dis1[xx][yy] = p.cnt;<br>                q.<span class="hljs-built_in">push</span>(p);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    dis2[x][y] = <span class="hljs-number">0</span>;<br>    queue&lt;node&gt; q;<br>    q.<span class="hljs-built_in">push</span>(&#123;x, y, <span class="hljs-number">0</span>&#125;);<br>    vis[x][y] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        node t = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> xx = t.x + dx[i];<br>            <span class="hljs-type">int</span> yy = t.y + dy[i];<br>            <span class="hljs-keyword">if</span> (vis[xx][yy] == <span class="hljs-number">0</span> &amp;&amp; xx &gt;= <span class="hljs-number">1</span> &amp;&amp; xx &lt;= n &amp;&amp; yy &gt;= <span class="hljs-number">1</span> &amp;&amp; yy &lt;= m &amp;&amp; a[xx][yy] != <span class="hljs-number">-1</span>)<br>            &#123;<br>                vis[xx][yy] = <span class="hljs-number">1</span>;<br>                node p;<br>                p.x = xx;<br>                p.y = yy;<br>                p.cnt = t.cnt + <span class="hljs-number">1</span>;<br>                dis2[xx][yy] = p.cnt;<br>                q.<span class="hljs-built_in">push</span>(p);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;ans);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;sx, &amp;sy, &amp;ex, &amp;ey);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i][j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(vis));<br>    <span class="hljs-built_in">bfs1</span>(sx, sy);<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(vis));<br>    <span class="hljs-built_in">bfs2</span>(ex, ey);<br>    <span class="hljs-type">int</span> minn = <span class="hljs-number">0x3f3f3f3f</span>;<br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (a[i][j] &gt; ans)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (dis1[i][j] == <span class="hljs-number">0</span> || dis2[i][j] == <span class="hljs-number">0</span>)<br>                &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    flag = <span class="hljs-number">1</span>;<br>                    minn = <span class="hljs-built_in">min</span>(minn, dis1[i][j] + dis2[i][j]);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, minn);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="E-寻找小竹！"><strong><a href="https://ac.nowcoder.com/acm/contest/45670/E">E.寻找小竹！</a></strong></h2>
<ul>
<li>
<p><strong>题意</strong></p>
<ul>
<li><strong>给定树上 n 个节点和 n−1 条边，如果一条边上的两个点存在至少两个不同的质因子，称这两个节点为共同优雅的。问整棵树上包含节点最多的共有优雅连通块有多少个节点。</strong></li>
</ul>
</li>
<li>
<p><strong>题解</strong></p>
<ul>
<li>
<p><strong>相邻结点满足有至少两个不同的共同质因子,也就相当于,相邻两个结点的 <img src="https://www.nowcoder.com/equation?tex=%5Cgcd" alt="img"> 满足不为任何质数的幂次,且不为1</strong></p>
<p><strong>我们可以把所有质数的幂次使用一个标记数组 <img src="https://www.nowcoder.com/equation?tex=st" alt="flag"> 标记起来,然后进行树形dp</strong></p>
<p><strong>设 <img src="https://www.nowcoder.com/equation?tex=dp_i" alt="dp_i"> 为以 <img src="https://www.nowcoder.com/equation?tex=i" alt="i"> 为根的最大优雅联通块,设 <img src="https://www.nowcoder.com/equation?tex=son_i" alt="son_i"> 为 <img src="https://www.nowcoder.com/equation?tex=i" alt="i"> 的子节点的集合，则</strong></p>
<p><strong><img src="https://www.nowcoder.com/equation?tex=dp_i%20%3D%201%20%2B%20%5Csum_%7Bv%20%5Cin%20son_i%7D%20dp_%7Bv%7D%5Bst_%7B%5Cgcd(v%2Ci)%7D%20%3D%201%5D" alt="img"></strong></p>
</li>
</ul>
</li>
<li>
<p><strong>代码</strong></p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> prime[N], cnt;<br><span class="hljs-type">int</span> st[N];<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> son[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; e[N];<br><span class="hljs-type">int</span> vis[N];<br><span class="hljs-type">int</span> maxn = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa)</span></span><br><span class="hljs-function"></span>&#123;<br>    son[u] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> t : e[u])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (t == fa)<br>        &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-built_in">dfs</span>(t, u);<br>        <span class="hljs-keyword">if</span> (st[__gcd(a[u], a[t])] == <span class="hljs-number">0</span>)<br>        &#123;<br>            son[u] += son[t];<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// maxn = max(son[u], maxn);</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    st[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!vis[i])<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i * <span class="hljs-number">2</span>; j &lt;= n; j += i)<br>            &#123;<br>                vis[j] = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-type">long</span> j = i; j &lt;= n; j *= i)<br>            &#123;<br>                st[j] = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">init</span>(N);<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    &#125;<br>    <span class="hljs-type">int</span> p, q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;p, &amp;q);<br>        e[p].<span class="hljs-built_in">push_back</span>(q);<br>        e[q].<span class="hljs-built_in">push_back</span>(p);<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        maxn = <span class="hljs-built_in">max</span>(son[i], maxn);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, maxn);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="F-被抓住的小竹"><strong><a href="https://ac.nowcoder.com/acm/contest/45670/F">F.被抓住的小竹</a></strong></h2>
<ul>
<li><strong>题意</strong></li>
<li><strong>题解</strong>
<ul>
<li><img src="https://pic1.imgdb.cn/item/636f6ea416f2c2beb1ee215c.png" alt="image-20221112174318834"></li>
</ul>
</li>
<li><strong>代码</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-type">int</span> t;<br><span class="hljs-type">int</span> n;<br>vector&lt;<span class="hljs-type">int</span>&gt; js;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br>ll fac[<span class="hljs-number">100006</span>];<br>ll ifac[<span class="hljs-number">100006</span>];<br><span class="hljs-type">int</span> maxn = <span class="hljs-number">1e5</span> + <span class="hljs-number">4</span>;<br><span class="hljs-function">ll <span class="hljs-title">ksm</span><span class="hljs-params">(ll x, ll y)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (y)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (y &amp; <span class="hljs-number">1</span>)<br>        &#123;<br>            ans = ans * x % mod;<br>        &#125;<br>        y &gt;&gt;= <span class="hljs-number">1</span>;<br>        x = x * x % mod;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    fac[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= maxn; i++)<br>    &#123;<br>        fac[i] = fac[i - <span class="hljs-number">1</span>] * i % mod;<br>    &#125;<br>    <span class="hljs-comment">// ifac[1] = 1;</span><br>    <span class="hljs-comment">// for (int i = 2; i &lt;= maxn; i++)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     ifac[i] = (ll)(mod - mod / i) * ifac[mod % i] % mod;</span><br>    <span class="hljs-comment">// &#125;</span><br>    ifac[maxn - <span class="hljs-number">1</span>] = <span class="hljs-built_in">ksm</span>(fac[maxn - <span class="hljs-number">1</span>], mod - <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = maxn - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; i--)<br>    &#123;<br>        ifac[i - <span class="hljs-number">1</span>] = ifac[i] * i % mod;<br>    &#125;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">C</span><span class="hljs-params">(ll x, ll y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> fac[x] * ifac[y] % mod * ifac[x - y] % mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-type">int</span> n;<br>        cin &gt;&gt; n;<br>        ll ans = (((<span class="hljs-built_in">C</span>(n + <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)) % mod * fac[(n - <span class="hljs-number">2</span>)] % mod * (<span class="hljs-number">1ll</span> * n * (n - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>) % mod * (<span class="hljs-number">1ll</span> * n * (n - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>) % mod)) % mod;<br>        cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客小白月赛59</title>
    <url>/posts/bef2e369/</url>
    <content><![CDATA[<h2 id="A-我会开摆"><strong><a href="https://ac.nowcoder.com/acm/contest/43844/A">A.我会开摆</a></strong></h2>
<ul>
<li><strong>题意</strong>
<ul>
<li><strong>给定n=4的方阵，问是否存在n=2的方阵中四个格子全是一个字符的情况</strong></li>
</ul>
</li>
<li><strong>题解</strong>
<ul>
<li><strong>直接枚举所有点当n=2方阵的左上角，看是否符合题目要求</strong></li>
<li><strong>注意：检查n=2的方阵时，要先排除某点为左上角没有n=2方阵情况</strong></li>
</ul>
</li>
<li><strong>代码</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">char</span> a[<span class="hljs-number">5</span>][<span class="hljs-number">5</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span>; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">4</span>; j++)<br>            &#123;<br>                cin &gt;&gt; a[i][j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">3</span>; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (a[i][j] == <span class="hljs-string">&#x27;.&#x27;</span> &amp;&amp; a[i][j + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;.&#x27;</span> &amp;&amp; a[i + <span class="hljs-number">1</span>][j] == <span class="hljs-string">&#x27;.&#x27;</span> &amp;&amp; a[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;.&#x27;</span>)<br>                &#123;<br>                    flag = <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (a[i][j] == <span class="hljs-string">&#x27;#&#x27;</span> &amp;&amp; a[i][j + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;#&#x27;</span> &amp;&amp; a[i + <span class="hljs-number">1</span>][j] == <span class="hljs-string">&#x27;#&#x27;</span> &amp;&amp; a[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;#&#x27;</span>)<br>                &#123;<br>                    flag = <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="B-走廊的灯"><strong><a href="https://ac.nowcoder.com/acm/contest/43844/B">B.走廊的灯</a></strong></h2>
<ul>
<li><strong>题意</strong>
<ul>
<li><strong>路上有n盏灯，0代表灭的，1代表亮的，2代表闪烁，可以看成灭的也可以看成亮的</strong></li>
<li><strong>问最长的状态一样的连续的灯的数量为多少</strong></li>
</ul>
</li>
<li><strong>题解</strong>
<ul>
<li><strong>暴力，分两次遍历，第一次把2全部当作0，第二次把2全部当作1，找出最长的连续段即可</strong></li>
</ul>
</li>
<li><strong>代码</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> t;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t);<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-type">int</span> n;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>        <span class="hljs-built_in">string</span> a;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; a;<br>        <span class="hljs-type">int</span> len = a.size();<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> maxn = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (a[i] != <span class="hljs-string">&#x27;0&#x27;</span>)<br>            &#123;<br>                sum++;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                sum = <span class="hljs-number">0</span>;<br>            &#125;<br>            maxn = max(maxn, sum);<br>        &#125;<br>        sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (a[i] != <span class="hljs-string">&#x27;1&#x27;</span>)<br>            &#123;<br>                sum++;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                sum = <span class="hljs-number">0</span>;<br>            &#125;<br>            maxn = max(maxn, sum);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, maxn);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="C-输出练习"><strong><a href="https://ac.nowcoder.com/acm/contest/43844/C">C.输出练习</a></strong></h2>
<ul>
<li><strong>题意</strong>
<ul>
<li><strong>从小到大输出区间[l,r]中，k的非负整数次方的值</strong></li>
<li><strong>l,r,k范围 [0,2^63)</strong></li>
</ul>
</li>
<li><strong>题解</strong>
<ul>
<li><strong>除去特例的0,1；当k=2时，l=0,r=2^63-1，会有最多个输出，也才64个。所以直接暴力即可</strong></li>
<li><strong>注意特判。k=1时，直接输出1即可，否则暴力和会炸；k=0时，0^0=1,但是<code>0^1</code>=0,<code>0^2</code>=0，即如果区间符合要求，那么k=0会有两个输出。麻麻麻这里WA麻了，好无语</strong></li>
<li><strong>注意数据范围，while(k&lt;=r)这样写会爆long long，所以我这里用java逃课</strong></li>
</ul>
</li>
<li><strong>代码</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.math.BigInteger;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-keyword">while</span> (t-- &gt; <span class="hljs-number">0</span>) &#123;<br>            BigInteger l, r, k;<br>            l = sc.nextBigInteger();<br>            r = sc.nextBigInteger();<br>            k = sc.nextBigInteger();<br>            <span class="hljs-type">BigInteger</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>            <span class="hljs-type">BigInteger</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">fuck</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            <span class="hljs-keyword">if</span> (k.compareTo(p) == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (l.compareTo(p) &lt;= <span class="hljs-number">0</span>) &#123;<br>                    sb.append(<span class="hljs-number">0</span>+<span class="hljs-string">&quot; &quot;</span>);<br>                    fuck = <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (l.compareTo(q) &lt;= <span class="hljs-number">0</span> &amp;&amp; r.compareTo(q) &gt;= <span class="hljs-number">0</span>) &#123;<br>                sb.append(<span class="hljs-number">1</span> + <span class="hljs-string">&quot; &quot;</span>);<br>                fuck = <span class="hljs-literal">false</span>;<br>            &#125;<br>            BigInteger pos=k;<br>            <span class="hljs-keyword">if</span> (k.compareTo(p) != <span class="hljs-number">0</span> &amp;&amp; k.compareTo(q) != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">while</span> (r.compareTo(k) &gt;= <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (l.compareTo(k) &lt;= <span class="hljs-number">0</span> &amp;&amp; r.compareTo(k) &gt;= <span class="hljs-number">0</span>) &#123;<br>                        sb.append(k + <span class="hljs-string">&quot; &quot;</span>);<br>                        fuck = <span class="hljs-literal">false</span>;<br>                    &#125;<br>                    k=k.multiply(pos);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(fuck)<br>            &#123;<br>                System.out.println(<span class="hljs-string">&quot;None.&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(sb);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h2 id="D-国际象棋"><strong><a href="https://ac.nowcoder.com/acm/contest/43844/D">D.国际象棋</a></strong></h2>
<ul>
<li>
<p><strong>题意</strong></p>
<ul>
<li><strong>竖直放置的n*m的棋盘，每次选一列放一枚棋子，重力原因棋子落到最下面</strong></li>
<li><strong>对于第i个放置的棋子，i为奇数时，其所放的颜色为黑色，偶数为白色棋子</strong></li>
<li><strong>k子连珠定义为：横竖撇捺四个方向存在某个方向有k个相同颜色棋子</strong></li>
<li><strong>一共放t颗棋子，若出现k子连珠则游戏结束，保证有解，问游戏结束时放置了多少棋子</strong></li>
</ul>
</li>
<li>
<p><strong>题解</strong></p>
<ul>
<li>
<p><strong>模拟题。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">水平方向，竖直方向，两个斜方向分别枚举看是否符合条件即可<br></code></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p><strong>代码</strong></p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n, m, k, t;<br><span class="hljs-type">char</span> a[<span class="hljs-number">1008</span>][<span class="hljs-number">1008</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">1</span> &amp;&amp; x &lt;= n &amp;&amp; y &gt;= <span class="hljs-number">1</span> &amp;&amp; y &lt;= m)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> ch)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//横</span><br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> xx = x, yy = y - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">judge</span>(xx, yy))<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (a[xx][yy] == ch)<br>        &#123;<br>            sum += <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (sum &gt;= k)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        yy--;<br>    &#125;<br>    xx = x, yy = y + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">judge</span>(xx, yy))<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (a[xx][yy] == ch)<br>        &#123;<br>            sum += <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (sum &gt;= k)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        yy++;<br>    &#125;<br>    <span class="hljs-comment">//竖</span><br>    sum = <span class="hljs-number">1</span>;<br>    xx = x + <span class="hljs-number">1</span>, yy = y;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">judge</span>(xx, yy))<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (a[xx][yy] == ch)<br>        &#123;<br>            sum += <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (sum &gt;= k)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        xx++;<br>    &#125;<br>    <span class="hljs-comment">//左斜</span><br>    sum = <span class="hljs-number">1</span>;<br>    xx = x - <span class="hljs-number">1</span>, yy = y - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">judge</span>(xx, yy))<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (a[xx][yy] == ch)<br>        &#123;<br>            sum += <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (sum &gt;= k)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        xx--, yy--;<br>    &#125;<br>    xx = x + <span class="hljs-number">1</span>, yy = y + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">judge</span>(xx, yy))<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (a[xx][yy] == ch)<br>        &#123;<br>            sum += <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (sum &gt;= k)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        xx++, yy++;<br>    &#125;<br>    <span class="hljs-comment">//右斜</span><br>    sum = <span class="hljs-number">1</span>;<br>    xx = x + <span class="hljs-number">1</span>, yy = y - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">judge</span>(xx, yy))<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (a[xx][yy] == ch)<br>        &#123;<br>            sum += <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (sum &gt;= k)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        xx++, yy--;<br>    &#125;<br>    xx = x - <span class="hljs-number">1</span>, yy = y + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">judge</span>(xx, yy))<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (a[xx][yy] == ch)<br>        &#123;<br>            sum += <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (sum &gt;= k)<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        xx--, yy++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; t;<br>    <span class="hljs-type">int</span> ans;<br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br>    <span class="hljs-built_in">memset</span>(a, <span class="hljs-string">&#x27;!&#x27;</span>, <span class="hljs-built_in">sizeof</span>(a));<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        ++cnt;<br>        cin &gt;&gt; ans;<br>        <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span>)<br>        &#123;<br>            sum++;<br>            <span class="hljs-type">int</span> x = n - mp[ans];<br>            <span class="hljs-type">int</span> y = ans;<br>            mp[ans]++;<br>            <span class="hljs-keyword">if</span> (cnt % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)<br>            &#123;<br>                a[x][y] = <span class="hljs-string">&#x27;1&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                a[x][y] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>            &#125;<br>            <span class="hljs-type">int</span> pos = <span class="hljs-built_in">solve</span>(x, y, a[x][y]);<br>            <span class="hljs-keyword">if</span> (pos == <span class="hljs-number">1</span>)<br>            &#123;<br>                flag = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, sum);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="E-弹珠碰撞"><strong><a href="https://ac.nowcoder.com/acm/contest/43844/E">E.弹珠碰撞</a></strong></h2>
<ul>
<li><strong>题意</strong>
<ul>
<li><strong>长度为n的线段上有m个弹珠，给定每个弹珠的方向左/右，及坐标</strong></li>
<li><strong>弹珠每秒走一个单位，发生碰撞会停滞一秒，且两珠方向互换，多次碰撞停滞时间叠加</strong></li>
<li><strong>当弹珠走到0，或者n+1认为掉落</strong></li>
<li><strong>问线段上最后掉落的弹珠掉出所花的时间</strong></li>
</ul>
</li>
<li><strong>题解</strong>
<ul>
<li><strong>碰撞转向直接看成穿过就好了，因为弹珠之间没有区别</strong></li>
<li><strong>以某个向左走于位置i的弹珠为例，没有碰撞时时间为i-0，有碰撞需要记录在i左边且方向向右的弹珠数r，时间为i-0+r，从左往右边遍历遍记录答案和数量即可。某个向右走于位置i的弹珠，n+1-i+l，注意这里是逆序遍历。</strong></li>
<li><strong>这类题经常就是这样的写法，相当于固定题型了</strong></li>
</ul>
</li>
<li><strong>代码</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> d[N], p[N];<br><span class="hljs-type">int</span> pos[N];<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">memset</span>(pos, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(pos));<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;d[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;p[i]);<br>        pos[p[i]] = d[i];<br>    &#125;<br>    <span class="hljs-type">int</span> maxn = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (pos[i] == <span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pos[i] == <span class="hljs-number">0</span>)<br>        &#123;<br>            maxn = max(maxn, i - <span class="hljs-number">0</span> + ans);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pos[i] == <span class="hljs-number">1</span>)<br>        &#123;<br>            ans += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (pos[i] == <span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pos[i] == <span class="hljs-number">1</span>)<br>        &#123;<br>            maxn = max(maxn, n + <span class="hljs-number">1</span> - i + cnt);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pos[i] == <span class="hljs-number">0</span>)<br>        &#123;<br>            cnt += <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, cnt);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="F-困难卷积"><strong><a href="https://ac.nowcoder.com/acm/contest/43844/F">F.困难卷积</a></strong></h2>
<ul>
<li><strong>题意</strong>
<ul>
<li><strong><img src="https://img-blog.csdnimg.cn/2f62a4fc25764ced91908b21493bf1d0.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-BcmuODbM-1666978509437)(/Users/chenyanling/Library/Application Support/typora-user-images/image-20221029002156595.png)]"></strong></li>
</ul>
</li>
<li><strong>题解</strong>
<ul>
<li><strong>trick题。如果我们直接暴力枚举两个数组，复杂度为O(n^2)炸了</strong></li>
<li><strong>观察数据范围特征，数组的和范围在1e7以内，那么考虑与种类数有关，因为贪心构造一个数种类多的数组为0 1 … x，等差数列求和得到x=sqrt(2e7)，即数组中最多有sqrt(2e7)种数，此时遍历的复杂度已经降低了，所以开始考虑如何计算答案</strong></li>
<li><strong>以同种类数分别分组a,b后，我们可以得到数num及其出现的次数cnt。那么对于某一组别a1和某一组别b1对于答案的贡献为<code>(a1.cnt * b1.cnt * floor(sqrt(差))</code>，那么只需要枚举a分组和b分组，时间复杂度为O(sqrt(2e7)^2)=O(2e7)</strong></li>
</ul>
</li>
<li><strong>代码</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> a[N], b[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; m1, m2;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        m1[a[i]]++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;b[i]);<br>        m2[b[i]]++;<br>    &#125;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : m1)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> j : m2)<br>        &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">abs</span>(i.first - j.first));<br>            sum += i.second * j.second * ans;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, sum);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>组合数学</title>
    <url>/posts/7ff86023/</url>
    <content><![CDATA[<h1>1.杨辉三角递推法求组合数</h1>
<p>设 $C[i][j]$ 为已在 $i$个元素中抽取了 $j$ 个元素，对于上一步描述，有可能是：<br>
这一步没有抽取元素，之前已经抽了 $j$ 个元素：$C[i-1][j]$<br>
这一步抽取了一个元素，之前已经抽了 $j-1$ 个元素：$C[i-1][j-1]$<br>
将这两种情况加起来便是 $C[i][j]$ 的结果，由此得出式子：<br>
$C[i][j] = C[i-1][j] + C[i-1][j-1]$</p>
<p>时间复杂度：$O(n^2)$<br /></p>
<p><strong>核心代码</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getC</span><span class="hljs-params">(<span class="hljs-type">int</span> N)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= N; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span>)<br>            &#123;<br>                C[i][j] = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                C[i][j] = (C[i - <span class="hljs-number">1</span>][j] + C[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]) % p;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">$i\backslash j$</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
<th style="text-align:center">6</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>0</strong></td>
<td style="text-align:center"><strong>1</strong></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><strong>1</strong></td>
<td style="text-align:center"><strong>1</strong></td>
<td style="text-align:center"><strong>1</strong></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><strong>2</strong></td>
<td style="text-align:center"><strong>1</strong></td>
<td style="text-align:center"><strong>2</strong></td>
<td style="text-align:center"><strong>1</strong></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><strong>3</strong></td>
<td style="text-align:center"><strong>1</strong></td>
<td style="text-align:center"><strong>3</strong></td>
<td style="text-align:center"><strong>3</strong></td>
<td style="text-align:center"><strong>1</strong></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><strong>4</strong></td>
<td style="text-align:center"><strong>1</strong></td>
<td style="text-align:center"><strong>4</strong></td>
<td style="text-align:center"><strong>6</strong></td>
<td style="text-align:center"><strong>4</strong></td>
<td style="text-align:center"><strong>1</strong></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><strong>5</strong></td>
<td style="text-align:center"><strong>1</strong></td>
<td style="text-align:center"><strong>5</strong></td>
<td style="text-align:center"><strong>10</strong></td>
<td style="text-align:center"><strong>10</strong></td>
<td style="text-align:center"><strong>5</strong></td>
<td style="text-align:center"><strong>1</strong></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><strong>6</strong></td>
<td style="text-align:center"><strong>1</strong></td>
<td style="text-align:center"><strong>6</strong></td>
<td style="text-align:center"><strong>15</strong></td>
<td style="text-align:center"><strong>20</strong></td>
<td style="text-align:center"><strong>15</strong></td>
<td style="text-align:center"><strong>6</strong></td>
<td style="text-align:center"><strong>1</strong></td>
</tr>
</tbody>
</table>
<p><strong>杨辉三角公式：</strong></p>
<p>$C_{n}^{0} = C_{n}^{n} = 1$<br>
$C_{n}^{m} = C_{n}^{n-m}$<br>
$C_{n}^{m} = C_{n-1}^{m} + C_{n-1}^{m-1}$</p>
<p><a href="https://www.jisuanke.com/problem/T1984">计蒜客-T1984</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e3</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> C[N][N];<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> p = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getC</span><span class="hljs-params">(<span class="hljs-type">int</span> N)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= N; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span>)<br>            &#123;<br>                C[i][j] = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                C[i][j] = (C[i - <span class="hljs-number">1</span>][j] + C[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]) % p;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-built_in">getC</span>(n);<br>    cout &lt;&lt; C[n][m] &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>2.快速幂和乘法逆元求组合数</h1>
<p>递推法 $C_{n}^{m} = C_{n-1}^{m} + C_{n-1}^{m-1}$ 会 TLE<br>
考虑用 $C_{n}^{m} = \dfrac{n!}{m!(n-m)!}$ 直接计算。<br>
用 $f[x]$ 存 $x! \pmod{p}$ 的值，<br>
用 $g[x]$ 存 $\dfrac{1}{x!} \pmod{p}$ 的值。<br>
因为 $p$ 是质数且 $n,m$ 都小于 $p$，即 $n, m$ 与 $p$ 互质，<br>
所以根据费马小定理 $a \cdot a^{p-2} \equiv 1 \pmod{p}$，<br>
$g[i] = \dfrac{1}{i!} \pmod{p} = \dfrac{1}{i} \times \dfrac{1}{(i-1)!} \pmod{p} = \text{qpow}(i,p-2) \times g[i-1]$<br>
查询 $C_{n}^{m} \pmod{p} = f[n] \cdot g[n-m] \cdot g[m] \pmod{p}$</p>
<p>时间复杂度：$O(n \log p)$</p>
<p><strong>核心代码</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qpow</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>        &#123;<br>            ans = ans * a % p;<br>        &#125;<br>        a = a * a % p;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    f[<span class="hljs-number">0</span>] = g[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        f[i] = f[i - <span class="hljs-number">1</span>] * i % p;<br>        g[i] = g[i - <span class="hljs-number">1</span>] * <span class="hljs-built_in">qpow</span>(i, p - <span class="hljs-number">2</span>) % p;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getC</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> f[n] * g[m] % p * g[n - m] % p;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1><strong>3.Lucas定理求组合数</strong></h1>
<p>$C_{n}^{m} \equiv C_{n/p}^{m/p} \cdot C_{n \bmod p}^{m \bmod p} \pmod{p}$<br>
引理1：$C_{p}^{x} \equiv 0 \pmod{p}$, $0&lt;x&lt;p$<br>
因 $C_{p}^{x} = \dfrac{p!}{x!(p-x)!} = \dfrac{p(p-1)!}{x(x-1)!(p-x)!} = \dfrac{p}{x} \cdot C_{p-1}^{x-1}$<br>
故 $C_{p}^{x} \equiv p \cdot \text{inv}(x) \cdot C_{p-1}^{x-1} \equiv 0 \pmod{p}$<br>
引理2：$(1+x)^p \equiv 1 + x^p \pmod{p}$<br>
由二项式定理 $(1+x)^p = \sum\limits_{i=0}^{p} C_{p}^{i} x^i$<br>
由引理1知，只剩下i=0,p这两项，得证</p>
<p>时间复杂度：$O(p \log p + \log_p n)$<br>
<img src="https://pic.imgdb.cn/item/639ad869b1fccdcd3651ffab.png" alt=""></p>
<p><strong>核心代码</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qpow</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>        &#123;<br>            ans = ans * a % p;<br>        &#125;<br>        a = a * a % p;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    f[<span class="hljs-number">0</span>] = g[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= p; i++)<br>    &#123;<br>        f[i] = f[i - <span class="hljs-number">1</span>] * i % p;<br>        g[i] = g[i - <span class="hljs-number">1</span>] * <span class="hljs-built_in">qpow</span>(i, p - <span class="hljs-number">2</span>, p) % p;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getC</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> f[n] * g[m] * g[n - m] % p;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Lucas</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (m == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Lucas</span>(n / p, m / p, p) * <span class="hljs-built_in">getC</span>(n % p, m % p, p) % p;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>4.高精度加线性筛求组合数（不取模）</h1>
<p>分解质因数：$C_{n}^{m} = p_1^{m_1} \cdot p_2^{m_2} \cdot \cdots \cdot p_k^{m_k}$<br>
其中 $p_1$-$p_k$ 是 $[1,n]$ 中的素数；<br>
$m_1$~$m_k$ 是其中对应的每个素数的次数，是在 $n!$ 中的次数减去 $m!$ 中的次数再减去 $(n-m)!$ 中的次数；<br>
$n!$ 中 $p$ 的个数：$s = \left\lfloor \dfrac{n}{p} \right\rfloor + \left\lfloor \dfrac{n}{p^2} \right\rfloor + \left\lfloor \dfrac{n}{p^3} \right\rfloor + \cdots$</p>
<p><img src="https://pic.imgdb.cn/item/639b0012b1fccdcd3693dac1.png" alt="image-20221215190711847"></p>
<p><a href="https://www.acwing.com/problem/content/description/890/">AcWing 888. 求组合数 IV</a><br /><br>
<strong>题目描述</strong><br /><br>
输入 $n,m$，求 $C_{n}^{m}$ 的值。<br>
注意结果可能很大，需要使用高精度计算。<br /></p>
<p><strong>输入格式</strong><br /><br>
共一行，包含两个整数n和m。<br /></p>
<p><strong>输出格式<br /></strong><br>
共一行，输出$C_{n}^{m}$的值。<br /></p>
<p><strong>数据范围</strong><br /><br>
1≤m≤n≤5000<br /><br>
<strong>输入样例：<br /></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">5 3<br></code></pre></td></tr></table></figure>
<p><strong>输出样例：</strong><br /></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">10<br></code></pre></td></tr></table></figure>
<p><strong>代码</strong><br /></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e3</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> primes[N], vis[N], cnt;<br><span class="hljs-type">int</span> C[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">// 筛素数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!vis[i])<br>        &#123;<br>            primes[cnt++] = i;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; i * primes[j] &lt;= n; j++)<br>        &#123;<br>            vis[i * primes[j]] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">// n!中p的个数</span><br>    <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n)<br>    &#123;<br>        s += n / p, n /= p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getps</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">// C中p的个数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">get</span>(n, p) - <span class="hljs-built_in">get</span>(m, p) - <span class="hljs-built_in">get</span>(n - m, p);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> C[], <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> &amp;len)</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">// 高精度</span><br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        t += C[i] * p;<br>        C[i] = t % <span class="hljs-number">10</span>;<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (t)<br>    &#123;<br>        C[len++] = t % <span class="hljs-number">10</span>;<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-built_in">get_primes</span>(n);<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">1</span>;<br>    C[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> p = primes[i];<br>        <span class="hljs-type">int</span> s = <span class="hljs-built_in">getps</span>(n, m, p);<br>        <span class="hljs-keyword">while</span> (s--)<br>        &#123;<br>            <span class="hljs-built_in">mul</span>(C, p, len);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = len - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        cout &lt;&lt; C[i];<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5010</span>;<br><span class="hljs-type">int</span> primes[N], cnt;<br><span class="hljs-type">int</span> sum[N];<br><span class="hljs-type">bool</span> st[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_primes</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i])<br>        &#123;<br>            primes[cnt++] = i;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j++)<br>        &#123;<br>            st[primes[j] * i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n)<br>    &#123;<br>        res += n / p;<br>        n /= p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; c;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        t += a[i] * b;<br>        c.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (t)<br>    &#123;<br>        c.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-built_in">get_primes</span>(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> p = primes[i];<br>        sum[i] = <span class="hljs-built_in">get</span>(n, p) - <span class="hljs-built_in">get</span>(n - m, p) - <span class="hljs-built_in">get</span>(m, p);<br>    &#125;<br>    vector&lt;<span class="hljs-type">int</span>&gt; res;<br>    res.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; sum[i]; j++)<br>        &#123;<br>            res = <span class="hljs-built_in">mul</span>(res, primes[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = res.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        cout &lt;&lt; res[i];<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Hexo相册滚动时图片消失的问题</title>
    <url>/posts/48bcc160/</url>
    <content><![CDATA[<p>在使用 Hexo 搭建单机游戏相册页面时，遇到了一个有趣的问题：浏览 “黑神话悟空” 分类下的图片时，向下滚动页面，上方的图片会突然消失；向上滚动时，消失的图片又会重新出现。经过一番排查，终于找到原因并解决，特此记录整个过程。</p>
<h2 id="一、问题现象">一、问题现象</h2>
<h3 id="具体表现">具体表现</h3>
<ul>
<li>页面结构：使用 Hexo 的<code>&#123;% gallery %&#125;</code>标签展示图片，按游戏分类（奥日与萤火意志、黑神话悟空、战神）分组。如下图：<img src="https://a1.boltp.com/2025/08/22/68a818eb2fe02.png" alt=""></li>
<li>异常场景：在 “黑神话悟空” 分类下，当图片数量超过10张时，滚动页面到第 10 张之后，上方的图片会突然消失；再向上滚动一下，消失的图片又会重新加载出现。<br>
<img src="https://a1.boltp.com/2025/08/22/68a81c15670c8.png" alt=""></li>
<li>其他分类：“奥日与萤火意志”（15 张）和 “战神”（10 张）中，“战神” 分类因图片数量刚好为 10 张，未出现异常；“奥日与萤火意志” 偶尔也会出现，但因滚动速度较慢，现象不明显。</li>
</ul>
<h2 id="二、问题分析">二、问题分析</h2>
<p>针对 “滚动时图片消失” 的现象，初步推测与<strong>图片加载机制</strong>或<strong>组件逻辑</strong>有关，逐一排查如下：</p>
<h3 id="1-图片懒加载（Lazy-Loading）的影响">1. 图片懒加载（Lazy Loading）的影响</h3>
<p>现代博客通常会启用图片懒加载（仅加载可视区域的图片），但正常的懒加载只会 “延迟加载”，不会 “卸载已加载的图片”。</p>
<ul>
<li>排查：通过浏览器开发者工具（F12）查看图片元素，发现图片使用<code>data-lazy-src</code>属性实现懒加载，但未找到 “卸载不可见图片” 的配置。</li>
<li>结论：懒加载是优化手段，并非直接原因。</li>
</ul>
<h3 id="2-CSS-样式导致的-“视觉隐藏”">2. CSS 样式导致的 “视觉隐藏”</h3>
<p>若父容器或图片本身的 CSS 样式存在特殊设置，可能导致滚动时图片被截断或隐藏：</p>
<ul>
<li>排查：检查相册容器的样式，发现<code>gallery-container</code>使用默认布局，无<code>overflow: hidden</code>或<code>position: fixed</code>等异常属性；图片元素也无<code>display: none</code>或<code>opacity: 0</code>的动态样式。</li>
<li>结论：CSS 样式无异常。</li>
</ul>
<h3 id="3-相册组件的-“按需加载”-逻辑">3. 相册组件的 “按需加载” 逻辑</h3>
<p>核心怀疑点：相册组件可能存在 “加载数量限制”，超过限制后自动卸载上方图片（为了优化性能）。</p>
<ul>
<li>
<p>排查：查看 Hexo 生成的 HTML 代码，这里我的路径是“根目录/public/gallery/game/index.html”，发现相册容器<code>gallery-container</code>有两个关键属性：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;gallery-container&quot;</span> </span><br><span class="hljs-tag">     <span class="hljs-attr">data-type</span>=<span class="hljs-string">&quot;data&quot;</span> </span><br><span class="hljs-tag">     <span class="hljs-attr">data-limit</span>=<span class="hljs-string">&quot;10&quot;</span>  &lt;!<span class="hljs-attr">--</span> <span class="hljs-attr">限制最多加载10张图片</span> <span class="hljs-attr">--</span>&gt;</span><br>     data-first=&quot;10&quot;&gt; <span class="hljs-comment">&lt;!-- 初始加载10张图片 --&gt;</span><br></code></pre></td></tr></table></figure>
</li>
<li>
<p>对应现象：“黑神话悟空” 有 14 张图片，超过<code>data-limit=&quot;10&quot;</code>，因此滚动时会卸载超出范围的图片；“战神” 刚好 10 张，未触发卸载逻辑。</p>
</li>
<li>
<p>结论：这是导致图片消失的<strong>核心原因</strong>。</p>
</li>
</ul>
<h2 id="三、解决过程">三、解决过程</h2>
<h3 id="1-尝试修改组件参数">1. 尝试修改组件参数</h3>
<p>相册组件的<code>data-limit</code>和<code>data-first</code>属性控制加载数量，因此我尝试在 Markdown 中修改这两个参数：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">&lt;!-- 原标签：默认参数 --&gt;<br>&#123;% gallery %&#125;<br>&lt;!-- 图片列表 --&gt;<br>&#123;% endgallery %&#125;<br><br>&lt;!-- 修改后：增加加载限制 --&gt;<br>&#123;% gallery data-limit=20 data-first=14 %&#125;  &lt;!-- 黑神话悟空有14张图 --&gt;<br>&lt;!-- 图片列表 --&gt;<br>&#123;% endgallery %&#125;<br></code></pre></td></tr></table></figure>
<h3 id="2-发现参数未生效的新问题">2. 发现参数未生效的新问题</h3>
<p>重新生成页面后，发现 HTML 中参数未生效，反而被错误地解析到<code>data-button</code>属性中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 错误的生成结果 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;gallery-container&quot;</span> </span><br><span class="hljs-tag">     <span class="hljs-attr">data-type</span>=<span class="hljs-string">&quot;data&quot;</span> </span><br><span class="hljs-tag">     <span class="hljs-attr">data-button</span>=<span class="hljs-string">&quot;data-limit=20 data-first=14&quot;</span>  &lt;!<span class="hljs-attr">--</span> <span class="hljs-attr">参数被错误赋值</span> <span class="hljs-attr">--</span>&gt;</span><br>     data-limit=&quot;10&quot;  <span class="hljs-comment">&lt;!-- 仍为默认值10 --&gt;</span><br>     data-first=&quot;10&quot;&gt;<br></code></pre></td></tr></table></figure>
<h3 id="3-正确的参数设置方式">3. 正确的参数设置方式</h3>
<p>我仔细查阅了一下文档，发现<code>&#123;% gallery %&#125;</code> 标签其实支持三个参数，专门用来控制图片加载和显示的，具体说明如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>lazyload</td>
<td>【可选】点击按钮加载更多图片，填写 true/false。默认为<code>false</code>。</td>
</tr>
<tr>
<td>rowHeight</td>
<td>【可选】图片显示的高度，如果需要一行显示更多的图片，可设置更小的数字。默认为<code>220</code>。</td>
</tr>
<tr>
<td>limit</td>
<td>【可选】每次加载多少张照片。默认为<code>10</code>。</td>
</tr>
</tbody>
</table>
<p>这里有个对应关系得记一下：<code>rowHeight</code> 对应生成 HTML 里的 <code>data-limit</code>，<code>limit</code> 对应 <code>data-first</code>。参数的格式得按顺序写，用逗号隔开：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">&#123;% gallery [lazyload],[rowHeight],[limit] %&#125;<br>&lt;!-- 这里放 markdown 图片格式 --&gt;<br>&#123;% endgallery %&#125;<br></code></pre></td></tr></table></figure>
<p>知道了这个，我就直接去 “根目录 /source/gallery/game/index.md” 里改了，给每个相册的 <code>&#123;% gallery %&#125;</code> 都加上 <code>false,220,20</code>：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">&#123;% gallery false,220,20 %&#125;  &lt;!-- 意思是：不启用点击加载，图片高度220，每次加载20张（比实际的14张多） --&gt;<br>![<span class="hljs-string">黑神话悟空1</span>](<span class="hljs-link">https://a1.boltp.com/2025/08/22/68a80e202d1b2.jpg</span>)<br>![<span class="hljs-string">黑神话悟空2</span>](<span class="hljs-link">https://a1.boltp.com/2025/08/22/68a80e2040a50.jpeg</span>)<br>&lt;!-- 其余12张图片 --&gt;<br>&#123;% endgallery %&#125;<br></code></pre></td></tr></table></figure>
<p>改完执行生成命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo generate<br></code></pre></td></tr></table></figure>
<p>再看生成的 HTML，参数终于对了，<code>data-limit</code> 和 <code>data-first</code> 都是我设置的数值：</p>
<p><img src="https://a1.boltp.com/2025/08/22/68a8287075b49.png" alt=""></p>
<h3 id="4-验证结果">4. 验证结果</h3>
<p>启动本地服务看看效果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure>
<p><img src="" alt=""></p>
<p>访问 <code>http://localhost:4000</code> 翻了翻页面，所有图片都稳稳当当的，怎么滚动都不会消失了～</p>
<p><img src="https://a1.boltp.com/2025/08/22/68a81fe2bb794.png" alt=""></p>
<h2 id="四、总结与注意事项">四、总结与注意事项</h2>
<ol>
<li><strong>参数设置原则</strong>：<br>
对于<code>data-limit</code>和<code>data-first</code>，建议设置为 “大于实际图片数量的值”，避免组件因 “超出限制” 触发卸载逻辑。</li>
<li><strong>排查问题的思路</strong>：<br>
遇到页面元素异常时，优先通过浏览器开发者工具查看生成的 HTML 代码，对比 “正常” 与 “异常” 场景的差异（如本文中<code>data-limit</code>的默认值 10 与图片数量的关系）。</li>
<li><strong>插件文档的重要性</strong>：<br>
本次问题的核心是对<code>&#123;% gallery %&#125;</code>标签参数不熟悉，后续使用新插件时，应先查阅官方文档（如<code>hexo-butterfly-tag-plugins-plus</code>的参数说明）。</li>
<li><strong>图片链接稳定性</strong>：<br>
若使用第三方图床（如本次的<code>a1.boltp.com</code>），需确保链接长期有效，避免因链接失效导致 “图片加载失败” 的次生问题。</li>
</ol>
<p>通过这次排查，不仅解决了图片消失的问题，也加深了对 Hexo 组件渲染逻辑的理解。希望这份记录能帮助遇到类似问题的朋友少走弯路哈～</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>bug</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot：自动配置的核心原理</title>
    <url>/posts/54f9cb4a/</url>
    <content><![CDATA[<p>今天刚学完黑马的 JavaWeb 课程，回想整个过程还挺有感触的。前端部分学起来感觉挺顺的，到了后端，从 Maven 到 SpringBoot 的各种案例，做下来也都还好 —— 无非是搭好架构、引入依赖、标上注解，再写点 CRUD 代码，不算特别复杂。</p>
<p>但学到 Spring Boot 原理这块时，说实话第一遍是真有点懵。这大概是整个 JavaWeb 里，我唯一觉得抽象的部分了。后来又反复听了两三遍，自己也翻了翻源码，才算有了点初步的理解。</p>
<p>其实我们都感受过 Spring Boot “开箱即用” 的神奇 —— 只要引入依赖、写几行代码，一个能跑的应用很快就能启动起来。这背后，正是 Spring Boot 精心设计的自动配置机制在悄悄发力。今天就结合最新版本的特点，跟大家聊聊我对 Spring Boot 核心原理的理解。</p>
<h2 id="一、从-“配置地狱”-到-“零配置”-的跨越">一、从 “配置地狱” 到 “零配置” 的跨越</h2>
<p>在 Spring Boot 出现之前，我们用 Spring 框架开发时，总得写一大堆 XML 配置或者 Java 配置类：声明 Bean、配置扫描路径、设置依赖注入关系…… 这些重复的工作被开发者们调侃成 “配置地狱”。Spring Boot 的出现彻底改变了这种情况，它的核心思路就是 **“约定大于配置”**—— 通过一套默认规则自动完成大部分配置，开发者只用专注于业务逻辑就行。</p>
<p>这种自动配置能力不是凭空来的，它基于 Spring 框架的注解驱动和条件注解特性，经过封装优化后形成了一套完整的机制。最新的 Spring Boot 3.5.x 版本在核心原理不变的基础上，对细节做了不少优化，让自动配置变得更灵活高效。</p>
<h2 id="二、自动配置的-“总开关”：-SpringBootApplication">二、自动配置的 “总开关”：@SpringBootApplication</h2>
<p>Spring Boot 应用的启动类上通常会标个<code>@SpringBootApplication</code>注解，这个看似简单的注解其实是整个自动配置机制的起点。它是个组合注解，包含三个关键部分：</p>
<ul>
<li><code>@SpringBootConfiguration</code>：说白了就是<code>@Configuration</code>的特殊形式，标记当前类是个配置类</li>
<li><code>@ComponentScan</code>：负责扫描当前包及其子包下的组件（像<code>@Service</code>、<code>@Controller</code>这些）</li>
<li><code>@EnableAutoConfiguration</code>：开启自动配置的核心注解，这个我认为是最关键的部分</li>
</ul>
<p>其中<code>@EnableAutoConfiguration</code>注解通过<code>@Import(AutoConfigurationImportSelector.class)</code>导入了一个特殊的选择器，这个选择器会帮我们完成自动配置类的加载工作。</p>
<h2 id="三、自动配置类的-“花名册”：AutoConfiguration-imports">三、自动配置类的 “花名册”：AutoConfiguration.imports</h2>
<p>在 Spring Boot 2.7 之前的版本里，自动配置类是通过<code>META-INF/spring.factories</code>文件声明的。从 2.7 版本开始，官方引入了<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>文件作为新的 “花名册”，这种格式更简单，解析起来也更方便。</p>
<p>应用启动的时候，<code>AutoConfigurationImportSelector</code>会扫描所有 jar 包里的这个文件，收集里面声明的自动配置类全路径。比如在 Spring Boot 自带的<code>spring-boot-autoconfigure</code>包中，我们能看到这样的配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration<br><br>org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration<br><br>org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration<br><br>...<br></code></pre></td></tr></table></figure>
<p>这些类就是 Spring Boot 为我们准备的 “配置模板”，每个自动配置类都对应着某一类功能的自动配置逻辑。</p>
<h2 id="四、条件注解：自动配置的-“智能开关”">四、条件注解：自动配置的 “智能开关”</h2>
<p>收集到所有自动配置类后，Spring Boot 不会一股脑都加载，而是通过<strong>条件注解</strong>来筛选。这些注解就像一个个智能开关，只有满足特定条件，对应的自动配置类才会生效。</p>
<p>常用的条件注解有这些：</p>
<ul>
<li><code>@ConditionalOnClass</code>：类路径下有指定的类时才生效（比如 WebMvcAutoConfiguration 需要有 Servlet 类）</li>
<li><code>@ConditionalOnMissingBean</code>：容器里没有指定的 Bean 时生效（用户自己定义的优先）</li>
<li><code>@ConditionalOnProperty</code>：配置文件里有指定的属性时生效（比如<code>spring.datasource.enabled=true</code>）</li>
<li><code>@ConditionalOnWebApplication</code>：应用是 Web 应用时才生效</li>
</ul>
<p>拿我们做 Spring Boot 项目时最常见的数据源自动配置举个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><br><span class="hljs-meta">@ConditionalOnClass(DataSource.class)</span>  <span class="hljs-comment">// 有DataSource类才生效</span><br><br><span class="hljs-meta">@ConditionalOnMissingBean(DataSource.class)</span>  <span class="hljs-comment">// 没有用户定义的DataSource才生效</span><br><br><span class="hljs-meta">@EnableConfigurationProperties(DataSourceProperties.class)</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSourceAutoConfiguration</span> &#123;<br><br>    <span class="hljs-comment">// 数据源配置逻辑...</span><br><br>&#125;<br></code></pre></td></tr></table></figure>
<p>这种机制保证了自动配置能 “按需加载”，既不浪费资源，又给用户自定义配置留了足够的空间。</p>
<h2 id="五、配置属性绑定：让用户配置生效">五、配置属性绑定：让用户配置生效</h2>
<p>自动配置也不是一成不变的，Spring Boot 通过<strong>配置属性绑定</strong>机制，允许我们通过配置文件修改默认行为。这个过程主要靠两个注解实现：</p>
<ol>
<li><code>@ConfigurationProperties</code>：用来声明属性类，指定配置的前缀</li>
<li><code>@EnableConfigurationProperties</code>：在自动配置类中启用属性绑定</li>
</ol>
<p>比如数据源配置属性类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSourceProperties</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String url;<br><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-comment">// getters and setters</span><br><br>&#125;<br></code></pre></td></tr></table></figure>
<p>当我们在<code>application.properties</code>里配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/tlias</span><br><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br></code></pre></td></tr></table></figure>
<p>这些配置会自动绑定到<code>DataSourceProperties</code>对象上，进而影响<code>DataSourceAutoConfiguration</code>的配置结果。</p>
<h2 id="六、用户配置优先：自动配置的-“退让原则”">六、用户配置优先：自动配置的 “退让原则”</h2>
<p>Spring Boot 的自动配置遵循 “用户配置优先” 的原则，当我们手动定义了某个 Bean 时，自动配置就会 “退让”。这多亏了<code>@ConditionalOnMissingBean</code>注解 —— 当容器里已经有了用户定义的 Bean 时，自动配置类中对应的 Bean 定义就不会生效了。</p>
<p>比如我们自己定义一个数据源 Bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">myDataSource</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HikariDataSource</span>();<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>
<p>这时候<code>DataSourceAutoConfiguration</code>里的<code>@ConditionalOnMissingBean</code>条件就不满足了，自动配置的数据源不会被注册，容器里只会用我们自己定义的<code>myDataSource</code>。这种设计既保证了自动配置的便捷，又保留了手动配置的灵活。</p>
<h2 id="七、总结：自动配置的完整流程">七、总结：自动配置的完整流程</h2>
<p>我们梳理一下 Spring Boot 自动配置的完整流程：</p>
<ol>
<li>启动类通过<code>@SpringBootApplication</code>触发<code>@EnableAutoConfiguration</code></li>
<li><code>AutoConfigurationImportSelector</code>扫描所有 jar 包里的<code>AutoConfiguration.imports</code>文件</li>
<li>收集并过滤出符合条件的自动配置类（去重、排除、条件匹配）</li>
<li>满足条件的自动配置类被解析，通过<code>@Bean</code>注册需要的组件</li>
<li>用户通过配置文件或自定义 Bean 覆盖默认配置</li>
</ol>
<p>正是这套精密的机制，让 Spring Boot 实现了 “开箱即用” 的特性。理解了这些原理，我们不仅能更好地使用 Spring Boot，还能在需要的时候自定义自动配置，甚至开发自己的 Starter 组件。</p>
<p>Spring Boot 的魅力就在于它隐藏了复杂的配置细节，却在我们需要的时候保留了足够的扩展性。这种 “大道至简” 的设计哲学，值得每个开发者好好体会。</p>
<blockquote>
<p>（注：文档部分内容由 AI 生成，因为都让我自己写实在是太要老命了QAQ）</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/posts/5c266b64/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<p>在学习 Linux 操作系统和项目部署时，我们常遇到命令繁多、软件安装复杂、环境依赖冲突等问题。尤其在微服务时代，成百上千台服务器的部署运维更是挑战。Docker 技术的出现，通过容器化解决了环境隔离与快速部署的问题，让项目部署变得简单高效。</p>
<p>本文基于 Ubuntu 24.04 LTS 系统，整理 Docker 核心知识点，包括基础命令、数据卷、镜像构建、网络配置及项目部署，并补充实用扩展内容。</p>
<h2 id="1-快速入门">1. 快速入门</h2>
<h3 id="1-1-安装-Docker">1.1 安装 Docker</h3>
<p>Docker 支持主流操作系统，但安装方式因系统而异。以 Ubuntu 24.04 LTS 为例，可直接参考官方安装文档：<a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></p>
<p><img src="https://a1.boltp.com/2025/09/20/68ce2a7a2f9dc.png" alt="image"></p>
<p>按照文档提示逐步执行命令即可，也可参考视频教程操作：<a href="https://www.bilibili.com/video/BV183B1Y2EGk/?spm_id_from=333.337.search-card.all.click&amp;vd_source=ffdc8ef30147923fee0d363c8e4b12bb">https://www.bilibili.com/video/BV183B1Y2EGk/?spm_id_from=333.337.search-card.all.click&amp;vd_source=ffdc8ef30147923fee0d363c8e4b12bb</a></p>
<p>对于其他系统（如 CentOS），在官方文档中选择对应系统的安装指南即可。</p>
<p>Docker 默认从官方仓库（<code>Docker Hub</code>）拉取镜像，由于该仓库服务器位于国外，国内用户直接访问时可能因网络链路长、带宽限制或地域访问策略，出现拉取超时、速度卡顿等问题。针对这类问题，可采用以下解决方案：</p>
<ul>
<li><strong>镜像加速</strong>：通过国内云厂商（如阿里云、腾讯云等）提供的 “镜像加速器”，将拉取请求转发至国内节点，大幅提升拉取速度。</li>
<li><strong>VPN</strong>：通过合规的虚拟专用网络连接国外网络，绕开地域限制，直接访问 <code>Docker Hub</code>。</li>
</ul>
<p>Ubuntu 24.04 通过 <code>/etc/docker/daemon.json</code> 配置加速，以阿里云为例：</p>
<ol>
<li>
<p>登录阿里云容器镜像服务，获取专属加速地址（如 <code>https://xxxx.mirror.aliyuncs.com</code>）</p>
</li>
<li>
<p>创建配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span><br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://xxxx.mirror.aliyuncs.com&quot;</span>]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure>
</li>
<li>
<p>重启 Docker 使配置生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><span class="hljs-built_in">sudo</span> systemctl restart docker<br></code></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="1-2-部署-MySQL（Docker-方式对比传统方式）">1.2 部署 MySQL（Docker 方式对比传统方式）</h3>
<p>使用 Docker 部署软件比传统方式更高效。以 MySQL 为例：</p>
<h4 id="传统部署-MySQL-步骤">传统部署 MySQL 步骤</h4>
<ul>
<li>搜索并下载 Ubuntu 版本的 MySQL 安装包（<code>mysql-server_8.0_amd64.deb</code>）</li>
<li>手动解决依赖冲突（如 <code>libmysqlclient-dev</code> 等）</li>
<li>执行 <code>dpkg -i</code> 安装并通过 <code>mysql_secure_installation</code> 配置</li>
<li>调整 <code>/etc/mysql/my.cnf</code> 配置文件</li>
</ul>
<h4 id="Docker-部署-MySQL-步骤（仅需-1-条命令）">Docker 部署 MySQL 步骤（仅需 1 条命令）</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> docker run -d \<br>  --name mysql \<br>  -p 3306:3306 \<br>  -e TZ=Asia/Shanghai \<br>  -e MYSQL_ROOT_PASSWORD=123 \<br>  mysql<br></code></pre></td></tr></table></figure>
<p><strong>镜像名称格式</strong>：<code>REPOSITORY:TAG</code>（如 <code>mysql:8.0</code>，未指定 TAG 则默认 <code>latest</code>）</p>
<p><strong>运行效果如图：</strong></p>
<p><img src="https://a1.boltp.com/2025/09/20/68ce2f045b20e.png" alt=""></p>
<p>MySQL安装完毕！现在通过任意客户端工具即可连接到MySQL啦</p>
<h3 id="1-3-核心概念解析">1.3 核心概念解析</h3>
<table>
<thead>
<tr>
<th>概念</th>
<th>英文</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>镜像</td>
<td>Image</td>
<td>包含应用程序、依赖环境、配置文件的只读模板（如 MySQL 镜像含 MySQL 及运行库）</td>
</tr>
<tr>
<td>容器</td>
<td>Container</td>
<td>镜像运行后的实例，是独立隔离的运行环境</td>
</tr>
<tr>
<td>镜像仓库</td>
<td>Registry</td>
<td>存储镜像的服务器（官方：DockerHub；第三方：阿里云 / 华为云；私有：企业自建）</td>
</tr>
</tbody>
</table>
<h3 id="1-4-命令解读（部署-MySQL-命令拆解）">1.4 命令解读（部署 MySQL 命令拆解）</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> docker run -d \          <span class="hljs-comment"># 创建并启动容器，-d 表示后台运行</span><br>  --name mysql \              <span class="hljs-comment"># 容器命名为 mysql（自定义）</span><br>  -p 3306:3306 \              <span class="hljs-comment"># 端口映射：宿主机3306 → 容器内3306（容器隔离需映射才能外部访问）</span><br>  -e TZ=Asia/Shanghai \       <span class="hljs-comment"># 环境变量：设置容器时区为上海</span><br>  -e MYSQL_ROOT_PASSWORD=123 \# 环境变量：设置 MySQL root 密码<br>  mysql                       <span class="hljs-comment"># 镜像名称（默认拉取 latest 版本，可指定如 mysql:8.0）</span><br></code></pre></td></tr></table></figure>
<p><strong>镜像名称格式</strong>：<code>REPOSITORY:TAG</code>（如 <code>mysql:8.0</code>，未指定 TAG 则默认 <code>latest</code>）</p>
<p><strong>总结一下：</strong></p>
<p>Docker本身包含一个后台服务，我们可以利用Docker命令告诉Docker服务，帮助我们快速部署指定的应用。Docker服务部署应用时，首先要去搜索并下载应用对应的镜像，然后根据镜像创建并允许容器，应用就部署完成了。</p>
<p>用一幅图标示如下：</p>
<p><img src="https://a1.boltp.com/2025/09/20/68ce3057c725f.png" alt=""></p>
<h2 id="2-Docker-基础">2. Docker 基础</h2>
<h3 id="2-1-常见命令（Ubuntu-24-04-需加-sudo）">2.1 常见命令（Ubuntu 24.04 需加 <code>sudo</code>）</h3>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>docker pull</code></td>
<td>拉取镜像到本地</td>
<td><code>sudo docker pull nginx:latest</code></td>
</tr>
<tr>
<td><code>docker images</code></td>
<td>查看本地所有镜像</td>
<td><code>sudo docker images</code></td>
</tr>
<tr>
<td><code>docker rmi</code></td>
<td>删除本地镜像（需先删依赖容器）</td>
<td><code>sudo docker rmi mysql:latest</code></td>
</tr>
<tr>
<td><code>docker run</code></td>
<td>创建并启动容器（不可重复创建同名容器）</td>
<td><code>sudo docker run -d --name nginx nginx</code></td>
</tr>
<tr>
<td><code>docker stop</code></td>
<td>停止运行中的容器</td>
<td><code>sudo docker stop mysql</code></td>
</tr>
<tr>
<td><code>docker start</code></td>
<td>启动已停止的容器</td>
<td><code>sudo docker start mysql</code></td>
</tr>
<tr>
<td><code>docker restart</code></td>
<td>重启容器</td>
<td><code>sudo docker restart mysql</code></td>
</tr>
<tr>
<td><code>docker rm</code></td>
<td>删除容器（运行中需加 <code>-f</code> 强制删除）</td>
<td><code>sudo docker rm -f mysql</code></td>
</tr>
<tr>
<td><code>docker ps</code></td>
<td>查看运行中的容器（<code>-a</code> 查看所有）</td>
<td><code>sudo docker ps -a</code></td>
</tr>
<tr>
<td><code>docker logs</code></td>
<td>查看容器运行日志（<code>-f</code> 实时跟踪）</td>
<td><code>sudo docker logs -f mysql</code></td>
</tr>
<tr>
<td><code>docker exec</code></td>
<td>进入容器内部（<code>-it</code> 交互模式）</td>
<td><code>sudo docker exec -it mysql bash</code></td>
</tr>
<tr>
<td><code>docker save</code></td>
<td>保存镜像为本地压缩包</td>
<td><code>sudo docker save -o nginx.tar nginx</code></td>
</tr>
<tr>
<td><code>docker load</code></td>
<td>加载本地压缩包为镜像</td>
<td><code>sudo docker load -i nginx.tar</code></td>
</tr>
<tr>
<td><code>docker inspect</code></td>
<td>查看容器 / 镜像详细信息</td>
<td><code>sudo docker inspect mysql</code></td>
</tr>
</tbody>
</table>
<p>用一副图来表示这些命令的关系：</p>
<p><img src="https://a1.boltp.com/2025/09/20/68ce316337013.png" alt=""></p>
<p>补充：</p>
<p>默认情况下，每次重启虚拟机我们都需要手动启动Docker和Docker中的容器。通过命令可以实现开机自启：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Docker开机自启</span><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> docker<br><br><span class="hljs-comment"># Docker容器开机自启</span><br><span class="hljs-built_in">sudo</span> docker update --restart=always [容器名/容器<span class="hljs-built_in">id</span>]<br></code></pre></td></tr></table></figure>
<h4 id="2-1-2-演示（以-Nginx-为例）">2.1.2 演示（以 Nginx 为例）</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 第1步，去DockerHub查看nginx镜像仓库及相关信息</span><br><br><span class="hljs-comment"># 第2步，拉取Nginx镜像</span><br><span class="hljs-built_in">sudo</span> docker pull nginx<br><br><span class="hljs-comment"># 第3步，查看镜像</span><br><span class="hljs-built_in">sudo</span> docker images<br><span class="hljs-comment"># 结果如下：</span><br>REPOSITORY   TAG       IMAGE ID       CREATED         SIZE<br>nginx        latest    605c77e624dd   16 months ago   141MB<br>mysql        latest    3218b38490ce   17 months ago   516MB<br><br><span class="hljs-comment"># 第4步，创建并运行Nginx容器</span><br><span class="hljs-built_in">sudo</span> docker run -d --name nginx -p 80:80 nginx<br><br><span class="hljs-comment"># 第5步，查看运行中容器</span><br><span class="hljs-built_in">sudo</span> docker ps<br><span class="hljs-comment"># 也可以加格式化方式访问，格式会更加清爽</span><br><span class="hljs-built_in">sudo</span> docker ps --format <span class="hljs-string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span><br><br><span class="hljs-comment"># 第6步，访问网页，地址：http://localhost</span><br><br><span class="hljs-comment"># 第7步，停止容器</span><br><span class="hljs-built_in">sudo</span> docker stop nginx<br><br><span class="hljs-comment"># 第8步，查看所有容器</span><br><span class="hljs-built_in">sudo</span> docker ps -a --format <span class="hljs-string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span><br><br><span class="hljs-comment"># 第9步，再次启动nginx容器</span><br><span class="hljs-built_in">sudo</span> docker start nginx<br><br><span class="hljs-comment"># 第10步，再次查看容器</span><br><span class="hljs-built_in">sudo</span> docker ps --format <span class="hljs-string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span><br><br><span class="hljs-comment"># 第11步，查看容器详细信息</span><br><span class="hljs-built_in">sudo</span> docker inspect nginx<br><br><span class="hljs-comment"># 第12步，进入容器,查看容器内目录</span><br><span class="hljs-built_in">sudo</span> docker <span class="hljs-built_in">exec</span> -it nginx bash<br><span class="hljs-comment"># 或者，可以进入MySQL</span><br><span class="hljs-built_in">sudo</span> docker <span class="hljs-built_in">exec</span> -it mysql mysql -uroot -p<br><br><span class="hljs-comment"># 第13步，删除容器</span><br><span class="hljs-built_in">sudo</span> docker <span class="hljs-built_in">rm</span> nginx<br><span class="hljs-comment"># 发现无法删除，因为容器运行中，强制删除容器</span><br><span class="hljs-built_in">sudo</span> docker <span class="hljs-built_in">rm</span> -f nginx<br></code></pre></td></tr></table></figure>
<h4 id="2-1-3-命令别名配置（简化操作）">2.1.3 命令别名配置（简化操作）</h4>
<p>Ubuntu 24.04 可通过修改 <code>~/.bashrc</code> 设置别名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 编辑配置文件（普通用户用 ~/.bashrc，root 用户用 /root/.bashrc）</span><br>vi ~/.bashrc<br><span class="hljs-comment"># 添加以下内容</span><br><span class="hljs-built_in">alias</span> dps=<span class="hljs-string">&#x27;sudo docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;&#x27;</span><br><span class="hljs-built_in">alias</span> dis=<span class="hljs-string">&#x27;sudo docker images&#x27;</span><br><span class="hljs-comment"># 使别名生效</span><br><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure>
<h3 id="2-2-数据卷（容器与宿主机数据互通）">2.2 数据卷（容器与宿主机数据互通）</h3>
<p>容器默认隔离，数据卷可实现容器内目录与宿主机目录的映射，解决数据持久化、配置修改等问题。</p>
<h4 id="2-2-1-什么是数据卷">2.2.1 什么是数据卷</h4>
<p>数据卷（volume）是一个虚拟目录，是容器内目录与宿主机目录之间映射的桥梁。</p>
<p>以 Nginx 为例，其 <code>html</code>（静态资源）和 <code>conf</code>（配置文件）目录需与宿主机关联，数据卷挂载逻辑如下：</p>
<p><img src="https://a1.boltp.com/2025/09/20/68ce35dff40a3.png" alt=""></p>
<p>在上图中：</p>
<ul>
<li>创建了两个数据卷：<code>conf</code>、<code>html</code></li>
<li>Nginx 容器内部的 <code>conf</code> 目录和 <code>html</code> 目录分别与两个数据卷关联</li>
<li>数据卷分别指向宿主机的 <code>/var/lib/docker/volumes/conf/_data</code> 和 <code>/var/lib/docker/volumes/html/_data</code></li>
</ul>
<h4 id="2-2-2-数据卷命令">2.2.2 数据卷命令</h4>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>docker volume create</code></td>
<td>创建数据卷</td>
<td><code>sudo docker volume create nginx-html</code></td>
</tr>
<tr>
<td><code>docker volume ls</code></td>
<td>查看所有数据卷</td>
<td><code>sudo docker volume ls</code></td>
</tr>
<tr>
<td><code>docker volume rm</code></td>
<td>删除指定数据卷</td>
<td><code>sudo docker volume rm nginx-html</code></td>
</tr>
<tr>
<td><code>docker volume inspect</code></td>
<td>查看数据卷详情</td>
<td><code>sudo docker inspect nginx-html</code></td>
</tr>
<tr>
<td><code>docker volume prune</code></td>
<td>清除未使用的数据卷</td>
<td><code>sudo docker volume prune</code></td>
</tr>
</tbody>
</table>
<h4 id="2-2-3-实战：挂载数据卷到-Nginx">2.2.3 实战：挂载数据卷到 Nginx</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建并启动 Nginx 容器，挂载数据卷 nginx-html 到容器内 /usr/share/nginx/html</span><br><span class="hljs-built_in">sudo</span> docker run -d --name nginx -p 80:80 -v nginx-html:/usr/share/nginx/html nginx<br><br><span class="hljs-comment"># 查看数据卷详情（获取宿主机映射路径）</span><br><span class="hljs-built_in">sudo</span> docker inspect nginx-html<br><span class="hljs-comment"># 宿主机路径通常为 /var/lib/docker/volumes/nginx-html/_data</span><br><br><span class="hljs-comment"># 修改宿主机文件，容器内自动同步</span><br><span class="hljs-built_in">sudo</span> vi /var/lib/docker/volumes/nginx-html/_data/index.html<br><span class="hljs-comment"># 访问 localhost 验证效果</span><br></code></pre></td></tr></table></figure>
<h4 id="2-2-4-实战：直接挂载宿主机目录（更灵活）">2.2.4 实战：直接挂载宿主机目录（更灵活）</h4>
<p>Ubuntu 24.04 支持直接将宿主机目录挂载到容器，无需数据卷中间层：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 宿主机创建目录（以 MySQL 为例）</span><br><span class="hljs-built_in">mkdir</span> -p ~/mysql/&#123;conf,data,init&#125;<br><br><span class="hljs-comment"># 2. 复制配置文件到 conf 目录、初始化 SQL 到 init 目录</span><br>【此处需补充图片：课前资料中 mysql 目录结构截图（含 conf、data、init 子目录）】<br>【此处需补充图片：init 目录下初始化 SQL 脚本和 conf 目录下配置文件的截图】<br><br><span class="hljs-comment"># 3. 启动 MySQL 容器，挂载宿主机目录</span><br><span class="hljs-built_in">sudo</span> docker run -d \<br>  --name mysql \<br>  -p 3306:3306 \<br>  -e TZ=Asia/Shanghai \<br>  -e MYSQL_ROOT_PASSWORD=123 \<br>  -v ~/mysql/data:/var/lib/mysql \    <span class="hljs-comment"># 数据持久化</span><br>  -v ~/mysql/conf:/etc/mysql/conf.d \ <span class="hljs-comment"># 配置文件挂载</span><br>  -v ~/mysql/init:/docker-entrypoint-initdb.d \ <span class="hljs-comment"># 初始化脚本挂载</span><br>  mysql<br><br><span class="hljs-comment"># 4. 查看宿主机目录，确认 data 自动创建</span><br><span class="hljs-built_in">ls</span> -l ~/mysql<br><span class="hljs-comment"># 结果：</span><br>总用量 4<br>drwxr-xr-x. 2 root    root   20 5月  19 15:11 conf<br>drwxr-xr-x. 7 polkitd root 4096 5月  19 15:11 data<br>drwxr-xr-x. 2 root    root   23 5月  19 15:11 init<br><br><span class="hljs-comment"># 5. 验证数据库初始化结果</span><br><span class="hljs-built_in">sudo</span> docker <span class="hljs-built_in">exec</span> -it mysql mysql -uroot -p123<br><span class="hljs-comment"># 查看编码（应为 utf8mb4）</span><br>show variables like <span class="hljs-string">&quot;%char%&quot;</span>;<br><span class="hljs-comment"># 查看数据库（应有 hmall 库）</span><br>show databases;<br></code></pre></td></tr></table></figure>
<h3 id="2-3-自定义镜像（Dockerfile-实战）">2.3 自定义镜像（Dockerfile 实战）</h3>
<p>当现有镜像无法满足需求时，可通过 Dockerfile 构建自定义镜像。</p>
<h4 id="2-3-1-镜像结构">2.3.1 镜像结构</h4>
<p>镜像采用 “分层叠加” 机制，每一层对应 Dockerfile 中的一条指令，复用性强（如 Java 镜像可基于官方 JDK 镜像叠加）。</p>
<p><img src="https://a1.boltp.com/2025/09/20/68ce3722444b2.png" alt=""></p>
<h4 id="2-3-2-Dockerfile-核心指令">2.3.2 Dockerfile 核心指令</h4>
<table>
<thead>
<tr>
<th>指令</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>FROM</code></td>
<td>指定基础镜像（必须为第一条指令）</td>
<td><code>FROM openjdk:11.0-jre-buster</code></td>
</tr>
<tr>
<td><code>ENV</code></td>
<td>设置环境变量</td>
<td><code>ENV TZ=Asia/Shanghai</code></td>
</tr>
<tr>
<td><code>COPY</code></td>
<td>拷贝本地文件到镜像</td>
<td><code>COPY ./hm-service.jar /app.jar</code></td>
</tr>
<tr>
<td><code>RUN</code></td>
<td>执行 Linux 命令（构建时运行）</td>
<td><code>RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime</code></td>
</tr>
<tr>
<td><code>EXPOSE</code></td>
<td>声明容器监听端口（仅说明，不映射）</td>
<td><code>EXPOSE 8080</code></td>
</tr>
<tr>
<td><code>ENTRYPOINT</code></td>
<td>容器启动命令（不可被覆盖）</td>
<td><code>ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;/app.jar&quot;]</code></td>
</tr>
</tbody>
</table>
<h4 id="2-3-3-实战：构建-Java-应用镜像">2.3.3 实战：构建 Java 应用镜像</h4>
<ol>
<li>
<p><strong>准备文件</strong>：将 <code>docker-demo.jar</code> 和 Dockerfile 放入 <code>~/demo</code> 目录</p>
<p><img src="https://a1.boltp.com/2025/09/20/68ce383375757.png" alt=""></p>
<p><img src="https://a1.boltp.com/2025/09/20/68ce3875d6fdf.png" alt=""></p>
</li>
<li>
<p><strong>编写 Dockerfile</strong>：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 基础镜像（含 JRE 环境）</span><br><span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">11.0</span>-jre-buster<br><span class="hljs-comment"># 设置时区</span><br><span class="hljs-keyword">ENV</span> TZ=Asia/Shanghai<br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">ln</span> -snf /usr/share/zoneinfo/<span class="hljs-variable">$TZ</span> /etc/localtime &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$TZ</span> &gt; /etc/timezone</span><br><span class="hljs-comment"># 拷贝 jar 包</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./docker-demo.jar /app.jar</span><br><span class="hljs-comment"># 声明端口</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br><span class="hljs-comment"># 启动命令</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>, <span class="hljs-string">&quot;/app.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure>
</li>
<li>
<p><strong>构建镜像</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入镜像目录</span><br><span class="hljs-built_in">cd</span> /root/demo<br><span class="hljs-comment"># 开始构建</span><br>docker build -t docker-demo:1.0 .<br></code></pre></td></tr></table></figure>
<p>结果：</p>
<p><img src="https://a1.boltp.com/2025/09/20/68ce3909a9637.png" alt=""></p>
<p>查看镜像列表：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看镜像列表：</span><br>docker images<br><span class="hljs-comment"># 结果</span><br>REPOSITORY    TAG       IMAGE ID       CREATED          SIZE<br>docker-demo   1.0       d6ab0b9e64b9   27 minutes ago   327MB<br>nginx         latest    605c77e624dd   16 months ago    141MB<br>mysql         latest    3218b38490ce   17 months ago    516MB<br></code></pre></td></tr></table></figure>
</li>
<li>
<p><strong>运行自定义镜像</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.创建并运行容器</span><br>docker run -d --name <span class="hljs-built_in">dd</span> -p 8080:8080 docker-demo:1.0<br><span class="hljs-comment"># 2.查看容器</span><br>dps<br><span class="hljs-comment"># 结果</span><br>CONTAINER ID   IMAGE             PORTS                                                  STATUS         NAMES<br>78a000447b49   docker-demo:1.0   0.0.0.0:8080-&gt;8080/tcp, :::8090-&gt;8090/tcp              Up 2 seconds   <span class="hljs-built_in">dd</span><br>f63cfead8502   mysql             0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   Up 2 hours     mysql<br><br><span class="hljs-comment"># 3.访问</span><br>curl localhost:8080/hello/count<br><span class="hljs-comment"># 结果：</span><br>&lt;h5&gt;欢迎访问黑马商城, 这是您第1次访问&lt;h5&gt;<br></code></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="2-4-网络（容器间通信）">2.4 网络（容器间通信）</h3>
<p>Docker 默认网络隔离，自定义网络可实现容器通过 “别名” 互通，避免依赖动态 IP。</p>
<h4 id="2-4-1-常见网络命令">2.4.1 常见网络命令</h4>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>docker network create</code></td>
<td>创建自定义网络</td>
<td><code>sudo docker network create hmall-net</code></td>
</tr>
<tr>
<td><code>docker network ls</code></td>
<td>查看所有网络</td>
<td><code>sudo docker network ls</code></td>
</tr>
<tr>
<td><code>docker network connect</code></td>
<td>让容器加入网络</td>
<td><code>sudo docker network connect hmall-net mysql</code></td>
</tr>
<tr>
<td><code>docker network disconnect</code></td>
<td>让容器离开网络</td>
<td><code>sudo docker network disconnect hmall-net mysql</code></td>
</tr>
</tbody>
</table>
<h4 id="2-4-2-实战：自定义网络实现容器互通">2.4.2 实战：自定义网络实现容器互通</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 创建自定义网络</span><br><span class="hljs-built_in">sudo</span> docker network create hmall-net<br><br><span class="hljs-comment"># 2. 启动 MySQL 并加入网络（指定别名 db）</span><br><span class="hljs-built_in">sudo</span> docker run -d --name mysql --network hmall-net --<span class="hljs-built_in">alias</span> db -e MYSQL_ROOT_PASSWORD=123 mysql<br><br><span class="hljs-comment"># 3. 启动 Java 应用并加入同一网络</span><br><span class="hljs-built_in">sudo</span> docker run -d --name <span class="hljs-built_in">dd</span> --network hmall-net -p 8080:8080 hmall:1.0<br><br><span class="hljs-comment"># 4. 验证通信（进入 Java 容器 ping MySQL）</span><br><span class="hljs-built_in">sudo</span> docker <span class="hljs-built_in">exec</span> -it hmall bash<br>ping db  <span class="hljs-comment"># 可通过别名 db 或容器名 mysql 访问</span><br></code></pre></td></tr></table></figure>
<h2 id="3-项目部署实战（黑马商城）">3. 项目部署实战（黑马商城）</h2>
<h3 id="3-1-项目结构">3.1 项目结构</h3>
<p>课前资料提供的项目包含：</p>
<ul>
<li>后端：<code>hmall</code>（Java 项目，端口 8080）</li>
<li>前端：<code>hmall-portal</code>（用户端，端口 18080）、<code>hmall-admin</code>（管理端，端口 18081）</li>
</ul>
<table>
<thead>
<tr>
<th>项目</th>
<th>容器名</th>
<th>端口</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>hmall</td>
<td>hmall</td>
<td>8080</td>
<td>后端 API 入口</td>
</tr>
<tr>
<td>hmall-portal</td>
<td>nginx</td>
<td>18080</td>
<td>用户端前端入口</td>
</tr>
<tr>
<td>hmall-admin</td>
<td>nginx</td>
<td>18081</td>
<td>管理端前端入口</td>
</tr>
<tr>
<td>MySQL</td>
<td>mysql</td>
<td>3306</td>
<td>数据库</td>
</tr>
</tbody>
</table>
<h3 id="3-2-部署步骤">3.2 部署步骤</h3>
<h4 id="3-2-1-部署后端-Java-项目">3.2.1 部署后端 Java 项目</h4>
<ol>
<li>
<p><strong>打包项目</strong>：用 IDEA 打包 <code>hm-service</code> 模块，得到 <code>hm-service.jar</code></p>
<p><img src="https://a1.boltp.com/2025/09/20/68ce3b255b994.png" alt=""></p>
</li>
<li>
<p><strong>上传文件</strong>：将 <code>hm-service.jar</code> 和 Dockerfile 上传到 Ubuntu 24.04 的 <code>~/</code> 目录</p>
<p><img src="https://a1.boltp.com/2025/09/20/68ce3b93b0b22.png" alt=""></p>
</li>
<li>
<p><strong>构建镜像并启动</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 构建镜像</span><br><span class="hljs-built_in">sudo</span> docker build -t hmall .<br><span class="hljs-comment"># 启动容器（加入自定义网络）</span><br><span class="hljs-built_in">sudo</span> docker run -d --name hmall --network hmall-net -p 8080:8080 hmall<br></code></pre></td></tr></table></figure>
</li>
<li>
<p><strong>验证</strong>：访问 <code>http://localhost:8080/search/list</code></p>
</li>
</ol>
<h4 id="3-2-2-部署前端（Nginx-代理）">3.2.2 部署前端（Nginx 代理）</h4>
<ol>
<li>
<p><strong>准备文件</strong>：把整个nginx目录上传到虚拟机的<code>~</code>目录下：</p>
<p><img src="https://a1.boltp.com/2025/09/20/68ce3c8beff3e.png" alt=""></p>
</li>
<li>
<p><strong>启动 Nginx 容器</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> docker run -d \<br>  --name nginx \<br>  -p 18080:18080 \<br>  -p 18081:18081 \<br>  -v ~/nginx/html:/usr/share/nginx/html \<br>  -v ~/nginx/nginx.conf:/etc/nginx/nginx.conf \<br>  --network hmall-net \<br>  nginx<br></code></pre></td></tr></table></figure>
</li>
<li>
<p><strong>验证</strong>：</p>
<ul>
<li>
<p>用户端：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><code class="hljs tex">http://localhost:18080<br></code></pre></td></tr></table></figure>
<p><img src="https://a1.boltp.com/2025/09/20/68ce3ceb2759a.png" alt=""></p>
</li>
<li>
<p>管理端：<code>http://localhost:18081</code></p>
</li>
</ul>
</li>
</ol>
<h3 id="3-3-Docker-Compose（批量部署多容器）">3.3 Docker Compose（批量部署多容器）</h3>
<h4 id="3-3-1-基本语法">3.3.1 基本语法</h4>
<p><code>docker-compose.yml</code> 文件通过 “服务（service）” 定义容器配置，与 <code>docker run</code> 参数对应关系如下：</p>
<table>
<thead>
<tr>
<th>docker run 参数</th>
<th>docker compose 指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>--name</code></td>
<td><code>container_name</code></td>
<td>容器名称</td>
</tr>
<tr>
<td><code>-p</code></td>
<td><code>ports</code></td>
<td>端口映射</td>
</tr>
<tr>
<td><code>-e</code></td>
<td><code>environment</code></td>
<td>环境变量</td>
</tr>
<tr>
<td><code>-v</code></td>
<td><code>volumes</code></td>
<td>数据卷 / 目录挂载</td>
</tr>
<tr>
<td><code>--network</code></td>
<td><code>networks</code></td>
<td>网络配置</td>
</tr>
</tbody>
</table>
<h4 id="3-3-2-黑马商城-Compose-配置文件">3.3.2 黑马商城 Compose 配置文件</h4>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.8&quot;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3306:3306&quot;</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-number">123</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./mysql/data:/var/lib/mysql&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./mysql/init:/docker-entrypoint-initdb.d&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">hm-net</span><br>  <span class="hljs-attr">hmall:</span><br>    <span class="hljs-attr">build:</span> <br>      <span class="hljs-attr">context:</span> <span class="hljs-string">.</span><br>      <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">Dockerfile</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">hmall</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8080:8080&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">hm-net</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attr">nginx:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;18080:18080&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;18081:18081&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./nginx/nginx.conf:/etc/nginx/nginx.conf&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./nginx/html:/usr/share/nginx/html&quot;</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">hmall</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">hm-net</span><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">hm-net:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">hmall-net</span><br></code></pre></td></tr></table></figure>
<h4 id="3-3-3-基础命令">3.3.3 基础命令</h4>
<p>Docker Compose 命令的基本语法为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">docker compose [OPTIONS] [COMMAND]<br></code></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>类型</th>
<th>参数 / 指令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Options</td>
<td><code>-f</code></td>
<td>指定 <code>docker-compose.yml</code> 文件的路径和名称（默认查找当前目录下的该文件）</td>
</tr>
<tr>
<td>Options</td>
<td><code>-p</code></td>
<td>指定 ** 项目（project）** 名称，项目是 <code>docker-compose.yml</code> 中多个服务（service）的集合</td>
</tr>
<tr>
<td>Commands</td>
<td><code>up</code></td>
<td>创建并启动所有定义的服务容器（<code>-d</code> 表示<strong>后台启动</strong>）</td>
</tr>
<tr>
<td>Commands</td>
<td><code>down</code></td>
<td>停止并移除所有容器、网络（默认保留挂载的数据卷）</td>
</tr>
<tr>
<td>Commands</td>
<td><code>ps</code></td>
<td>列出所有启动的容器</td>
</tr>
<tr>
<td>Commands</td>
<td><code>logs</code></td>
<td>查看指定容器的运行日志（示例：<code>docker compose logs 容器名</code>）</td>
</tr>
<tr>
<td>Commands</td>
<td><code>stop</code></td>
<td>停止容器</td>
</tr>
<tr>
<td>Commands</td>
<td><code>start</code></td>
<td>启动已停止的容器</td>
</tr>
<tr>
<td>Commands</td>
<td><code>restart</code></td>
<td>重启容器</td>
</tr>
<tr>
<td>Commands</td>
<td><code>top</code></td>
<td>查看容器内运行的进程</td>
</tr>
<tr>
<td>Commands</td>
<td><code>exec</code></td>
<td>在运行中的容器内执行命令（示例：<code>docker compose exec 容器名 bash</code>）</td>
</tr>
</tbody>
</table>
<h5 id="教学演示：部署黑马商城项目">教学演示：部署黑马商城项目</h5>
<h5 id="步骤-1：进入项目根目录">步骤 1：进入项目根目录</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~<br></code></pre></td></tr></table></figure>
<h5 id="步骤-2：清理旧容器与资源">步骤 2：清理旧容器与资源</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 强制删除所有正在运行的Docker容器</span><br><span class="hljs-built_in">sudo</span> docker <span class="hljs-built_in">rm</span> -f $(<span class="hljs-built_in">sudo</span> docker ps -qa)<br><br><span class="hljs-comment"># 删除旧的hmall镜像（若存在需更新的情况）</span><br><span class="hljs-built_in">sudo</span> docker rmi hmall<br><br><span class="hljs-comment"># 清空MySQL数据目录（如需重新初始化数据库）</span><br><span class="hljs-built_in">rm</span> -rf mysql/data<br></code></pre></td></tr></table></figure>
<h5 id="步骤-3：启动所有服务（后台运行）">步骤 3：启动所有服务（后台运行）</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> docker compose up -d<br></code></pre></td></tr></table></figure>
<p><strong>执行结果示例</strong>：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><code class="hljs tex">[+] Building 15.5s (8/8) FINISHED<br> =&gt; [internal] load build definition from Dockerfile                                    0.0s<br> =&gt; =&gt; transferring dockerfile: 358B                                                    0.0s<br> =&gt; [internal] load .dockerignore                                                       0.0s<br> =&gt; =&gt; transferring context: 2B                                                         0.0s<br> =&gt; [internal] load metadata for docker.io/library/openjdk:11.0-jre-buster             15.4s<br> =&gt; [1/3] FROM docker.io/library/openjdk:11.0-jre-buster@sha256:3546a17e6fb4ff4fa681c3  0.0s<br> =&gt; [internal] load build context                                                       0.0s<br> =&gt; =&gt; transferring context: 98B                                                        0.0s<br> =&gt; CACHED [2/3] RUN ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime <span class="hljs-built_in">&amp;</span><span class="hljs-built_in">&amp;</span> echo   0.0s<br> =&gt; CACHED [3/3] COPY hm-service.jar /app.jar                                           0.0s<br> =&gt; exporting to image                                                                  0.0s<br> =&gt; =&gt; exporting layers                                                                 0.0s<br> =&gt; =&gt; writing image sha256:32eebee16acde22550232f2eb80c69d2ce813ed099640e4cfed2193f71  0.0s<br> =&gt; =&gt; naming to docker.io/library/root-hmall                                           0.0s<br>[+] Running 4/4<br> ✔ Network hmall    Created                                                             0.2s<br> ✔ Container mysql  Started                                                             0.5s<br> ✔ Container hmall  Started                                                             0.9s<br> ✔ Container nginx  Started                                                             1.5s<br></code></pre></td></tr></table></figure>
<h5 id="步骤-4：查看镜像列表">步骤 4：查看镜像列表</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> docker compose images<br></code></pre></td></tr></table></figure>
<p><strong>执行结果示例</strong>：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><code class="hljs tex">CONTAINER           REPOSITORY          TAG                 IMAGE ID            SIZE<br>hmall               root-hmall          latest              32eebee16acd        362MB<br>mysql               mysql               latest              3218b38490ce        516MB<br>nginx               nginx               latest              605c77e624dd        141MB<br></code></pre></td></tr></table></figure>
<h5 id="步骤-5：查看运行中容器">步骤 5：查看运行中容器</h5>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> docker compose ps<br></code></pre></td></tr></table></figure>
<p><strong>执行结果示例</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">NAME                IMAGE               COMMAND                  SERVICE             CREATED             STATUS              PORTS<br>hmall               root-hmall          &quot;java -jar /app.jar&quot;     hmall               54 seconds ago      Up 52 seconds       0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp<br>mysql               mysql               &quot;docker-entrypoint.s…&quot;   mysql               54 seconds ago      Up 53 seconds       0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp<br>nginx               nginx               &quot;/docker-entrypoint.…&quot;   nginx               54 seconds ago      Up 52 seconds       80/tcp, 0.0.0.0:18080-18081-&gt;18080-18081/tcp, :::18080-18081-&gt;18080-18081/tcp<br></code></pre></td></tr></table></figure>
<h5 id="步骤-6：验证项目访问">步骤 6：验证项目访问</h5>
<p>打开浏览器，访问后端接口（将 <code>yourIp</code> 替换为 Ubuntu 主机的实际 IP 地址）：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><code class="hljs tex">http://yourIp:8080<br></code></pre></td></tr></table></figure>
<p>若能正常加载页面或返回接口数据，说明 Docker Compose 部署成功。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis-Plus</title>
    <url>/posts/67c8035e/</url>
    <content><![CDATA[<p><img src="https://a1.boltp.com/2025/09/19/68cd62dc54ff0.png" alt=""></p>
<h1>一、MyBatis-Plus 简介</h1>
<h2 id="1-1-什么是-MyBatis-Plus">1.1 什么是 MyBatis-Plus</h2>
<p>MyBatis-Plus（简称 MP）是 <strong>MyBatis 的增强工具</strong>，由 baomidou 团队开发维护，核心设计理念是 <strong>“只做增强，不做改变”</strong>—— 完全兼容 MyBatis 原生功能，不侵入现有代码，同时封装了大量重复的单表 CRUD 操作，让开发者无需手写繁琐的 SQL 或 XML 映射文件，即可快速完成业务开发。</p>
<p>正如其 slogan “TO BE THE BEST PARTNER OF MYBATIS” 所传递的，MP 并非替代 MyBatis，而是作为其 “最佳搭档” 存在。PPT 中用 “润物无声，如丝般顺滑” 形容其特性，恰是因为引入后不会对现有 MyBatis 工程产生任何干扰，原有代码可无缝衔接。</p>
<p><img src="https://a1.boltp.com/2025/09/19/68cd45631d581.png" alt=""></p>
<h2 id="1-2-核心特性">1.2 核心特性</h2>
<p>MP 的核心价值集中在 “简化开发” 与 “效率提升”，结合课程内容可归纳为以下 6 点：</p>
<ul>
<li><strong>无侵入性</strong>：基于 MyBatis 原生架构扩展，不修改 MyBatis 核心逻辑，现有工程引入后无需重构代码。</li>
<li><strong>效率至上</strong>：内置 <code>BaseMapper</code>（DAO 层）和 <code>IService</code>（Service 层）接口，封装了全量单表 CRUD 操作（新增、删除、查询、更新等），实现 “零 SQL 开发”。</li>
<li><strong>智能映射</strong>：默认遵循 “驼峰 - 下划线” 转换规则（类名→表名、变量名→字段名），默认将<code>id</code>字段作为主键，减少手动配置成本。</li>
<li><strong>灵活条件构造</strong>：提供 <code>QueryWrapper</code>、<code>LambdaQueryWrapper</code> 等条件构造器，支持动态拼接复杂 WHERE 条件，避免字符串拼接 SQL 的语法错误风险。</li>
<li><strong>丰富扩展功能</strong>：内置代码生成、逻辑删除、枚举字段映射、JSON 字段处理等高频场景工具，覆盖日常开发痛点。</li>
<li><strong>可插拔插件</strong>：支持分页、乐观锁、多租户、动态表名等插件，通过简单配置即可启用，扩展性极强。</li>
</ul>
<h2 id="1-3-支持的数据库">1.3 支持的数据库</h2>
<p>兼容所有 MyBatis 支持的关系型数据库，覆盖主流及企业级场景：</p>
<table>
<thead>
<tr>
<th>数据库类型</th>
<th>适配说明</th>
<th>典型使用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>MySQL</td>
<td>适配 5.5+ / 8.0+ 版本</td>
<td>互联网应用、中小项目</td>
</tr>
<tr>
<td>Oracle</td>
<td>支持 11g+ 版本</td>
<td>企业级系统</td>
</tr>
<tr>
<td>SQL Server</td>
<td>兼容 2008+ 版本</td>
<td>微软技术栈项目</td>
</tr>
<tr>
<td>PostgreSQL</td>
<td>支持 9.4+ 版本，适配 JSON 字段</td>
<td>开源企业级项目</td>
</tr>
<tr>
<td>SQLite</td>
<td>适配 3.7+ 版本</td>
<td>轻量级应用、嵌入式系统</td>
</tr>
<tr>
<td>DB2</td>
<td>支持 10.5+ 版本</td>
<td>大型金融、政务系统</td>
</tr>
</tbody>
</table>
<h2 id="1-4-框架结构">1.4 框架结构</h2>
<p>MP 基于 MyBatis 分层设计，整体结构清晰，可拆解为 4 个核心层级：</p>
<ol>
<li><strong>底层依赖层</strong>：依赖 MyBatis 核心包、JDBC 驱动及 Spring 生态组件（如 Spring Boot Starter），确保与 Java 主流开发环境无缝集成。</li>
<li><strong>核心功能层</strong>：MP 的 “心脏”，包含三大核心能力：
<ul>
<li>通用 CRUD 接口：<code>BaseMapper</code>（提供单表 DAO 层操作）、<code>IService</code>（提供 Service 层批量操作、逻辑封装）；</li>
<li>实体映射：基于注解（<code>@TableName</code>、<code>@TableId</code> 等）实现表与实体类的关联；</li>
<li>条件构造：<code>Wrapper</code> 家族接口，动态生成 WHERE 条件。</li>
</ul>
</li>
<li><strong>扩展功能层</strong>：针对高频需求的封装，如代码生成器（自动生成 Entity、Mapper、Service 等代码）、逻辑删除（模拟删除效果，不真正删数据）、枚举 / JSON 处理器（解决特殊字段类型映射问题）。</li>
<li><strong>插件层</strong>：基于 MyBatis 拦截器实现，提供分页（<code>PaginationInnerInterceptor</code>）、乐观锁（<code>OptimisticLockerInnerInterceptor</code>）、防止全表删除（<code>BlockAttackInnerInterceptor</code>）等插件，按需配置启用。</li>
</ol>
<h2 id="1-5-官方资源">1.5 官方资源</h2>
<ul>
<li><strong>官网</strong>：<a href="https://baomidou.com/">https://baomidou.com/</a> （核心文档、更新日志、生态工具入口，信息最权威）</li>
<li><strong>参考文档</strong>：<a href="https://mybatis.plus/%EF%BC%88%E5%90%AB%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97%E3%80%81API">https://mybatis.plus/（含详细配置指南、API</a> 说明、案例教程）</li>
<li><strong>GitHub 仓库</strong>：<a href="https://github.com/baomidou/mybatis-plus">https://github.com/baomidou/mybatis-plus</a> （源码地址、issue 反馈、贡献指南）</li>
</ul>
<h1>二、MyBatis-Plus 快速入门</h1>
<h2 id="2-1-环境准备">2.1 环境准备</h2>
<h3 id="2-1-1-数据库初始化">2.1.1 数据库初始化</h3>
<p>导入课前提供的<code>mp.sql</code>脚本，创建<code>mp</code>数据库及 3 张核心表，表结构与核心数据如下：</p>
<table>
<thead>
<tr>
<th>表名</th>
<th>作用</th>
<th>核心字段说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>user</code></td>
<td>核心用户表</td>
<td><code>id</code>(主键)、<code>username</code>(用户名)、<code>info</code>(JSON 详情)、<code>status</code>(状态)、<code>balance</code>(余额)</td>
</tr>
<tr>
<td><code>address</code></td>
<td>用户地址表</td>
<td><code>id</code>、<code>user_id</code>(外键关联 <a href="http://user.id">user.id</a>)、<code>province</code>(省)、<code>city</code>(市)、<code>is_default</code>(默认地址)</td>
</tr>
<tr>
<td><code>tb_user</code></td>
<td>注解测试专用表</td>
<td><code>user_id</code>(主键)、<code>username</code>、<code>is_deleted</code>(逻辑删除标记)、<code>order</code>(排序字段)</td>
</tr>
</tbody>
</table>
<p><strong>核心表结构示例（user 表）</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE TABLE</span> `<span class="hljs-keyword">user</span>` (<br>	`id` <span class="hljs-type">BIGINT</span>(<span class="hljs-number">19</span>) <span class="hljs-keyword">NOT NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;用户id&#x27;</span>,<br>	`username` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT NULL</span> COMMENT <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>	`password` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">NOT NULL</span> COMMENT <span class="hljs-string">&#x27;密码&#x27;</span>,<br>	`phone` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;注册手机号&#x27;</span>,<br>	`info` JSON <span class="hljs-keyword">NOT NULL</span> COMMENT <span class="hljs-string">&#x27;详细信息&#x27;</span>,<br>	`status` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;1&#x27;</span> COMMENT <span class="hljs-string">&#x27;使用状态（1正常 2冻结）&#x27;</span>,<br>	`balance` <span class="hljs-type">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;账户余额&#x27;</span>,<br>	`create_time` DATETIME <span class="hljs-keyword">NOT NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>	`update_time` DATETIME <span class="hljs-keyword">NOT NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> <span class="hljs-keyword">ON</span> <span class="hljs-keyword">UPDATE</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>	<span class="hljs-keyword">PRIMARY KEY</span> (`id`) <span class="hljs-keyword">USING</span> BTREE,<br>	<span class="hljs-keyword">UNIQUE</span> INDEX `username` (`username`) <span class="hljs-keyword">USING</span> BTREE<br>) COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;用户表&#x27;</span>;<br></code></pre></td></tr></table></figure>
<h3 id="2-1-2-项目导入与配置">2.1.2 项目导入与配置</h3>
<ol>
<li><strong>导入项目</strong>：加载<code>mp-demo</code>项目结构，确保核心包路径为<code>com.itheima.mp</code>（含<code>domain.po</code>、<code>mapper</code>等子包）。</li>
<li><strong>配置数据库连接</strong>：修改<code>application.yaml</code>中的 JDBC 参数，适配本地数据库环境：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3307/mp?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>  <span class="hljs-comment"># 替换为本地用户名</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span>  <span class="hljs-comment"># 替换为本地密码</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">com.itheima:</span> <span class="hljs-string">debug</span>  <span class="hljs-comment"># 打印SQL日志，便于调试</span><br>  <span class="hljs-attr">pattern:</span><br>    <span class="hljs-attr">dateformat:</span> <span class="hljs-string">HH:mm:ss</span><br></code></pre></td></tr></table></figure>
<h2 id="2-2-MyBatis-项目改造为-MyBatis-Plus">2.2 MyBatis 项目改造为 MyBatis-Plus</h2>
<p>基于现有 MyBatis 项目，通过 3 步改造即可实现<code>user</code>表的 CRUD 功能，核心是利用 MP 的<code>BaseMapper</code>省去手动编写 SQL 的工作。</p>
<h3 id="2-2-1-步骤-1：替换依赖">2.2.1 步骤 1：替换依赖</h3>
<p>MP 提供了 Spring Boot Starter，集成了 MyBatis 核心功能并实现自动装配，直接替换原 MyBatis 依赖：</p>
<h4 id="Spring-Boot-2-x-依赖">Spring Boot 2.x 依赖</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- MyBatis-Plus Starter（替换mybatis-spring-boot-starter） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 其他必要依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h4 id="Spring-Boot-3-x-依赖">Spring Boot 3.x 依赖</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-spring-boot3-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h3 id="2-2-2-步骤-2：配置-Mapper-扫描">2.2.2 步骤 2：配置 Mapper 扫描</h3>
<p>在 Spring Boot 启动类上添加<code>@MapperScan</code>注解，指定 Mapper 接口所在包：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@MapperScan(&quot;com.itheima.mp.mapper&quot;)</span>  <span class="hljs-comment">// 扫描Mapper接口</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MpDemoApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(MpDemoApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="2-2-3-步骤-3：定义-Mapper-接口（核心改造）">2.2.3 步骤 3：定义 Mapper 接口（核心改造）</h3>
<p>MP 的<code>BaseMapper</code>接口已封装所有单表 CRUD 方法，只需让自定义 Mapper 继承它即可，无需编写 XML 映射文件。</p>
<p><img src="https://a1.boltp.com/2025/09/19/68cd2f3da98a1.png" alt=""></p>
<h4 id="改造前（MyBatis）">改造前（MyBatis）</h4>
<p>需手动定义 CRUD 方法及 XML：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Mapper接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">(User user)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(Long id)</span>;<br>    User <span class="hljs-title function_">queryUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> Long id)</span>;<br>    List&lt;User&gt; <span class="hljs-title function_">queryUserByIds</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;ids&quot;)</span> List&lt;Long&gt; ids)</span>;<br>&#125;<br><br><span class="hljs-comment">// 对应的XML映射文件（需编写大量SQL）</span><br>&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;!DOCTYPE mapper PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;<br>&lt;mapper namespace=<span class="hljs-string">&quot;com.itheima.mp.mapper.UserMapper&quot;</span>&gt;<br>    &lt;insert id=<span class="hljs-string">&quot;saveUser&quot;</span> parameterType=<span class="hljs-string">&quot;com.itheima.mp.domain.po.User&quot;</span>&gt;<br>        INSERT INTO `user` (`id`, `username`, `password`) VALUES (#&#123;id&#125;, #&#123;username&#125;, #&#123;password&#125;);<br>    &lt;/insert&gt;<br>    &lt;!-- 省略其他UPDATE/DELETE/SELECT标签 --&gt;<br>&lt;/mapper&gt;<br></code></pre></td></tr></table></figure>
<h4 id="改造后（MyBatis-Plus）">改造后（MyBatis-Plus）</h4>
<p>仅需继承<code>BaseMapper</code>，零 SQL 实现 CRUD：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.itheima.mp.domain.po.User;<br><br><span class="hljs-comment">// 继承BaseMapper，泛型指定PO实体类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>    <span class="hljs-comment">// 无需手动写任何方法，BaseMapper已全部封装</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="2-2-4-改造效果测试">2.2.4 改造效果测试</h3>
<p>通过单元测试验证 MP 的 CRUD 能力，对比 MyBatis 实现，代码量大幅减少：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisPlusUserMapperTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-comment">// 新增用户</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(<span class="hljs-number">5L</span>);<br>        user.setUsername(<span class="hljs-string">&quot;Lucy&quot;</span>);<br>        user.setPassword(<span class="hljs-string">&quot;123&quot;</span>);<br>        user.setInfo(<span class="hljs-string">&quot;&#123;\&quot;age\&quot;: 24, \&quot;intro\&quot;: \&quot;英文老师\&quot;, \&quot;gender\&quot;: \&quot;female\&quot;&#125;&quot;</span>);<br>        userMapper.insert(user);  <span class="hljs-comment">// MP自带方法</span><br>    &#125;<br><br>    <span class="hljs-comment">// 根据ID查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectById</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectById(<span class="hljs-number">5L</span>);  <span class="hljs-comment">// MP自带方法</span><br>        System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br>    &#125;<br><br>    <span class="hljs-comment">// 批量查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectByIds</span><span class="hljs-params">()</span> &#123;<br>        List&lt;User&gt; users = userMapper.selectBatchIds(List.of(<span class="hljs-number">1L</span>, <span class="hljs-number">2L</span>, <span class="hljs-number">3L</span>));  <span class="hljs-comment">// MP自带方法</span><br>        users.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">// 更新用户</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateById</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(<span class="hljs-number">5L</span>);<br>        user.setBalance(<span class="hljs-number">20000</span>);<br>        userMapper.updateById(user);  <span class="hljs-comment">// MP自带方法</span><br>    &#125;<br><br>    <span class="hljs-comment">// 删除用户</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDelete</span><span class="hljs-params">()</span> &#123;<br>        userMapper.deleteById(<span class="hljs-number">5L</span>);  <span class="hljs-comment">// MP自带方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>SQL 日志示例</strong>（MP 自动生成标准 SQL，避免<code>SELECT *</code>）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">11:54:23 DEBUG c.i.mp.mapper.UserMapper.selectBatchIds  : ==&gt;  Preparing: SELECT id,username,password,phone,info,status,balance,create_time,update_time FROM user WHERE id IN ( ? , ? , ? )<br>11:54:23 DEBUG c.i.mp.mapper.UserMapper.selectBatchIds  : ==&gt; Parameters: 1(Long), 2(Long), 3(Long)<br>11:54:23 DEBUG c.i.mp.mapper.UserMapper.selectBatchIds  : &lt;==      Total: 3<br></code></pre></td></tr></table></figure>
<h2 id="2-3-常见注解">2.3 常见注解</h2>
<p>MP 通过反射推断 PO 与数据库表的映射关系，但默认约定（类名驼峰转表名、<code>id</code>为主键等）可能与实际不符，需通过注解手动声明映射规则。</p>
<h3 id="2-3-1-核心注解说明">2.3.1 核心注解说明</h3>
<h4 id="1-TableName：指定表名">1. @TableName：指定表名</h4>
<p>当 PO 类名与数据库表名不一致时使用，标识实体类对应的表。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>value</code></td>
<td>表名</td>
<td><code>@TableName(&quot;tb_user&quot;)</code></td>
</tr>
<tr>
<td><code>autoResultMap</code></td>
<td>自动构建 ResultMap（适配 JSON 等特殊字段）</td>
<td><code>@TableName(value=&quot;tb_user&quot;, autoResultMap=true)</code></td>
</tr>
</tbody>
</table>
<h4 id="2-TableId：指定主键">2. @TableId：指定主键</h4>
<p>标识实体类的主键字段，支持自定义主键策略。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>value</code></td>
<td>主键字段名（与 PO 不一致时）</td>
<td><code>@TableId(&quot;user_id&quot;)</code></td>
</tr>
<tr>
<td><code>type</code></td>
<td>主键生成策略</td>
<td><code>@TableId(type = IdType.AUTO)</code></td>
</tr>
</tbody>
</table>
<p><strong>主键策略（IdType 枚举核心值）</strong>：</p>
<ul>
<li><code>AUTO</code>：数据库自增（需表主键设置自增）</li>
<li><code>ASSIGN_ID</code>：雪花算法生成全局唯一 Long 型 ID（默认策略）</li>
<li><code>INPUT</code>：手动设置主键值</li>
</ul>
<h4 id="3-TableField：指定普通字段">3. @TableField：指定普通字段</h4>
<p>解决字段名不一致、关键字冲突、非数据库字段等问题，常见场景：</p>
<table>
<thead>
<tr>
<th>场景</th>
<th>解决方案</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>字段名不一致</td>
<td>指定<code>value</code>属性对应数据库字段</td>
<td><code>@TableField(&quot;username&quot;) private String name;</code></td>
</tr>
<tr>
<td>字段名含关键字（如<code>order</code>）</td>
<td>用`转义</td>
<td><code>@TableField(&quot;</code>order<code>&quot;) private Integer order;</code></td>
</tr>
<tr>
<td>字段非数据库表字段</td>
<td>设置<code>exist=false</code></td>
<td><code>@TableField(exist = false) private String address;</code></td>
</tr>
<tr>
<td>布尔字段以<code>is</code>开头（如<code>isDeleted</code>）</td>
<td>避免 JavaBean 解析丢失<code>is</code></td>
<td><code>@TableField(&quot;is_deleted&quot;) private Boolean isDeleted;</code></td>
</tr>
</tbody>
</table>
<h3 id="2-3-2-注解使用案例">2.3.2 注解使用案例</h3>
<p>以<code>tb_user</code>表（注解测试表）为例，实现 PO 与表的完整映射：</p>
<h4 id="1-定义-PO-实体类（MpUser）">1. 定义 PO 实体类（MpUser）</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.*;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;tb_user&quot;)</span>  <span class="hljs-comment">// 指定表名为tb_user（与类名MpUser不一致）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MpUser</span> &#123;<br>    <span class="hljs-comment">// 主键：表字段为user_id，策略为数据库自增</span><br>    <span class="hljs-meta">@TableId(value = &quot;user_id&quot;, type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-comment">// 普通字段：PO属性name对应表字段username</span><br>    <span class="hljs-meta">@TableField(&quot;username&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">// 普通字段：与表字段一致，无需注解</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-comment">// 布尔字段：isDeleted对应表字段is_deleted</span><br>    <span class="hljs-meta">@TableField(&quot;is_deleted&quot;)</span><br>    <span class="hljs-keyword">private</span> Boolean isDeleted;<br><br>    <span class="hljs-comment">// 关键字字段：order对应表字段`order`（转义）</span><br>    <span class="hljs-meta">@TableField(&quot;`order`&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer order;<br><br>    <span class="hljs-comment">// 非数据库字段：不参与映射</span><br>    <span class="hljs-meta">@TableField(exist = false)</span><br>    <span class="hljs-keyword">private</span> String address;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="2-测试注解效果">2. 测试注解效果</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MpUserMapperTests</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MpUserMapper mpUserMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MpUser</span> <span class="hljs-variable">mpUser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MpUser</span>();<br>        mpUser.setName(<span class="hljs-string">&quot;MP用户1&quot;</span>);  <span class="hljs-comment">// 对应username字段</span><br>        mpUser.setOrder(<span class="hljs-number">1</span>);  <span class="hljs-comment">// 自动转义为`order`</span><br>        mpUser.setAddress(<span class="hljs-string">&quot;测试地址&quot;</span>);  <span class="hljs-comment">// 非数据库字段，不插入</span><br>        mpUserMapper.insert(mpUser);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectById</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MpUser</span> <span class="hljs-variable">mpUser</span> <span class="hljs-operator">=</span> mpUserMapper.selectById(<span class="hljs-number">1L</span>);<br>        System.out.println(mpUser);  <span class="hljs-comment">// address字段为null，不参与查询</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="2-4-常见配置">2.4 常见配置</h2>
<p>MP 支持通过<code>application.yaml</code>自定义全局配置，覆盖默认行为，核心配置项如下：</p>
<h3 id="2-4-1-核心配置示例">2.4.1 核心配置示例</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-comment"># 1. 别名扫描：给PO包注册别名，XML中可直接用类名</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.itheima.mp.domain.po</span><br>  <span class="hljs-comment"># 2. Mapper XML路径：自定义SQL需配置（默认classpath*:/mapper/**/*.xml）</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">&quot;classpath*:/mapper/**/*.xml&quot;</span><br>  <span class="hljs-comment"># 3. MyBatis原生配置</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">map-underscore-to-camel-case:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 驼峰-下划线映射（默认开启）</span><br>    <span class="hljs-attr">cache-enabled:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 关闭二级缓存（按需开启）</span><br>  <span class="hljs-comment"># 4. MP全局配置</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">id-type:</span> <span class="hljs-string">assign_id</span>  <span class="hljs-comment"># 全局主键策略：雪花算法（默认）</span><br>      <span class="hljs-attr">update-strategy:</span> <span class="hljs-string">not_null</span>  <span class="hljs-comment"># 更新策略：只更新非null字段（默认）</span><br>      <span class="hljs-attr">table-prefix:</span> <span class="hljs-string">tb_</span>  <span class="hljs-comment"># 表名前缀（如PO类User对应tb_user表，可省略@TableName）</span><br></code></pre></td></tr></table></figure>
<h3 id="2-4-2-关键配置说明">2.4.2 关键配置说明</h3>
<table>
<thead>
<tr>
<th>配置项</th>
<th>作用</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>type-aliases-package</code></td>
<td>PO 类别名扫描包，XML 中可简化类名引用</td>
<td>无（需手动指定）</td>
</tr>
<tr>
<td><code>mapper-locations</code></td>
<td>Mapper XML 文件路径，多模块用 classpath*:</td>
<td>classpath*:/mapper/**/*.xml</td>
</tr>
<tr>
<td><code>map-underscore-to-camel-case</code></td>
<td>字段驼峰（PO）与下划线（表）自动映射</td>
<td>true（建议保持开启）</td>
</tr>
<tr>
<td><code>id-type</code></td>
<td>全局主键策略</td>
<td>assign_id（雪花算法）</td>
</tr>
<tr>
<td><code>update-strategy</code></td>
<td>更新字段策略</td>
<td>not_null（只更非 null 字段）</td>
</tr>
<tr>
<td><code>table-prefix</code></td>
<td>表名前缀，统一添加避免重复注解</td>
<td>无</td>
</tr>
</tbody>
</table>
<h3 id="2-4-3-配置优先级">2.4.3 配置优先级</h3>
<p>局部注解 &gt; 全局配置，例如：全局配置<code>id-type: auto</code>，但某 PO 的主键注解为<code>@TableId(type = IdType.ASSIGN_ID)</code>，则该 PO 优先使用雪花算法。</p>
<h1>三、MyBatis-Plus 核心功能</h1>
<p>在基础 CRUD 操作之上，MyBatis-Plus 提供了三大核心能力来适配复杂业务场景：<strong>条件构造器</strong>解决动态筛选问题，<strong>自定义 SQL</strong> 适配特殊逻辑与多表场景，<strong>IService 接口</strong>封装 Service 层模板方法。三者结合可大幅提升开发效率，同时保留灵活性。</p>
<h2 id="3-1-条件构造器：动态-SQL-优雅实现">3.1 条件构造器：动态 SQL 优雅实现</h2>
<p>基础 CRUD 依赖 ID 作为条件，但实际业务中往往需要更复杂的筛选逻辑（如多字段组合查询、范围查询等）。MyBatis-Plus 提供的 <strong>条件构造器（Wrapper）</strong> 正是为解决这类问题而生，它能动态拼接 WHERE 条件，无需手动编写 SQL 语句。</p>
<h3 id="3-1-1-Wrapper-体系结构">3.1.1 Wrapper 体系结构</h3>
<p>Wrapper 是条件构造的核心抽象类，其设计采用了分层继承模式，不同子类对应不同场景的条件构造需求。</p>
<h4 id="继承关系">继承关系</h4>
<p><img src="https://a1.boltp.com/2025/09/19/68cd4933822a2.png" alt="image.png"></p>
<h4 id="核心类作用">核心类作用</h4>
<ul>
<li>
<p><strong>AbstractWrapper</strong>：提供所有 WHERE 条件的基础方法（如 <code>eq</code> 等于、<code>like</code> 模糊查询、<code>ge</code> 大于等于等）。</p>
<p><img src="https://a1.boltp.com/2025/09/19/68cd47764cb68.png" alt=""></p>
</li>
<li>
<p><strong>QueryWrapper</strong>：在 AbstractWrapper 基础上增加 <code>select()</code> 方法，可指定查询字段（避免 <code>SELECT *</code>）。</p>
<p><img src="https://a1.boltp.com/2025/09/19/68cd49937687b.png" alt=""></p>
</li>
<li>
<p><strong>UpdateWrapper</strong>：在 AbstractWrapper 基础上增加 <code>set()</code> 和 <code>setSql()</code> 方法，支持复杂更新（如基于字段现有值的计算）。</p>
<p><img src="https://a1.boltp.com/2025/09/19/68cd47c8470c1.png" alt=""></p>
</li>
<li>
<p><strong>LambdaXXXWrapper</strong>：通过 Lambda 表达式引用实体类方法（如 <code>User::getUsername</code>），避免直接写字符串字段名，减少拼写错误。</p>
</li>
</ul>
<h3 id="3-1-2-QueryWrapper：查询与简单更新-删除">3.1.2 QueryWrapper：查询与简单更新 / 删除</h3>
<p>QueryWrapper 是最常用的条件构造器，适用于 <strong>查询、删除、简单更新</strong> 场景，可通过链式调用拼接复杂 WHERE 条件。</p>
<h4 id="1-复杂查询示例">1. 复杂查询示例</h4>
<p><strong>需求</strong>：查询用户名中包含 “o”、余额大于等于 1000 元的用户，只返回 id、username、info、balance 字段。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryWrapperSelect</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1. 构建查询条件：WHERE username LIKE &quot;%o%&quot; AND balance &gt;= 1000</span><br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    <span class="hljs-comment">// 指定查询字段（避免SELECT *）</span><br>    queryWrapper.select(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;info&quot;</span>, <span class="hljs-string">&quot;balance&quot;</span>)<br>                <span class="hljs-comment">// 模糊查询：username LIKE &quot;%o%&quot;</span><br>                .like(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;o&quot;</span>)<br>                <span class="hljs-comment">// 大于等于：balance &gt;= 1000</span><br>                .ge(<span class="hljs-string">&quot;balance&quot;</span>, <span class="hljs-number">1000</span>);<br>  <br>    <span class="hljs-comment">// 2. 执行查询</span><br>    List&lt;User&gt; userList = userMapper.selectList(queryWrapper);<br>    userList.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>生成的 SQL</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> id,username,info,balance <br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <br><span class="hljs-keyword">WHERE</span> username <span class="hljs-keyword">LIKE</span> ? <span class="hljs-keyword">AND</span> balance <span class="hljs-operator">&gt;=</span> ? <br><span class="hljs-comment">-- 参数：%o%（String）、1000（Integer）</span><br></code></pre></td></tr></table></figure>
<h4 id="2-基于条件的更新">2. 基于条件的更新</h4>
<p><strong>需求</strong>：将用户名为 “Jack” 的用户余额更新为 2000 元。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryWrapperUpdate</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1. 准备更新数据（非null字段会被设置到SET中）</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setBalance(<span class="hljs-number">2000</span>);<br>  <br>    <span class="hljs-comment">// 2. 构建条件：WHERE username = &quot;Jack&quot;</span><br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;()<br>        .eq(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;Jack&quot;</span>); <span class="hljs-comment">// 等于条件</span><br>  <br>    <span class="hljs-comment">// 3. 执行更新（WHERE条件由queryWrapper决定，SET字段由user非null值决定）</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> userMapper.update(user, queryWrapper);<br>    System.out.println(<span class="hljs-string">&quot;更新成功：&quot;</span> + (rows &gt; <span class="hljs-number">0</span>));<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>生成的 SQL</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">user</span> <br><span class="hljs-keyword">SET</span> balance<span class="hljs-operator">=</span>? <br><span class="hljs-keyword">WHERE</span> username <span class="hljs-operator">=</span> ? <br><span class="hljs-comment">-- 参数：2000（Integer）、Jack（String）</span><br></code></pre></td></tr></table></figure>
<h4 id="3-基于条件的删除">3. 基于条件的删除</h4>
<p><strong>需求</strong>：删除状态为 “冻结”（status=2）且余额为 0 的用户。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryWrapperDelete</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1. 构建条件：WHERE status = 2 AND balance = 0</span><br>    QueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;()<br>        .eq(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-number">2</span>)<br>        .eq(<span class="hljs-string">&quot;balance&quot;</span>, <span class="hljs-number">0</span>);<br>  <br>    <span class="hljs-comment">// 2. 执行删除</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> userMapper.delete(queryWrapper);<br>    System.out.println(<span class="hljs-string">&quot;删除成功：&quot;</span> + (rows &gt; <span class="hljs-number">0</span>));<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>生成的 SQL</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <br><span class="hljs-keyword">WHERE</span> status <span class="hljs-operator">=</span> ? <span class="hljs-keyword">AND</span> balance <span class="hljs-operator">=</span> ? <br><span class="hljs-comment">-- 参数：2（Integer）、0（Integer）</span><br></code></pre></td></tr></table></figure>
<h3 id="3-1-3-UpdateWrapper：复杂更新场景">3.1.3 UpdateWrapper：复杂更新场景</h3>
<p>当更新操作需要 <strong>基于字段现有值计算</strong>（如 <code>balance = balance - 200</code>）时，QueryWrapper 无法满足需求，需使用 UpdateWrapper 的 <code>setSql()</code> 方法直接编写 SET 语句片段。</p>
<h4 id="1-基于字段现有值的更新">1. 基于字段现有值的更新</h4>
<p><strong>需求</strong>：给 id 为 1、2、4 的用户余额扣除 200 元（<code>balance = balance - 200</code>）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateWrapper</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1. 准备条件：WHERE id IN (1, 2, 4)</span><br>    List&lt;Long&gt; ids = List.of(<span class="hljs-number">1L</span>, <span class="hljs-number">2L</span>, <span class="hljs-number">4L</span>);<br>  <br>    <span class="hljs-comment">// 2. 构建更新条件与SET语句</span><br>    UpdateWrapper&lt;User&gt; updateWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateWrapper</span>&lt;User&gt;()<br>        <span class="hljs-comment">// 直接编写SET片段：balance = balance - 200</span><br>        .setSql(<span class="hljs-string">&quot;balance = balance - 200&quot;</span>)<br>        <span class="hljs-comment">// WHERE条件：id IN (1,2,4)</span><br>        .in(<span class="hljs-string">&quot;id&quot;</span>, ids);<br>  <br>    <span class="hljs-comment">// 3. 执行更新（无需传递User对象，SET语句由updateWrapper定义）</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> userMapper.update(<span class="hljs-literal">null</span>, updateWrapper);<br>    System.out.println(<span class="hljs-string">&quot;更新成功：&quot;</span> + (rows &gt; <span class="hljs-number">0</span>));<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>生成的 SQL</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">user</span> <br><span class="hljs-keyword">SET</span> balance <span class="hljs-operator">=</span> balance <span class="hljs-operator">-</span> <span class="hljs-number">200</span> <br><span class="hljs-keyword">WHERE</span> id <span class="hljs-keyword">IN</span> (?, ?, ?) <br><span class="hljs-comment">-- 参数：1（Long）、2（Long）、4（Long）</span><br></code></pre></td></tr></table></figure>
<h4 id="2-组合更新（SET-多字段）">2. 组合更新（SET 多字段）</h4>
<p><strong>需求</strong>：给 “Jack” 的余额增加 500 元，同时将状态改为 “正常”（status=1）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateWrapperComplex</span><span class="hljs-params">()</span> &#123;<br>    UpdateWrapper&lt;User&gt; updateWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateWrapper</span>&lt;User&gt;()<br>        <span class="hljs-comment">// SET balance = balance + 500, status = 1</span><br>        .setSql(<span class="hljs-string">&quot;balance = balance + 500&quot;</span>)<br>        .set(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-number">1</span>) <span class="hljs-comment">// 简单赋值也可使用set()</span><br>        <span class="hljs-comment">// WHERE username = &quot;Jack&quot;</span><br>        .eq(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;Jack&quot;</span>);<br>  <br>    <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> userMapper.update(<span class="hljs-literal">null</span>, updateWrapper);<br>    System.out.println(<span class="hljs-string">&quot;更新成功：&quot;</span> + (rows &gt; <span class="hljs-number">0</span>));<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>生成的 SQL</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">user</span> <br><span class="hljs-keyword">SET</span> balance <span class="hljs-operator">=</span> balance <span class="hljs-operator">+</span> <span class="hljs-number">500</span>, status <span class="hljs-operator">=</span> ? <br><span class="hljs-keyword">WHERE</span> username <span class="hljs-operator">=</span> ? <br><span class="hljs-comment">-- 参数：1（Integer）、Jack（String）</span><br></code></pre></td></tr></table></figure>
<h3 id="3-1-4-Lambda-条件构造器：避免硬编码">3.1.4 Lambda 条件构造器：避免硬编码</h3>
<p>普通 Wrapper 在构造条件时需要手动输入字段名（如 <code>&quot;username&quot;</code>），存在 <strong>字符串硬编码</strong> 问题（拼写错误不会在编译期报错）。Lambda 条件构造器通过 <strong>方法引用</strong> 解决这一问题，让字段名与实体类属性强关联。</p>
<h4 id="1-LambdaQueryWrapper-示例">1. LambdaQueryWrapper 示例</h4>
<p><strong>需求</strong>：查询年龄大于 20 岁（从 info 字段的 JSON 中解析）、状态为正常（status=1）的用户。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testLambdaQueryWrapper</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1. 构建Lambda查询条件（使用User::getXxx方法引用）</span><br>    LambdaQueryWrapper&lt;User&gt; lambdaQueryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>    <span class="hljs-comment">// WHERE status = 1 AND username LIKE &quot;%o%&quot;</span><br>    lambdaQueryWrapper.eq(User::getStatus, <span class="hljs-number">1</span>)<br>                      .like(User::getUsername, <span class="hljs-string">&quot;o&quot;</span>);<br>  <br>    <span class="hljs-comment">// 2. 执行查询</span><br>    List&lt;User&gt; userList = userMapper.selectList(lambdaQueryWrapper);<br>    userList.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>优势</strong>：若误写为 <code>User::getUsernam</code>（少个 e），编译期会直接报错，避免运行时因字段名错误导致的 SQL 异常。</p>
<h4 id="2-LambdaUpdateWrapper-示例">2. LambdaUpdateWrapper 示例</h4>
<p><strong>需求</strong>：将 id 为 3 的用户余额翻倍（<code>balance = balance * 2</code>），并更新修改时间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testLambdaUpdateWrapper</span><span class="hljs-params">()</span> &#123;<br>    LambdaUpdateWrapper&lt;User&gt; lambdaUpdateWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaUpdateWrapper</span>&lt;&gt;();<br>    <span class="hljs-comment">// SET balance = balance * 2, update_time = NOW()</span><br>    lambdaUpdateWrapper.setSql(<span class="hljs-string">&quot;balance = balance * 2&quot;</span>)<br>                       .set(User::getUpdateTime, LocalDateTime.now())<br>                       <span class="hljs-comment">// WHERE id = 3</span><br>                       .eq(User::getId, <span class="hljs-number">3L</span>);<br>  <br>    <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> userMapper.update(<span class="hljs-literal">null</span>, lambdaUpdateWrapper);<br>    System.out.println(<span class="hljs-string">&quot;更新成功：&quot;</span> + (rows &gt; <span class="hljs-number">0</span>));<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>生成的 SQL</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">user</span> <br><span class="hljs-keyword">SET</span> balance <span class="hljs-operator">=</span> balance <span class="hljs-operator">*</span> <span class="hljs-number">2</span>, update_time <span class="hljs-operator">=</span> ? <br><span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> ? <br><span class="hljs-comment">-- 参数：2024-11-13T15:30:00（LocalDateTime）、3（Long）</span><br></code></pre></td></tr></table></figure>
<h3 id="3-1-5-常用条件方法速查表">3.1.5 常用条件方法速查表</h3>
<p>AbstractWrapper 提供了丰富的条件方法，覆盖 SQL 中所有常见的 WHERE 子句语法，以下是高频使用的方法：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
<th>示例</th>
<th>对应的 SQL 片段</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>eq</code></td>
<td>等于（=）</td>
<td><code>eq(&quot;name&quot;, &quot;Jack&quot;)</code></td>
<td><code>name = 'Jack'</code></td>
</tr>
<tr>
<td><code>ne</code></td>
<td>不等于（≠）</td>
<td><code>ne(&quot;status&quot;, 0)</code></td>
<td><code>status != 0</code></td>
</tr>
<tr>
<td><code>like</code></td>
<td>模糊查询（% 值 %）</td>
<td><code>like(&quot;username&quot;, &quot;o&quot;)</code></td>
<td><code>username LIKE '%o%'</code></td>
</tr>
<tr>
<td><code>likeLeft</code></td>
<td>左模糊（% 值）</td>
<td><code>likeLeft(&quot;phone&quot;, &quot;139&quot;)</code></td>
<td><code>phone LIKE '%139'</code></td>
</tr>
<tr>
<td><code>likeRight</code></td>
<td>右模糊（值 %）</td>
<td><code>likeRight(&quot;email&quot;, &quot;test&quot;)</code></td>
<td><code>email LIKE 'test%'</code></td>
</tr>
<tr>
<td><code>gt</code></td>
<td>大于（&gt;）</td>
<td><code>gt(&quot;balance&quot;, 1000)</code></td>
<td><code>balance &gt; 1000</code></td>
</tr>
<tr>
<td><code>ge</code></td>
<td>大于等于（≥）</td>
<td><code>ge(&quot;age&quot;, 18)</code></td>
<td><code>age &gt;= 18</code></td>
</tr>
<tr>
<td><code>lt</code></td>
<td>小于（&lt;）</td>
<td><code>lt(&quot;score&quot;, 60)</code></td>
<td><code>score &lt; 60</code></td>
</tr>
<tr>
<td><code>le</code></td>
<td>小于等于（≤）</td>
<td><code>le(&quot;level&quot;, 3)</code></td>
<td><code>level &lt;= 3</code></td>
</tr>
<tr>
<td><code>in</code></td>
<td>包含在集合中</td>
<td><code>in(&quot;id&quot;, 1, 2, 3)</code></td>
<td><code>id IN (1,2,3)</code></td>
</tr>
<tr>
<td><code>notIn</code></td>
<td>不包含在集合中</td>
<td><code>notIn(&quot;status&quot;, 0, 2)</code></td>
<td><code>status NOT IN (0,2)</code></td>
</tr>
<tr>
<td><code>between</code></td>
<td>在范围内（闭区间）</td>
<td><code>between(&quot;create_time&quot;, &quot;2023-01-01&quot;, &quot;2023-12-31&quot;)</code></td>
<td><code>create_time BETWEEN '2023-01-01' AND '2023-12-31'</code></td>
</tr>
<tr>
<td><code>isNull</code></td>
<td>字段为 NULL</td>
<td><code>isNull(&quot;email&quot;)</code></td>
<td><code>email IS NULL</code></td>
</tr>
<tr>
<td><code>isNotNull</code></td>
<td>字段不为 NULL</td>
<td><code>isNotNull(&quot;phone&quot;)</code></td>
<td><code>phone IS NOT NULL</code></td>
</tr>
<tr>
<td><code>and</code></td>
<td>拼接 AND 条件（嵌套）</td>
<td><code>and(w -&gt; w.gt(&quot;balance&quot;, 1000).lt(&quot;balance&quot;, 5000))</code></td>
<td><code>AND (balance &gt; 1000 AND balance &lt; 5000)</code></td>
</tr>
<tr>
<td><code>or</code></td>
<td>拼接 OR 条件（嵌套）</td>
<td><code>or(w -&gt; w.eq(&quot;status&quot;, 1).or().eq(&quot;status&quot;, 3))</code></td>
<td><code>OR (status = 1 OR status = 3)</code></td>
</tr>
</tbody>
</table>
<h3 id="3-1-6-条件构造器使用总结">3.1.6 条件构造器使用总结</h3>
<ol>
<li><strong>场景选择</strong>：
<ul>
<li>简单查询 / 更新 / 删除：优先使用 <code>LambdaQueryWrapper</code>（避免硬编码）。</li>
<li>复杂更新（如基于字段计算）：使用 <code>LambdaUpdateWrapper</code>。</li>
<li>特殊场景（如多表联查需手动写 SQL）：可混合使用 Wrapper 和 XML 映射。</li>
</ul>
</li>
<li><strong>最佳实践</strong>：
<ul>
<li>始终优先使用 Lambda 版本（<code>LambdaQueryWrapper</code>/<code>LambdaUpdateWrapper</code>），减少字段名拼写错误。</li>
<li>复杂条件使用 <code>and()</code>/<code>or()</code> 嵌套，避免长链式调用导致的可读性问题。</li>
<li>多表查询时，Wrapper 仅负责单表条件，关联条件仍需在 XML 中编写。</li>
</ul>
</li>
</ol>
<p>通过条件构造器，MyBatis-Plus 实现了动态 SQL 的优雅处理，既保留了 MyBatis 的灵活性，又简化了重复代码，大幅提升了复杂查询场景的开发效率。</p>
<h2 id="3-2-自定义-SQL-与-IService-接口：分层开发效率提升">3.2 自定义 SQL 与 IService 接口：分层开发效率提升</h2>
<p>在基础 CRUD 和条件构造的基础上，MyBatis-Plus 进一步通过 <strong>自定义 SQL</strong> 解决复杂场景（如多表联查、特殊更新），通过 <strong>IService 接口</strong> 封装 Service 层模板方法，实现 “分层开发” 与 “效率提升” 的结合。</p>
<h3 id="3-2-1-自定义-SQL：适配特殊逻辑与多表场景">3.2.1 自定义 SQL：适配特殊逻辑与多表场景</h3>
<p>MyBatis-Plus 虽能覆盖大部分单表场景，但面对 <strong>特殊 SQL 逻辑</strong>（如字段自增 / 自减）或 <strong>多表联查</strong> 时，需结合 “Wrapper 生成条件 + 自定义 SQL 片段” 的方式，既保留动态条件的灵活性，又将 SQL 维护在持久层。</p>
<h4 id="1-核心场景：避免-SQL-硬编码到业务层">1. 核心场景：避免 SQL 硬编码到业务层</h4>
<h5 id="问题引出">问题引出</h5>
<p>使用 <code>UpdateWrapper</code> 时，若直接在 Service 层编写 <code>setSql(&quot;balance = balance - 200&quot;)</code>，会导致 <strong>SQL 片段散落在业务层</strong>，违背 “持久层维护 SQL” 的开发规范。此外，复杂条件（如动态 <code>IN</code> 语句）若纯手写 XML，需编写繁琐的 <code>&lt;foreach&gt;</code> 标签，易出错。</p>
<h5 id="解决方案：Wrapper-自定义-SQL-片段">解决方案：Wrapper + 自定义 SQL 片段</h5>
<p>MyBatis-Plus 提供 <code>ew.customSqlSegment</code> 变量，可直接引用 Wrapper 生成的 WHERE 条件片段，实现 “条件由 MP 构建，SQL 核心逻辑由自定义实现”。</p>
<h5 id="实现步骤">实现步骤</h5>
<ol>
<li><strong>Service 层构建条件</strong>：用 Wrapper 定义查询条件（避免业务层写 SQL）；</li>
<li><strong>Mapper 层声明方法</strong>：用 <code>@Param(&quot;ew&quot;)</code> 接收 Wrapper（参数名固定为<code>ew</code>，可用<code>Constants.WRAPPER</code>常量替代）；</li>
<li><strong>编写自定义 SQL</strong>：通过 <code>$&#123;ew.customSqlSegment&#125;</code> 嵌入 MP 生成的条件。</li>
</ol>
<h4 id="代码示例：字段自减更新">代码示例：字段自减更新</h4>
<p><strong>需求</strong>：批量扣减指定 ID 用户的余额（<code>balance = balance - #&#123;amount&#125;</code>），条件由 MP 构建。</p>
<h5 id="1-Service-层：构建条件">1. Service 层：构建条件</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deductBalanceBatch</span><span class="hljs-params">(List&lt;Long&gt; ids, <span class="hljs-type">int</span> amount)</span> &#123;<br>        <span class="hljs-comment">// 1. 用Lambda构建条件：WHERE id IN (ids)</span><br>        LambdaQueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;User&gt;()<br>                .in(User::getId, ids);<br>        <span class="hljs-comment">// 2. 调用自定义SQL方法（条件+参数传入Mapper）</span><br>        baseMapper.updateBalanceByIds(wrapper, amount);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="2-Mapper-层：自定义-SQL-片段">2. Mapper 层：自定义 SQL 片段</h5>
<p>支持 <strong>注解式 SQL</strong> 或 <strong>XML 式 SQL</strong>，核心是引用 <code>ew.customSqlSegment</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.Constants;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Update;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>    <span class="hljs-comment">// 注解式SQL：$&#123;ew.customSqlSegment&#125; 嵌入WHERE条件</span><br>    <span class="hljs-meta">@Update(&quot;UPDATE user SET balance = balance - #&#123;amount&#125; $&#123;ew.customSqlSegment&#125;&quot;)</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBalanceByIds</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@Param(Constants.WRAPPER)</span> LambdaQueryWrapper&lt;User&gt; wrapper,  // 固定参数名ew</span><br><span class="hljs-params">            <span class="hljs-meta">@Param(&quot;amount&quot;)</span> <span class="hljs-type">int</span> amount</span><br><span class="hljs-params">    )</span>;<br><br>    <span class="hljs-comment">// 若用XML式SQL，在userMapper.xml中编写：</span><br>    <span class="hljs-comment">// &lt;update id=&quot;updateBalanceByIds&quot;&gt;</span><br>    <span class="hljs-comment">//     UPDATE user SET balance = balance - #&#123;amount&#125; $&#123;ew.customSqlSegment&#125;</span><br>    <span class="hljs-comment">// &lt;/update&gt;</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="3-生成的-SQL">3. 生成的 SQL</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">SET</span> balance <span class="hljs-operator">=</span> balance <span class="hljs-operator">-</span> <span class="hljs-number">200</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-keyword">IN</span> (?, ?, ?)<br><span class="hljs-comment">-- 参数：200（amount）、1（id）、2（id）、4（id）</span><br></code></pre></td></tr></table></figure>
<h4 id="2-进阶场景：多表联查">2. 进阶场景：多表联查</h4>
<p>MyBatis-Plus 本身不支持多表联查，但可通过 “自定义关联逻辑 + Wrapper 条件” 实现 ——<strong>关联部分手写 SQL，筛选条件由 MP 构建</strong>，大幅简化动态条件的编写。</p>
<p><strong>需求</strong>：查询 “收货地址在北京” 且 “用户 ID 在 1、2、4 中” 的用户信息。</p>
<h5 id="1-Service-层：构建多表条件">1. Service 层：构建多表条件</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">queryUserWithAddr</span><span class="hljs-params">(String city, List&lt;Long&gt; userIds)</span> &#123;<br>    <span class="hljs-comment">// 构建条件：WHERE u.id IN (1,2,4) AND a.city = &#x27;北京&#x27;</span><br>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;User&gt;()<br>            .in(<span class="hljs-string">&quot;u.id&quot;</span>, userIds)  <span class="hljs-comment">// 表别名需与SQL一致</span><br>            .eq(<span class="hljs-string">&quot;a.city&quot;</span>, city);<br>    <span class="hljs-keyword">return</span> baseMapper.queryUserByAddr(wrapper);<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="2-Mapper-层：自定义多表-SQL">2. Mapper 层：自定义多表 SQL</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>    <span class="hljs-comment">// 关联查询：SELECT + JOIN 手写，WHERE条件用MP生成</span><br>    <span class="hljs-meta">@Select(&quot;SELECT u.* FROM user u &quot; +</span><br><span class="hljs-meta">            &quot;INNER JOIN address a ON u.id = a.user_id &quot; +</span><br><span class="hljs-meta">            &quot;$&#123;ew.customSqlSegment&#125;&quot;)</span><br>    List&lt;User&gt; <span class="hljs-title function_">queryUserByAddr</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;ew&quot;)</span> QueryWrapper&lt;User&gt; wrapper)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="3-生成的-SQL-2">3. 生成的 SQL</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> u.<span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> u <br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> address a <span class="hljs-keyword">ON</span> u.id <span class="hljs-operator">=</span> a.user_id <br><span class="hljs-keyword">WHERE</span> u.id <span class="hljs-keyword">IN</span> (?, ?, ?) <span class="hljs-keyword">AND</span> a.city <span class="hljs-operator">=</span> ?<br><span class="hljs-comment">-- 参数：1（userIds）、2（userIds）、4（userIds）、北京（city）</span><br></code></pre></td></tr></table></figure>
<h4 id="3-自定义-SQL-适用场景总结">3. 自定义 SQL 适用场景总结</h4>
<table>
<thead>
<tr>
<th>场景</th>
<th>解决方案</th>
<th>优势</th>
</tr>
</thead>
<tbody>
<tr>
<td>特殊更新（字段自增 / 自减）</td>
<td>Wrapper 构建 WHERE + 自定义 SQL 写 SET</td>
<td>避免 SQL 散落在 Service 层</td>
</tr>
<tr>
<td>复杂动态条件（多字段筛选）</td>
<td>Wrapper 生成条件 + 自定义 SQL 写核心逻辑</td>
<td>替代繁琐的<code>&lt;if&gt;</code>/<code>&lt;foreach&gt;</code>标签</td>
</tr>
<tr>
<td>多表联查</td>
<td>自定义 JOIN + Wrapper 生成筛选条件</td>
<td>保留 MP 动态条件优势，适配多表场景</td>
</tr>
</tbody>
</table>
<h3 id="3-2-2-IService-接口：Service-层模板方法封装">3.2.2 IService 接口：Service 层模板方法封装</h3>
<p>MyBatis-Plus 不仅在 DAO 层提供 <code>BaseMapper</code>，还在 Service 层封装了 <strong>IService 接口及默认实现</strong>，涵盖批量操作、条件查询、分页等高频模板方法，避免重复编写 Service 层代码。</p>
<p><img src="https://a1.boltp.com/2025/09/19/68cd43aaaa674.png" alt=""></p>
<h4 id="1-IService-核心设计">1. IService 核心设计</h4>
<p><img src="https://a1.boltp.com/2025/09/19/68cd4437963c2.png" alt=""></p>
<ul>
<li><strong>顶层接口</strong>：<code>IService&lt;T&gt;</code>，定义 Service 层通用方法；</li>
<li><strong>默认实现</strong>：<code>ServiceImpl&lt;M extends BaseMapper&lt;T&gt;, T&gt;</code>，已实现 <code>IService</code> 所有方法，内部依赖 <code>BaseMapper</code>；</li>
<li><strong>使用方式</strong>：自定义 Service 接口继承 <code>IService</code>，实现类继承 <code>ServiceImpl</code>，即可复用所有模板方法。</li>
</ul>
<h4 id="2-核心方法分类（高频）">2. 核心方法分类（高频）</h4>
<p><code>IService</code> 方法按功能可分为 7 大类，覆盖绝大多数 Service 层场景：</p>
<table>
<thead>
<tr>
<th>类别</th>
<th>核心方法</th>
<th>作用描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>新增</strong></td>
<td><code>save(T entity)</code></td>
<td>新增单个实体</td>
</tr>
<tr>
<td></td>
<td><code>saveBatch(Collection&lt;T&gt; list)</code></td>
<td>批量新增（默认批次 1000 条）</td>
</tr>
<tr>
<td></td>
<td><code>saveOrUpdate(T entity)</code></td>
<td>新增或更新（根据 ID 判断）</td>
</tr>
<tr>
<td><strong>删除</strong></td>
<td><code>removeById(Serializable id)</code></td>
<td>根据 ID 删除</td>
</tr>
<tr>
<td></td>
<td><code>removeByIds(Collection&lt;?&gt; ids)</code></td>
<td>批量删除</td>
</tr>
<tr>
<td></td>
<td><code>remove(Wrapper&lt;T&gt; wrapper)</code></td>
<td>根据条件删除</td>
</tr>
<tr>
<td><strong>更新</strong></td>
<td><code>updateById(T entity)</code></td>
<td>根据 ID 更新（只更非 null 字段）</td>
</tr>
<tr>
<td></td>
<td><code>update(T entity, Wrapper&lt;T&gt; wrapper)</code></td>
<td>根据条件更新指定字段</td>
</tr>
<tr>
<td></td>
<td><code>updateBatchById(Collection&lt;T&gt; list)</code></td>
<td>批量更新</td>
</tr>
<tr>
<td><strong>单条查询</strong></td>
<td><code>getById(Serializable id)</code></td>
<td>根据 ID 查询</td>
</tr>
<tr>
<td></td>
<td><code>getOne(Wrapper&lt;T&gt; wrapper)</code></td>
<td>根据条件查询单条（默认抛异常 if 多条）</td>
</tr>
<tr>
<td><strong>列表查询</strong></td>
<td><code>list()</code></td>
<td>查询所有</td>
</tr>
<tr>
<td></td>
<td><code>listByIds(Collection&lt;?&gt; ids)</code></td>
<td>批量查询</td>
</tr>
<tr>
<td></td>
<td><code>list(Wrapper&lt;T&gt; wrapper)</code></td>
<td>根据条件查询列表</td>
</tr>
<tr>
<td><strong>计数</strong></td>
<td><code>count()</code></td>
<td>统计总条数</td>
</tr>
<tr>
<td></td>
<td><code>count(Wrapper&lt;T&gt; wrapper)</code></td>
<td>根据条件统计</td>
</tr>
<tr>
<td><strong>分页</strong></td>
<td><code>page(IPage&lt;T&gt; page, Wrapper&lt;T&gt; wrapper)</code></td>
<td>条件分页查询</td>
</tr>
</tbody>
</table>
<h4 id="3-基本使用流程">3. 基本使用流程</h4>
<h5 id="步骤-1：定义自定义-Service-接口">步骤 1：定义自定义 Service 接口</h5>
<p>继承 <code>IService&lt;T&gt;</code>，泛型为 PO 实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;<br><span class="hljs-keyword">import</span> com.itheima.mp.domain.po.User;<br><br><span class="hljs-comment">// 自定义接口：继承IService，可添加业务方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;User&gt; &#123;<br>    <span class="hljs-comment">// 示例：自定义业务方法（扣减余额）</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deductBalanceById</span><span class="hljs-params">(Long id, Integer money)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="步骤-2：实现-Service-类">步骤 2：实现 Service 类</h5>
<p>继承 <code>ServiceImpl&lt;M, T&gt;</code>（M 为 Mapper 接口，T 为 PO），实现自定义接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;<br><span class="hljs-keyword">import</span> com.itheima.mp.domain.po.User;<br><span class="hljs-keyword">import</span> com.itheima.mp.mapper.UserMapper;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserService</span> &#123;<br>    <span class="hljs-comment">// 无需手动实现IService的方法，ServiceImpl已全部封装</span><br>    <span class="hljs-comment">// 可直接使用baseMapper调用自定义SQL，或使用IService的模板方法</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deductBalanceById</span><span class="hljs-params">(Long id, Integer money)</span> &#123;<br>        <span class="hljs-comment">// 1. 复用IService的查询方法</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> getById(id);<br>        <span class="hljs-comment">// 2. 业务校验</span><br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span> || user.getStatus() == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户状态异常&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (user.getBalance() &lt; money) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;余额不足&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 3. 调用自定义SQL（通过baseMapper）</span><br>        baseMapper.deductBalance(id, money);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="步骤-3：Controller-层调用">步骤 3：Controller 层调用</h5>
<p>直接注入自定义 Service，复用模板方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-meta">@RequiredArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> IUserService userService;<br><br>    <span class="hljs-comment">// 新增用户：复用IService的save方法</span><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UserFormDTO dto)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> BeanUtil.copyProperties(dto, User.class);<br>        userService.save(user);<br>    &#125;<br><br>    <span class="hljs-comment">// 批量查询：复用IService的listByIds方法</span><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> List&lt;UserVO&gt; <span class="hljs-title function_">listByIds</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> List&lt;Long&gt; ids)</span> &#123;<br>        List&lt;User&gt; users = userService.listByIds(ids);<br>        <span class="hljs-keyword">return</span> BeanUtil.copyToList(users, UserVO.class);<br>    &#125;<br><br>    <span class="hljs-comment">// 自定义业务：扣减余额</span><br>    <span class="hljs-meta">@PutMapping(&quot;/&#123;id&#125;/deduction/&#123;money&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deduct</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id, <span class="hljs-meta">@PathVariable</span> Integer money)</span> &#123;<br>        userService.deductBalanceById(id, money);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="4-进阶：LambdaQuery-与-LambdaUpdate（高效！）">4. 进阶：LambdaQuery 与 LambdaUpdate（高效！）</h4>
<p><code>IService</code> 提供 <code>lambdaQuery()</code> 和 <code>lambdaUpdate()</code> 方法（究极好用！！！），可直接链式构建 Lambda 条件，无需手动创建 <code>LambdaQueryWrapper</code>，进一步简化代码。</p>
<h5 id="场景-1：动态条件查询">场景 1：动态条件查询</h5>
<p><strong>需求</strong>：根据 “用户名关键字、状态、余额范围” 动态查询用户（条件可为空）。</p>
<h5 id="1-定义查询-DTO">1. 定义查询 DTO</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserQueryDTO</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;      <span class="hljs-comment">// 用户名关键字（可为空）</span><br>    <span class="hljs-keyword">private</span> Integer status;   <span class="hljs-comment">// 状态（可为空）</span><br>    <span class="hljs-keyword">private</span> Integer minBalance; <span class="hljs-comment">// 最小余额（可为空）</span><br>    <span class="hljs-keyword">private</span> Integer maxBalance; <span class="hljs-comment">// 最大余额（可为空）</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="2-Service-层实现">2. Service 层实现</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">queryByCondition</span><span class="hljs-params">(UserQueryDTO dto)</span> &#123;<br>    <span class="hljs-comment">// lambdaQuery()：直接获取Lambda查询器，支持条件判断</span><br>    <span class="hljs-keyword">return</span> lambdaQuery()<br>            .like(dto.getName() != <span class="hljs-literal">null</span>, User::getUsername, dto.getName())  <span class="hljs-comment">// 非空才加条件</span><br>            .eq(dto.getStatus() != <span class="hljs-literal">null</span>, User::getStatus, dto.getStatus())<br>            .ge(dto.getMinBalance() != <span class="hljs-literal">null</span>, User::getBalance, dto.getMinBalance())<br>            .le(dto.getMaxBalance() != <span class="hljs-literal">null</span>, User::getBalance, dto.getMaxBalance())<br>            .list(); <span class="hljs-comment">// 结尾指定返回类型（list/one/count）</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="场景-2：动态更新">场景 2：动态更新</h5>
<p><strong>需求</strong>：扣减余额，若扣减后余额为 0，则冻结用户（status=2）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span> <span class="hljs-comment">// 事务保证</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deductBalanceWithFreeze</span><span class="hljs-params">(Long id, Integer money)</span> &#123;<br>    <span class="hljs-comment">// 1. 查询用户</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> getById(id);<br>    <span class="hljs-comment">// 2. 校验</span><br>    <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span> || user.getStatus() == <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户异常&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">remain</span> <span class="hljs-operator">=</span> user.getBalance() - money;<br>    <span class="hljs-keyword">if</span> (remain &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;余额不足&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 3. 动态更新：余额必更，状态按需更新</span><br>    lambdaUpdate()<br>            .set(User::getBalance, remain)<br>            .set(remain == <span class="hljs-number">0</span>, User::getStatus, <span class="hljs-number">2</span>)  <span class="hljs-comment">// 余额为0则冻结</span><br>            .eq(User::getId, id)<br>            .update(); <span class="hljs-comment">// 执行更新</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="5-性能优化：批量新增与批处理">5. 性能优化：批量新增与批处理</h4>
<p><code>IService</code> 的 <code>saveBatch()</code> 方法默认采用 “预编译批处理”，但需配合 MySQL 驱动参数才能达到最优性能。</p>
<h5 id="三种批量插入方案对比">三种批量插入方案对比</h5>
<table>
<thead>
<tr>
<th>方案</th>
<th>实现方式</th>
<th>耗时（10 万条数据）</th>
<th>原理</th>
</tr>
</thead>
<tbody>
<tr>
<td>普通 for 循环逐条插入</td>
<td><code>for (User u : list) &#123; save(u); &#125;</code></td>
<td>~550 秒</td>
<td>每条数据 1 次网络请求，效率极低</td>
</tr>
<tr>
<td>MP 批量插入（默认）</td>
<td><code>saveBatch(list, 1000)</code></td>
<td>~28 秒</td>
<td>每 1000 条 1 次网络请求，仍逐条执行 SQL</td>
</tr>
<tr>
<td>MP+MySQL 批处理参数</td>
<td><code>saveBatch(list, 1000) + rewriteBatchedStatements=true</code></td>
<td>~6 秒</td>
<td>驱动重写 SQL 为批量插入，1 次请求 1 条 SQL</td>
</tr>
</tbody>
</table>
<h5 id="关键配置：开启-MySQL-批处理">关键配置：开启 MySQL 批处理</h5>
<p>在 JDBC URL 中添加 <code>rewriteBatchedStatements=true</code>（MySQL 驱动 3.1.13 + 支持）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true&amp;serverTimezone=Asia/Shanghai&amp;rewriteBatchedStatements=true</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure>
<h5 id="注意事项">注意事项</h5>
<ul>
<li>批次大小建议 1000-5000 条：避免单次请求数据量过大导致超时；</li>
<li>内存优化：分批次构建数据列表，避免一次性创建 10 万条对象占用过多内存。</li>
</ul>
<h4 id="6-IService-使用总结">6. IService 使用总结</h4>
<ol>
<li><strong>核心价值</strong>：封装 Service 层模板方法，减少重复代码（如批量操作、条件查询）；</li>
<li><strong>最佳实践</strong>：
<ul>
<li>自定义 Service 接口继承 <code>IService</code>，实现类继承 <code>ServiceImpl</code>；</li>
<li>简单 CRUD 直接复用 <code>IService</code> 方法，复杂业务在实现类中扩展；</li>
<li>动态条件优先使用 <code>lambdaQuery()</code>/<code>lambdaUpdate()</code>，避免硬编码；</li>
<li>批量操作务必开启 <code>rewriteBatchedStatements</code> 参数优化性能。</li>
</ul>
</li>
</ol>
<h1>四、MyBatis-Plus 扩展功能</h1>
<p>MyBatis-Plus 除核心 CRUD 能力外，还提供了一系列 <strong>高频场景扩展功能</strong>，覆盖代码生成、类型转换、敏感配置加密等开发痛点，旨在进一步简化开发流程、提升系统健壮性。</p>
<h2 id="4-1-代码生成：一键生成重复代码">4.1 代码生成：一键生成重复代码</h2>
<p>基础的 PO、Mapper、Service 等代码存在大量重复编写工作，MyBatis-Plus 提供两种代码生成方案：<strong>Idea 图形化插件</strong>（便捷）和 <strong>官方代码生成器</strong>（灵活），可根据数据库表结构自动生成全套基础代码。</p>
<h3 id="4-1-1-方案一：Idea-插件生成（推荐新手）">4.1.1 方案一：Idea 插件生成（推荐新手）</h3>
<p>通过 Idea 插件实现图形化配置，无需编写生成逻辑，直接生成代码。</p>
<h4 id="1-安装插件">1. 安装插件</h4>
<p>在 Idea 的 <code>Plugins</code> 市场搜索 <strong>MyBatisPlus</strong>，选择下载量高的插件（如 “mybatis-plus” 或 “Custom MybatisPlus Generator”），安装后重启 Idea。</p>
<p><img src="https://a1.boltp.com/2025/09/19/68cd4ee78ba99.png" alt=""></p>
<h4 id="2-使用步骤">2. 使用步骤</h4>
<p>以生成 <code>address</code> 表的基础代码为例：</p>
<ol>
<li>
<p><strong>配置数据库连接</strong>：顶部菜单选择 <code>Other</code> → <code>Config Database</code>，填写数据库 URL、用户名、密码，测试连接通过后保存。</p>
<p><img src="https://a1.boltp.com/2025/09/19/68cd4f83d0f25.png" alt=""></p>
</li>
<li>
<p><strong>配置生成参数</strong>：再次选择 <code>Other</code> → <code>Code Generator</code>，填写核心参数：</p>
<ul>
<li><code>package</code>：父包路径（如 <code>com.itheima.mp</code>）；</li>
<li><code>Entity</code>：实体类包路径（如 <code>domain.po</code>）；</li>
<li><code>TablePrefix</code>：表前缀（如无则留空）；</li>
<li><code>Id策略</code>：与数据库主键策略一致（如 <code>AUTO</code> 自增）；</li>
<li>勾选需生成的组件（Entity、Mapper、Service、Controller 等）。</li>
</ul>
<p><img src="https://a1.boltp.com/2025/09/19/68cd4fb0f34cb.png" alt=""></p>
<p><img src="https://a1.boltp.com/2025/09/19/68cd500ca566e.png" alt="img"></p>
</li>
<li>
<p><strong>生成代码</strong>：点击 “提交”，插件自动在指定包路径下生成代码，包含 PO 实体、Mapper 接口、Service 及实现类。</p>
<p><img src="https://a1.boltp.com/2025/09/19/68cd50213e948.png" alt=""></p>
</li>
</ol>
<h3 id="4-1-2-方案二：官方代码生成器（灵活定制，可跳过）">4.1.2 方案二：官方代码生成器（灵活定制，可跳过）</h3>
<p>通过编写 Java 代码配置生成逻辑，支持个性化定制（如 Lombok 注解、REST 风格 Controller 等），适合复杂场景。</p>
<p>因为MP代码生成更新迭代速度很快，若本文的API被弃用，请以官网最新版本API为准：</p>
<p>MyBatis-Plus新代码生成器：<a href="https://baomidou.com/guides/new-code-generator/">https://baomidou.com/guides/new-code-generator/</a></p>
<p>代码生成器配置：<a href="https://baomidou.com/reference/new-code-generator-configuration/">https://baomidou.com/reference/new-code-generator-configuration/</a></p>
<h4 id="1-引入依赖">1. 引入依赖</h4>
<p>在 <code>pom.xml</code> 中添加代码生成器依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- MP代码生成器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h4 id="2-编写生成配置">2. 编写生成配置</h4>
<p>创建 <code>CodeGenerator</code> 类，配置数据库连接、包路径、生成策略等参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.FastAutoGenerator;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.OutputFile;<br><br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodeGenerator</span> &#123;<br>    <span class="hljs-comment">// 数据库连接参数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">JDBC_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true&amp;characterEncoding=UTF-8&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">JDBC_USER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">JDBC_PWD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 生成表名（可批量）</span><br>        List&lt;String&gt; tables = List.of(<span class="hljs-string">&quot;address&quot;</span>);<br>        <span class="hljs-comment">// 输出路径（项目java目录）</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">outputDir</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>) + <span class="hljs-string">&quot;/src/main/java&quot;</span>;<br><br>        FastAutoGenerator.create(JDBC_URL, JDBC_USER, JDBC_PWD)<br>                <span class="hljs-comment">// 1. 全局配置</span><br>                .globalConfig(builder -&gt; &#123;<br>                    builder.author(<span class="hljs-string">&quot;Aizen&quot;</span>)          <span class="hljs-comment">// 作者</span><br>                            .outputDir(outputDir)   <span class="hljs-comment">// 输出路径</span><br>                            .enableSwagger()        <span class="hljs-comment">// 开启Swagger注解</span><br>                            .commentDate(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>); <span class="hljs-comment">// 注释日期格式</span><br>                &#125;)<br>                <span class="hljs-comment">// 2. 包配置</span><br>                .packageConfig(builder -&gt; &#123;<br>                    builder.parent(<span class="hljs-string">&quot;com.itheima.mp&quot;</span>) <span class="hljs-comment">// 父包名</span><br>                            .entity(<span class="hljs-string">&quot;domain.po&quot;</span>)    <span class="hljs-comment">// 实体类包</span><br>                            .mapper(<span class="hljs-string">&quot;mapper&quot;</span>)       <span class="hljs-comment">// Mapper接口包</span><br>                            .service(<span class="hljs-string">&quot;service&quot;</span>)     <span class="hljs-comment">// Service接口包</span><br>                            .serviceImpl(<span class="hljs-string">&quot;service.impl&quot;</span>) <span class="hljs-comment">// Service实现包</span><br>                            .controller(<span class="hljs-string">&quot;controller&quot;</span>) <span class="hljs-comment">// Controller包</span><br>                            .xml(<span class="hljs-string">&quot;src/main/resources/mapper&quot;</span>); <span class="hljs-comment">// Mapper XML路径</span><br>                &#125;)<br>                <span class="hljs-comment">// 3. 策略配置</span><br>                .strategyConfig(builder -&gt; &#123;<br>                    builder.addInclude(tables)       <span class="hljs-comment">// 要生成的表</span><br>                            .addTablePrefix()       <span class="hljs-comment">// 表前缀（如无则不填）</span><br>                            <span class="hljs-comment">// 实体类策略</span><br>                            .entityBuilder()<br>                            .enableLombok()         <span class="hljs-comment">// 启用Lombok</span><br>                            .enableTableFieldAnnotation() <span class="hljs-comment">// 生成字段注解</span><br>                            <span class="hljs-comment">// Service策略</span><br>                            .serviceBuilder()<br>                            .formatServiceFileName(<span class="hljs-string">&quot;%sService&quot;</span>)<br>                            .formatServiceImplFileName(<span class="hljs-string">&quot;%sServiceImpl&quot;</span>)<br>                            <span class="hljs-comment">// Controller策略</span><br>                            .controllerBuilder()<br>                            .enableRestStyle()      <span class="hljs-comment">// 启用REST风格</span><br>                            <span class="hljs-comment">// Mapper策略</span><br>                            .mapperBuilder()<br>                            .superClass(BaseMapper.class) <span class="hljs-comment">// 继承BaseMapper</span><br>                            .enableBaseResultMap(); <span class="hljs-comment">// 生成通用ResultMap</span><br>                &#125;)<br>                .execute(); <span class="hljs-comment">// 执行生成</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="3-执行生成">3. 执行生成</h4>
<p>运行 <code>CodeGenerator.main()</code> 方法，代码会自动生成到指定包路径，无需手动编写重复代码。</p>
<h2 id="4-2-静态工具-Db：解决-Service-循环依赖">4.2 静态工具 Db：解决 Service 循环依赖</h2>
<p>当 Service 之间相互调用时，易出现 <strong>循环依赖</strong> 问题。MyBatis-Plus 提供静态工具类 <code>Db</code>，封装了与 <code>IService</code> 一致的 CRUD 方法，无需注入 Service 即可实现数据操作，从根源避免循环依赖。</p>
<p><img src="https://a1.boltp.com/2025/09/19/68cd518714fbe.png" alt=""></p>
<h3 id="4-2-1-核心特性">4.2.1 核心特性</h3>
<ul>
<li>无需注入 Service，通过静态方法直接调用；</li>
<li>需传入 PO 类的 <code>Class</code> 字节码（静态方法无法读取泛型，通过反射获取表信息）；</li>
<li>方法签名与 <code>IService</code> 基本一致，学习成本低。</li>
</ul>
<h3 id="4-2-2-基础使用示例">4.2.2 基础使用示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.Db;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DbToolTest</span> &#123;<br><br>    <span class="hljs-comment">// 1. 根据ID查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDbGetById</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> Db.getById(<span class="hljs-number">1L</span>, User.class); <span class="hljs-comment">// 需传入PO的Class</span><br>        System.out.println(<span class="hljs-string">&quot;用户：&quot;</span> + user);<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 条件查询</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDbLambdaQuery</span><span class="hljs-params">()</span> &#123;<br>        List&lt;User&gt; userList = Db.lambdaQuery(User.class)<br>                .like(User::getUsername, <span class="hljs-string">&quot;o&quot;</span>)<br>                .ge(User::getBalance, <span class="hljs-number">1000</span>)<br>                .list();<br>        userList.forEach(System.out::println);<br>    &#125;<br><br>    <span class="hljs-comment">// 3. 更新操作</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDbLambdaUpdate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> Db.lambdaUpdate(User.class)<br>                .set(User::getBalance, <span class="hljs-number">2000</span>)<br>                .eq(User::getUsername, <span class="hljs-string">&quot;Rose&quot;</span>)<br>                .update();<br>        System.out.println(<span class="hljs-string">&quot;更新成功：&quot;</span> + success);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="4-2-3-实战案例：查询用户及关联地址">4.2.3 实战案例：查询用户及关联地址</h3>
<h4 id="案例-1：查询单个用户及地址">案例 1：查询单个用户及地址</h4>
<p><strong>需求</strong>：查询用户时返回其所有收货地址，避免注入 <code>IAddressService</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> UserVO <span class="hljs-title function_">queryUserAndAddressById</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-comment">// 1. 查询用户（自身Service方法）</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> getById(id);<br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span> || user.getStatus() == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;用户不存在或冻结&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 2. 查询地址（用Db工具，无需注入AddressService）</span><br>        List&lt;Address&gt; addresses = Db.lambdaQuery(Address.class)<br>                .eq(Address::getUserId, id)<br>                .list();<br><br>        <span class="hljs-comment">// 3. 封装VO</span><br>        <span class="hljs-type">UserVO</span> <span class="hljs-variable">userVO</span> <span class="hljs-operator">=</span> BeanUtil.copyProperties(user, UserVO.class);<br>        userVO.setAddresses(BeanUtil.copyToList(addresses, AddressVO.class));<br>        <span class="hljs-keyword">return</span> userVO;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="案例-2：批量查询用户及地址">案例 2：批量查询用户及地址</h4>
<p><strong>需求</strong>：批量查询用户时，批量关联地址并分组匹配。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;UserVO&gt; <span class="hljs-title function_">queryUserAndAddressByIds</span><span class="hljs-params">(List&lt;Long&gt; ids)</span> &#123;<br>    <span class="hljs-comment">// 1. 批量查询用户</span><br>    List&lt;User&gt; users = listByIds(ids);<br>    <span class="hljs-keyword">if</span> (users.isEmpty()) <span class="hljs-keyword">return</span> Collections.emptyList();<br><br>    <span class="hljs-comment">// 2. 批量查询所有用户的地址（一次查询，减少数据库交互）</span><br>    List&lt;Long&gt; userIds = users.stream().map(User::getId).toList();<br>    List&lt;Address&gt; addresses = Db.lambdaQuery(Address.class)<br>            .in(Address::getUserId, userIds)<br>            .list();<br><br>    <span class="hljs-comment">// 3. 地址按用户ID分组（Map&lt;用户ID, 地址列表&gt;）</span><br>    Map&lt;Long, List&lt;AddressVO&gt;&gt; addressMap = addresses.stream()<br>            .map(addr -&gt; BeanUtil.copyProperties(addr, AddressVO.class))<br>            .collect(Collectors.groupingBy(AddressVO::getUserId));<br><br>    <span class="hljs-comment">// 4. 封装VO</span><br>    <span class="hljs-keyword">return</span> users.stream()<br>            .map(user -&gt; &#123;<br>                <span class="hljs-type">UserVO</span> <span class="hljs-variable">vo</span> <span class="hljs-operator">=</span> BeanUtil.copyProperties(user, UserVO.class);<br>                vo.setAddresses(addressMap.getOrDefault(user.getId(), Collections.emptyList()));<br>                <span class="hljs-keyword">return</span> vo;<br>            &#125;)<br>            .toList();<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="4-3-逻辑删除：避免数据物理删除">4.3 逻辑删除：避免数据物理删除</h2>
<p>对于核心数据（如用户、订单），物理删除（DELETE）会导致数据丢失，通常采用 <strong>逻辑删除</strong> 方案：通过字段标记数据状态，删除时仅修改标记，查询时过滤已标记的数据。MyBatis-Plus 可自动处理逻辑删除的 SQL 拼接，无需手动修改 CRUD 方法。</p>
<h3 id="4-3-1-实现步骤">4.3.1 实现步骤</h3>
<h4 id="1-数据库添加逻辑删除字段">1. 数据库添加逻辑删除字段</h4>
<p>以 <code>address</code> 表为例，添加 <code>deleted</code> 字段（布尔型，默认 <code>0</code> 未删除）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER TABLE</span> address <span class="hljs-keyword">ADD</span> deleted BIT <span class="hljs-keyword">DEFAULT</span> b<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;逻辑删除（0未删，1已删）&#x27;</span>;<br></code></pre></td></tr></table></figure>
<h4 id="2-配置逻辑删除">2. 配置逻辑删除</h4>
<p>两种配置方式：<strong>全局配置</strong>（适用于全表统一规则）或 <strong>注解配置</strong>（适用于单表自定义规则）。</p>
<h5 id="方式-1：全局配置（推荐）">方式 1：全局配置（推荐）</h5>
<p>在 <code>application.yaml</code> 中配置全局逻辑删除规则：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">logic-delete-field:</span> <span class="hljs-string">deleted</span>  <span class="hljs-comment"># 全局逻辑删除字段名</span><br>      <span class="hljs-attr">logic-not-delete-value:</span> <span class="hljs-number">0</span>     <span class="hljs-comment"># 未删除值（默认0）</span><br>      <span class="hljs-attr">logic-delete-value:</span> <span class="hljs-number">1</span>         <span class="hljs-comment"># 已删除值（默认1）</span><br></code></pre></td></tr></table></figure>
<h5 id="方式-2：注解配置（单表自定义）">方式 2：注解配置（单表自定义）</h5>
<p>在 PO 类的逻辑删除字段上添加 <code>@TableLogic</code> 注解，覆盖全局配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;address&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span> &#123;<br>    <span class="hljs-comment">// 其他字段省略...</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 逻辑删除</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableLogic(value = &quot;0&quot;, delval = &quot;1&quot;)</span> <span class="hljs-comment">// value=未删值，delval=已删值</span><br>    <span class="hljs-keyword">private</span> Boolean deleted;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="3-测试逻辑删除">3. 测试逻辑删除</h4>
<p>调用普通 CRUD 方法，MP 会自动处理逻辑删除：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogicDeleteTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IAddressService addressService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testRemove</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1. 执行删除（实际执行UPDATE，而非DELETE）</span><br>        addressService.removeById(<span class="hljs-number">59L</span>);<br><br>        <span class="hljs-comment">// 2. 查询已删除数据（自动过滤，返回null）</span><br>        <span class="hljs-type">Address</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> addressService.getById(<span class="hljs-number">59L</span>);<br>        System.out.println(<span class="hljs-string">&quot;查询结果：&quot;</span> + address); <span class="hljs-comment">// null</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>生成的 SQL</strong>：</p>
<ul>
<li>删除：<code>UPDATE address SET deleted=1 WHERE id=? AND deleted=0</code></li>
<li>查询：<code>SELECT * FROM address WHERE id=? AND deleted=0</code></li>
</ul>
<h3 id="4-3-2-注意事项">4.3.2 注意事项</h3>
<ul>
<li>仅 MP 自动生成的 SQL 支持逻辑删除，<strong>自定义 SQL 需手动添加 <code>deleted</code> 条件</strong>；</li>
<li>逻辑删除会导致表中 “垃圾数据” 累积，影响查询效率，建议定期将已删除数据迁移至历史表；</li>
<li>不适用于需彻底清理数据的场景（如测试数据）。</li>
</ul>
<h2 id="4-4-枚举处理器：枚举与数据库字段自动转换">4.4 枚举处理器：枚举与数据库字段自动转换</h2>
<p>当 PO 类属性为枚举类型时，MyBatis 默认使用 <code>EnumOrdinalTypeHandler</code>（存储枚举索引），灵活性差。</p>
<p><img src="https://a1.boltp.com/2025/09/19/68cd530fa4fa4.png" alt=""></p>
<p>MyBatis-Plus 提供 <code>MybatisEnumTypeHandler</code>，支持将枚举的指定属性（如 <code>value</code>）与数据库字段映射，且支持 JSON 序列化自定义。</p>
<p><img src="https://a1.boltp.com/2025/09/19/68cd533735419.png" alt=""></p>
<h3 id="4-4-1-实现步骤">4.4.1 实现步骤</h3>
<h4 id="1-定义枚举并标记-EnumValue">1. 定义枚举并标记 <code>@EnumValue</code></h4>
<p>用 <code>@EnumValue</code> 注解标记枚举中与数据库字段对应的属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.EnumValue;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonValue;<br><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">UserStatus</span> &#123;<br>    NORMAL(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;正常&quot;</span>),  <span class="hljs-comment">// 数据库存1，前端显示&quot;正常&quot;</span><br>    FREEZE(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;冻结&quot;</span>); <span class="hljs-comment">// 数据库存2，前端显示&quot;冻结&quot;</span><br><br>    <span class="hljs-meta">@EnumValue</span>  <span class="hljs-comment">// 标记数据库存储的属性</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> value;<br><br>    <span class="hljs-meta">@JsonValue</span>  <span class="hljs-comment">// 标记JSON序列化返回的属性（前端展示用）</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String desc;<br><br>    UserStatus(<span class="hljs-type">int</span> value, String desc) &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>        <span class="hljs-built_in">this</span>.desc = desc;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="2-配置全局枚举处理器">2. 配置全局枚举处理器</h4>
<p>在 <code>application.yaml</code> 中指定默认枚举处理器：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">default-enum-type-handler:</span> <span class="hljs-string">com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span><br></code></pre></td></tr></table></figure>
<h4 id="3-改造-PO-类">3. 改造 PO 类</h4>
<p>将 PO 类中的状态字段改为枚举类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-comment">// 其他字段省略...</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用户状态（1正常，2冻结）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> UserStatus status;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="4-4-2-测试效果">4.4.2 测试效果</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testEnumQuery</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 查询状态为正常的用户</span><br>    List&lt;User&gt; users = userService.lambdaQuery()<br>            .eq(User::getStatus, UserStatus.NORMAL)<br>            .list();<br>  <br>    <span class="hljs-comment">// 输出结果：status字段为枚举对象，JSON返回desc属性</span><br>    users.forEach(user -&gt; System.out.println(user.getStatus().getDesc())); <span class="hljs-comment">// 正常、正常...</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>生成的 SQL</strong>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> status <span class="hljs-operator">=</span> ?  <span class="hljs-comment">-- 参数：1（UserStatus.NORMAL的value）</span><br></code></pre></td></tr></table></figure>
<h2 id="4-5-JSON-类型处理器：JSON-字段与对象自动转换">4.5 JSON 类型处理器：JSON 字段与对象自动转换</h2>
<p>数据库中 JSON 类型字段（如 <code>user.info</code>）默认以字符串形式映射到 PO 类，读取其中属性需手动解析 JSON。MyBatis-Plus 提供 <code>JacksonTypeHandler</code>，可将 JSON 字段直接映射为 Java 对象（如 <code>UserInfo</code>），实现自动序列化 / 反序列化。</p>
<h3 id="4-5-1-实现步骤">4.5.1 实现步骤</h3>
<h4 id="1-定义-JSON-对应的实体类">1. 定义 JSON 对应的实体类</h4>
<p>创建与 JSON 字段结构匹配的实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor(staticName = &quot;of&quot;)</span> <span class="hljs-comment">// 便捷构建对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer age;    <span class="hljs-comment">// 对应JSON的age字段</span><br>    <span class="hljs-keyword">private</span> String intro;   <span class="hljs-comment">// 对应JSON的intro字段</span><br>    <span class="hljs-keyword">private</span> String gender;  <span class="hljs-comment">// 对应JSON的gender字段</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="2-改造-PO-类">2. 改造 PO 类</h4>
<p>指定 JSON 字段的类型处理器，并开启自动 ResultMap 映射：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(value = &quot;user&quot;, autoResultMap = true)</span> <span class="hljs-comment">// 开启自动ResultMap（解决嵌套映射问题）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-comment">// 其他字段省略...</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 详细信息（JSON类型）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(typeHandler = JacksonTypeHandler.class)</span> <span class="hljs-comment">// 指定JSON处理器</span><br>    <span class="hljs-keyword">private</span> UserInfo info;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="3-测试自动转换">3. 测试自动转换</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testJsonField</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1. 新增用户（自动将UserInfo转为JSON字符串）</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setUsername(<span class="hljs-string">&quot;JsonTest&quot;</span>);<br>    user.setInfo(UserInfo.of(<span class="hljs-number">25</span>, <span class="hljs-string">&quot;技术宅&quot;</span>, <span class="hljs-string">&quot;male&quot;</span>)); <span class="hljs-comment">// 直接设置对象</span><br>    userService.save(user);<br><br>    <span class="hljs-comment">// 2. 查询用户（自动将JSON字符串转为UserInfo）</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">queryUser</span> <span class="hljs-operator">=</span> userService.getById(user.getId());<br>    System.out.println(<span class="hljs-string">&quot;用户年龄：&quot;</span> + queryUser.getInfo().getAge()); <span class="hljs-comment">// 25</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>生成的 SQL</strong>：</p>
<ul>
<li>新增：<code>INSERT INTO user (username, info) VALUES (?, ?)</code> → 参数：<code>JsonTest</code>、<code>&#123;&quot;age&quot;:25,&quot;intro&quot;:&quot;技术宅&quot;,&quot;gender&quot;:&quot;male&quot;&#125;</code></li>
<li>查询：自动将 JSON 字符串解析为 <code>UserInfo</code> 对象。</li>
</ul>
<h2 id="4-6-YAML-配置加密：保护敏感信息">4.6 YAML 配置加密：保护敏感信息</h2>
<p>配置文件中数据库用户名、密码等敏感信息以明文存储，存在泄露风险。MyBatis-Plus 基于 AES 算法提供配置加密功能，可对敏感信息加密存储，启动时解密。</p>
<h3 id="4-6-1-实现步骤">4.6.1 实现步骤</h3>
<h4 id="1-生成密钥与密文">1. 生成密钥与密文</h4>
<p>使用 MP 提供的 <code>AES</code> 工具生成 16 位密钥，并加密用户名 / 密码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.AES;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConfigEncryptTest</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">USERNAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PASSWORD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">generateEncryptInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1. 生成16位随机AES密钥</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> AES.generateRandomKey();<br>        System.out.println(<span class="hljs-string">&quot;密钥：&quot;</span> + key); <span class="hljs-comment">// 例：7pSEa6F9TnYacTNJ</span><br><br>        <span class="hljs-comment">// 2. 加密用户名和密码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">encryptUsername</span> <span class="hljs-operator">=</span> AES.encrypt(USERNAME, key);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">encryptPassword</span> <span class="hljs-operator">=</span> AES.encrypt(PASSWORD, key);<br>        System.out.println(<span class="hljs-string">&quot;加密后用户名：&quot;</span> + encryptUsername); <span class="hljs-comment">// 例：O4Yq+WKYGlPW5t8QvgrhUQ==</span><br>        System.out.println(<span class="hljs-string">&quot;加密后密码：&quot;</span> + encryptPassword);   <span class="hljs-comment">// 例：cDYHnWysq07zUIAy1tcbRQ==</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="2-修改配置文件">2. 修改配置文件</h4>
<p>将密文写入 <code>application.yaml</code>，密文需以 <code>mpw:</code> 为前缀：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true&amp;characterEncoding=UTF-8</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">mpw:O4Yq+WKYGlPW5t8QvgrhUQ==</span>  <span class="hljs-comment"># 加密用户名</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">mpw:cDYHnWysq07zUIAy1tcbRQ==</span>  <span class="hljs-comment"># 加密密码</span><br></code></pre></td></tr></table></figure>
<h4 id="3-配置启动密钥">3. 配置启动密钥</h4>
<p>启动项目时传入密钥，支持两种方式：</p>
<ul>
<li><strong>Idea 启动</strong>：在 <code>Run/Debug Configurations</code> 的 <code>Program arguments</code> 中添加 <code>--mpw.key=7pSEa6F9TnYacTNJ</code>；</li>
</ul>
<p><img src="https://a1.boltp.com/2025/09/19/68cd54c2838fb.png" alt=""></p>
<ul>
<li>
<p><strong>单元测试</strong>：在测试类注解中添加密钥：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest(args = &quot;--mpw.key=7pSEa6F9TnYacTNJ&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceTest</span> &#123;<br>    <span class="hljs-comment">// 测试代码...</span><br>&#125;<br></code></pre></td></tr></table></figure>
</li>
</ul>
<p>随意运行一个单元测试，可以发现数据库查询正常。</p>
<h3 id="4-6-2-实现原理">4.6.2 实现原理</h3>
<p>MP 通过重写 Spring 的 <code>EnvironmentPostProcessor</code> 接口，在项目启动前执行以下逻辑：</p>
<ol>
<li>从启动参数中读取密钥 <code>mpw.key</code>；</li>
<li>遍历配置文件中以 <code>mpw:</code> 为前缀的属性，用密钥解密；</li>
<li>将解密后的明文放入环境变量，覆盖密文配置。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baomidou.mybatisplus.autoconfigure;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.AES;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.CollectionUtils;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.env.EnvironmentPostProcessor;<br><span class="hljs-keyword">import</span> org.springframework.boot.env.OriginTrackedMapPropertySource;<br><span class="hljs-keyword">import</span> org.springframework.core.env.ConfigurableEnvironment;<br><span class="hljs-keyword">import</span> org.springframework.core.env.MapPropertySource;<br><span class="hljs-keyword">import</span> org.springframework.core.env.PropertySource;<br><span class="hljs-keyword">import</span> org.springframework.core.env.SimpleCommandLinePropertySource;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 安全加密处理器</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> hubin</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2020-05-23</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SafetyEncryptProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EnvironmentPostProcessor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessEnvironment</span><span class="hljs-params">(ConfigurableEnvironment environment, SpringApplication application)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 命令行中获取密钥</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">mpwKey</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (PropertySource&lt;?&gt; ps : environment.getPropertySources()) &#123;<br>            <span class="hljs-keyword">if</span> (ps <span class="hljs-keyword">instanceof</span> SimpleCommandLinePropertySource) &#123;<br>                <span class="hljs-type">SimpleCommandLinePropertySource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> (SimpleCommandLinePropertySource) ps;<br>                mpwKey = source.getProperty(<span class="hljs-string">&quot;mpw.key&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 处理加密内容</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(mpwKey)) &#123;<br>            HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span> (PropertySource&lt;?&gt; ps : environment.getPropertySources()) &#123;<br>                <span class="hljs-keyword">if</span> (ps <span class="hljs-keyword">instanceof</span> OriginTrackedMapPropertySource) &#123;<br>                    <span class="hljs-type">OriginTrackedMapPropertySource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> (OriginTrackedMapPropertySource) ps;<br>                    <span class="hljs-keyword">for</span> (String name : source.getPropertyNames()) &#123;<br>                        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> source.getProperty(name);<br>                        <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> String) &#123;<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> (String) value;<br>                            <span class="hljs-keyword">if</span> (str.startsWith(<span class="hljs-string">&quot;mpw:&quot;</span>)) &#123;<br>                                map.put(name, AES.decrypt(str.substring(<span class="hljs-number">4</span>), mpwKey));<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 将解密的数据放入环境变量，并处于第一优先级上</span><br>            <span class="hljs-keyword">if</span> (CollectionUtils.isNotEmpty(map)) &#123;<br>                environment.getPropertySources().addFirst(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MapPropertySource</span>(<span class="hljs-string">&quot;custom-encrypt&quot;</span>, map));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="4-7-自动填充：字段值自动赋值">4.7 自动填充：字段值自动赋值</h2>
<p>对于创建时间（<code>create_time</code>）、更新时间（<code>update_time</code>）等通用字段，每次新增 / 更新都需手动赋值。MyBatis-Plus 提供自动填充功能，通过配置处理器实现字段值的自动填充。</p>
<h3 id="4-7-1-实现步骤">4.7.1 实现步骤</h3>
<h4 id="1-实现填充处理器">1. 实现填充处理器</h4>
<p>创建类实现 <code>MetaObjectHandler</code> 接口，定义填充逻辑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.apache.ibatis.reflection.MetaObject;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span> <span class="hljs-comment">// 交给Spring管理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMetaObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MetaObjectHandler</span> &#123;<br><br>    <span class="hljs-comment">// 新增时填充</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;执行新增填充...&quot;</span>);<br>        <span class="hljs-comment">// 填充创建时间（仅当字段为null时填充）</span><br>        <span class="hljs-built_in">this</span>.strictInsertFill(<br>                metaObject, <br>                <span class="hljs-string">&quot;createTime&quot;</span>,  <span class="hljs-comment">// PO类中的字段名</span><br>                LocalDateTime.class, <br>                LocalDateTime.now()  <span class="hljs-comment">// 填充值</span><br>        );<br>        <span class="hljs-comment">// 填充更新时间（新增时也需赋值）</span><br>        <span class="hljs-built_in">this</span>.strictInsertFill(metaObject, <span class="hljs-string">&quot;updateTime&quot;</span>, LocalDateTime.class, LocalDateTime.now());<br>    &#125;<br><br>    <span class="hljs-comment">// 更新时填充</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;执行更新填充...&quot;</span>);<br>        <span class="hljs-comment">// 填充更新时间</span><br>        <span class="hljs-built_in">this</span>.strictUpdateFill(metaObject, <span class="hljs-string">&quot;updateTime&quot;</span>, LocalDateTime.class, LocalDateTime.now());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="2-标记-PO-类字段">2. 标记 PO 类字段</h4>
<p>用 <code>@TableField(fill)</code> 注解标记需要自动填充的字段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-comment">// 其他字段省略...</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建时间（仅新增时填充）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br>    <span class="hljs-keyword">private</span> LocalDateTime createTime;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新时间（新增和更新时填充）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br>    <span class="hljs-keyword">private</span> LocalDateTime updateTime;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="3-测试自动填充">3. 测试自动填充</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testAutoFill</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setUsername(<span class="hljs-string">&quot;AutoFillTest&quot;</span>);<br>    userService.save(user); <span class="hljs-comment">// 无需手动设置createTime和updateTime</span><br><br>    <span class="hljs-comment">// 验证填充结果</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">queryUser</span> <span class="hljs-operator">=</span> userService.getById(user.getId());<br>    System.out.println(<span class="hljs-string">&quot;创建时间：&quot;</span> + queryUser.getCreateTime()); <span class="hljs-comment">// 自动赋值当前时间</span><br>    System.out.println(<span class="hljs-string">&quot;更新时间：&quot;</span> + queryUser.getUpdateTime()); <span class="hljs-comment">// 与创建时间一致</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="4-7-2-注意事项">4.7.2 注意事项</h3>
<ul>
<li>填充逻辑仅对 <code>insert(T)</code>、<code>updateById(T)</code> 等传入实体对象的方法生效，<code>update(Wrapper&lt;T&gt;)</code> 需手动赋值；</li>
<li><code>strictInsertFill</code>/<code>strictUpdateFill</code> 会严格匹配字段名和类型，避免误填充；</li>
<li>若实体类字段已手动赋值，填充逻辑不会覆盖（默认策略）。</li>
</ul>
<h1>五、MyBatis-Plus 插件功能</h1>
<p>MyBatis-Plus 基于 MyBatis 的拦截器机制，提供了一系列 <strong>可插拔插件</strong>，用于拓展核心功能（如分页、多租户、乐观锁等）。插件只需简单配置即可启用，且支持多插件组合使用（需注意配置顺序）。本章以最常用的 <strong>分页插件</strong> 为核心，详解插件的使用流程与实战技巧。</p>
<h2 id="5-1-插件体系概述">5.1 插件体系概述</h2>
<p>MyBatis-Plus 内置多款实用插件，覆盖分页、数据安全、SQL 规范等高频场景，核心插件及功能如下：</p>
<table>
<thead>
<tr>
<th>插件类名</th>
<th>核心功能</th>
<th>适用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>PaginationInnerInterceptor</code></td>
<td>自动分页（拦截查询 SQL，拼接分页语句）</td>
<td>列表查询分页需求</td>
</tr>
<tr>
<td><code>TenantLineInnerInterceptor</code></td>
<td>多租户（自动拼接租户 ID 条件）</td>
<td>多租户系统数据隔离</td>
</tr>
<tr>
<td><code>DynamicTableNameInnerInterceptor</code></td>
<td>动态表名（运行时切换表名）</td>
<td>分表场景（如按时间分表）</td>
</tr>
<tr>
<td><code>OptimisticLockerInnerInterceptor</code></td>
<td>乐观锁（基于版本号防止并发更新冲突）</td>
<td>高并发更新场景（如余额修改）</td>
</tr>
<tr>
<td><code>IllegalSQLInnerInterceptor</code></td>
<td>SQL 性能规范（检测垃圾 SQL，如 SELECT *）</td>
<td>规范 SQL 编写，提升性能</td>
</tr>
<tr>
<td><code>BlockAttackInnerInterceptor</code></td>
<td>防止全表更新 / 删除（拦截无 WHERE 条件的 DML）</td>
<td>避免误操作导致全表数据变更</td>
</tr>
</tbody>
</table>
<h3 id="5-1-1-插件配置顺序">5.1.1 插件配置顺序</h3>
<p>多插件组合使用时，需按以下顺序添加到拦截器，避免功能冲突：</p>
<ol>
<li>多租户插件（<code>TenantLineInnerInterceptor</code>）→ 动态表名插件（<code>DynamicTableNameInnerInterceptor</code>）</li>
<li>分页插件（<code>PaginationInnerInterceptor</code>）→ 乐观锁插件（<code>OptimisticLockerInnerInterceptor</code>）</li>
<li>SQL 性能规范插件（<code>IllegalSQLInnerInterceptor</code>）→ 防止全表操作插件（<code>BlockAttackInnerInterceptor</code>）</li>
</ol>
<h2 id="5-2-核心插件：分页插件（PaginationInnerInterceptor）">5.2 核心插件：分页插件（PaginationInnerInterceptor）</h2>
<p>MyBatis-Plus 本身不支持分页，需通过分页插件实现 —— 插件会自动拦截查询请求，在 SQL 后拼接分页语句（如 <code>LIMIT</code>），并封装总条数、总页数等分页信息。</p>
<h3 id="5-2-1-步骤-1：引入依赖">5.2.1 步骤 1：引入依赖</h3>
<p>⚠ 注意，MyBatis-Plus 于3.5.9 版本起，分页插件从核心包分离，需单独引入依赖，区分 JDK 版本：</p>
<h4 id="JDK-11-依赖">JDK 11+ 依赖</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- MP分页插件（JDK 11+） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-jsqlparser<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h4 id="JDK-8-依赖">JDK 8+ 依赖</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- MP分页插件（JDK 8+） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-jsqlparser-4.9<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h3 id="5-2-2-步骤-2：配置分页拦截器">5.2.2 步骤 2：配置分页拦截器</h3>
<p>创建 MyBatis 配置类，初始化核心拦截器并添加分页插件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1. 初始化核心拦截器（管理所有内置插件）</span><br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>      <br>        <span class="hljs-comment">// 2. 配置分页插件</span><br>        <span class="hljs-type">PaginationInnerInterceptor</span> <span class="hljs-variable">pageInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>(DbType.MYSQL);<br>        pageInterceptor.setMaxLimit(<span class="hljs-number">1000L</span>); <span class="hljs-comment">// 单页最大条数限制（避免一次查询过多数据）</span><br>        interceptor.addInnerInterceptor(pageInterceptor);<br>      <br>        <span class="hljs-comment">// 如需添加其他插件，按顺序追加：interceptor.addInnerInterceptor(其他插件);</span><br>        <span class="hljs-keyword">return</span> interceptor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="5-2-3-步骤-3：使用分页-API">5.2.3 步骤 3：使用分页 API</h3>
<p>分页插件依赖 MP 提供的 <code>Page</code> 类封装分页参数，结合 <code>BaseMapper</code> 或 <code>IService</code> 的分页方法实现查询。</p>
<h4 id="基础分页示例">基础分页示例</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.OrderItem;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaginationTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IUserService userService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBasicPage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1. 分页参数：第1页，每页2条数据</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">pageNo</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pageSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        Page&lt;User&gt; page = Page.of(pageNo, pageSize);<br><br>        <span class="hljs-comment">// 2. 排序参数：按余额降序（new OrderItem() 为旧写法，推荐静态方法）</span><br>        page.addOrder(OrderItem.desc(<span class="hljs-string">&quot;balance&quot;</span>)); <span class="hljs-comment">// 降序</span><br>        page.addOrder(OrderItem.asc(<span class="hljs-string">&quot;id&quot;</span>));      <span class="hljs-comment">// 再按ID升序</span><br><br>        <span class="hljs-comment">// 3. 执行分页查询（IService.page() 方法）</span><br>        Page&lt;User&gt; resultPage = userService.page(page);<br><br>        <span class="hljs-comment">// 4. 解析分页结果</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> resultPage.getTotal();       <span class="hljs-comment">// 总条数</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">pages</span> <span class="hljs-operator">=</span> resultPage.getPages();       <span class="hljs-comment">// 总页数</span><br>        List&lt;User&gt; records = resultPage.getRecords(); <span class="hljs-comment">// 当前页数据</span><br><br>        System.out.println(<span class="hljs-string">&quot;total = &quot;</span> + total);<br>        System.out.println(<span class="hljs-string">&quot;pages = &quot;</span> + pages);<br>        records.forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="分页查询结果">分页查询结果</h4>
<p><img src="https://a1.boltp.com/2025/09/19/68cd5839e384e.png" alt=""></p>
<h4 id="生成的-SQL">生成的 SQL</h4>
<p>插件会自动拼接分页语句，同时查询总条数：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询当前页数据</span><br><span class="hljs-keyword">SELECT</span> id,username,balance,... <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> balance <span class="hljs-keyword">DESC</span>, id <span class="hljs-keyword">ASC</span> LIMIT ?, ?<br><span class="hljs-comment">-- 查询总条数</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span><br></code></pre></td></tr></table></figure>
<h2 id="5-3-实战：通用分页实体设计与优化">5.3 实战：通用分页实体设计与优化</h2>
<p>实际开发中，分页查询需适配多业务场景（如动态条件、排序、VO 转换），直接使用 <code>Page</code> 类会导致代码重复。通过设计 <strong>通用分页实体</strong>，可封装分页参数转换、结果封装等逻辑，提升开发效率。</p>
<h3 id="5-3-1-核心实体类设计">5.3.1 核心实体类设计</h3>
<p>需定义 4 个实体类，分别对应 “分页参数接收”“业务条件接收”“分页结果返回”“视图对象”：</p>
<h4 id="1-通用分页参数（PageDTO）">1. 通用分页参数（PageDTO）</h4>
<p>接收前端传入的分页与排序参数，适用于所有分页场景：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.metadata.OrderItem;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModel;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModelProperty;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(description = &quot;通用分页参数&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageDTO</span> &#123;<br>    <span class="hljs-meta">@ApiModelProperty(&quot;页码（默认1）&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">pageNo</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-meta">@ApiModelProperty(&quot;每页条数（默认10）&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">pageSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-meta">@ApiModelProperty(&quot;排序字段（如balance、update_time）&quot;)</span><br>    <span class="hljs-keyword">private</span> String sortBy;<br><br>    <span class="hljs-meta">@ApiModelProperty(&quot;是否升序（true=升序，false=降序）&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Boolean</span> <span class="hljs-variable">isAsc</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转换为MP的Page对象（带排序）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt; 泛型（PO类型）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Page对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="hljs-title function_">toMpPage</span><span class="hljs-params">()</span> &#123;<br>        Page&lt;T&gt; page = Page.of(pageNo, pageSize);<br>        <span class="hljs-comment">// 有排序字段则按传入规则排序，否则默认按update_time降序</span><br>        <span class="hljs-keyword">if</span> (sortBy != <span class="hljs-literal">null</span> &amp;&amp; !sortBy.trim().isEmpty()) &#123;<br>            page.addOrder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderItem</span>().setColumn(sortBy).setAsc(isAsc));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            page.addOrder(OrderItem.desc(<span class="hljs-string">&quot;update_time&quot;</span>));<br>        &#125;<br>        <span class="hljs-keyword">return</span> page;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自定义默认排序（覆盖默认的update_time降序）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; Page&lt;T&gt; <span class="hljs-title function_">toMpPage</span><span class="hljs-params">(String defaultSortBy, Boolean defaultAsc)</span> &#123;<br>        Page&lt;T&gt; page = Page.of(pageNo, pageSize);<br>        <span class="hljs-keyword">if</span> (sortBy != <span class="hljs-literal">null</span> &amp;&amp; !sortBy.trim().isEmpty()) &#123;<br>            page.addOrder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderItem</span>().setColumn(sortBy).setAsc(isAsc));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            page.addOrder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderItem</span>().setColumn(defaultSortBy).setAsc(defaultAsc));<br>        &#125;<br>        <span class="hljs-keyword">return</span> page;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="2-业务查询条件（UserQueryDTO）">2. 业务查询条件（UserQueryDTO）</h4>
<p>继承 <code>PageDTO</code>，添加用户查询的业务条件（如用户名、状态）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;<br><span class="hljs-keyword">import</span> com.itheima.mp.domain.po.User;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModel;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModelProperty;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.EqualsAndHashCode;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@EqualsAndHashCode(callSuper = true)</span><br><span class="hljs-meta">@ApiModel(description = &quot;用户分页查询条件&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserQueryDTO</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PageDTO</span> &#123;<br>    <span class="hljs-meta">@ApiModelProperty(&quot;用户名关键字（模糊查询）&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@ApiModelProperty(&quot;用户状态（1=正常，2=冻结）&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer status;<br><br>    <span class="hljs-meta">@ApiModelProperty(&quot;最小余额&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer minBalance;<br><br>    <span class="hljs-meta">@ApiModelProperty(&quot;最大余额&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer maxBalance;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转换为Lambda查询条件（封装业务筛选逻辑）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> LambdaQueryWrapper&lt;User&gt; <span class="hljs-title function_">toQueryWrapper</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;User&gt;()<br>                .like(name != <span class="hljs-literal">null</span>, User::getUsername, name)<br>                .eq(status != <span class="hljs-literal">null</span>, User::getStatus, status)<br>                .ge(minBalance != <span class="hljs-literal">null</span>, User::getBalance, minBalance)<br>                .le(maxBalance != <span class="hljs-literal">null</span>, User::getBalance, maxBalance);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="3-分页结果封装（PageResult）">3. 分页结果封装（PageResult）</h4>
<p>统一分页结果格式，包含总条数、总页数、当前页数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.hutool.core.bean.BeanUtil;<br><span class="hljs-keyword">import</span> cn.hutool.core.collection.CollUtil;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModel;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModelProperty;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(description = &quot;分页结果&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageResult</span>&lt;T&gt; &#123;<br>    <span class="hljs-meta">@ApiModelProperty(&quot;总条数&quot;)</span><br>    <span class="hljs-keyword">private</span> Long total;<br><br>    <span class="hljs-meta">@ApiModelProperty(&quot;总页数&quot;)</span><br>    <span class="hljs-keyword">private</span> Long pages;<br><br>    <span class="hljs-meta">@ApiModelProperty(&quot;当前页数据&quot;)</span><br>    <span class="hljs-keyword">private</span> List&lt;T&gt; list;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * PO分页结果转换为VO分页结果（默认属性拷贝）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> page MP分页结果（PO）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> voClazz VO类字节码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;PO&gt; PO类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;VO&gt; VO类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 分页结果（VO）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;PO, VO&gt; PageResult&lt;VO&gt; <span class="hljs-title function_">of</span><span class="hljs-params">(Page&lt;PO&gt; page, Class&lt;VO&gt; voClazz)</span> &#123;<br>        PageResult&lt;VO&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageResult</span>&lt;&gt;();<br>        result.setTotal(page.getTotal());<br>        result.setPages(page.getPages());<br><br>        List&lt;PO&gt; records = page.getRecords();<br>        <span class="hljs-keyword">if</span> (CollUtil.isEmpty(records)) &#123;<br>            result.setList(Collections.emptyList());<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br><br>        <span class="hljs-comment">// PO → VO 属性拷贝</span><br>        result.setList(BeanUtil.copyToList(records, voClazz));<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自定义PO→VO转换（支持特殊逻辑，如脱敏、字段处理）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> page MP分页结果（PO）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> converter 转换函数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;PO&gt; PO类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;VO&gt; VO类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 分页结果（VO）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;PO, VO&gt; PageResult&lt;VO&gt; <span class="hljs-title function_">of</span><span class="hljs-params">(Page&lt;PO&gt; page, Function&lt;PO, VO&gt; converter)</span> &#123;<br>        PageResult&lt;VO&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageResult</span>&lt;&gt;();<br>        result.setTotal(page.getTotal());<br>        result.setPages(page.getPages());<br><br>        List&lt;PO&gt; records = page.getRecords();<br>        <span class="hljs-keyword">if</span> (CollUtil.isEmpty(records)) &#123;<br>            result.setList(Collections.emptyList());<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br><br>        <span class="hljs-comment">// 自定义转换逻辑</span><br>        result.setList(records.stream().map(converter).collect(Collectors.toList()));<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="4-视图对象（UserVO）">4. 视图对象（UserVO）</h4>
<p>返回给前端的用户数据（隐藏敏感字段，如密码）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.itheima.mp.domain.po.UserInfo;<br><span class="hljs-keyword">import</span> com.itheima.mp.enums.UserStatus;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModel;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModelProperty;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ApiModel(description = &quot;用户视图对象&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserVO</span> &#123;<br>    <span class="hljs-meta">@ApiModelProperty(&quot;用户ID&quot;)</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-meta">@ApiModelProperty(&quot;用户名&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-meta">@ApiModelProperty(&quot;详细信息&quot;)</span><br>    <span class="hljs-keyword">private</span> UserInfo info;<br><br>    <span class="hljs-meta">@ApiModelProperty(&quot;用户状态&quot;)</span><br>    <span class="hljs-keyword">private</span> UserStatus status;<br><br>    <span class="hljs-meta">@ApiModelProperty(&quot;账户余额&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer balance;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="5-3-2-分页接口开发">5.3.2 分页接口开发</h3>
<p>基于通用实体实现 “用户条件分页查询” 接口，代码简洁且可复用。</p>
<h4 id="1-Controller-层">1. Controller 层</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.itheima.mp.domain.dto.UserQueryDTO;<br><span class="hljs-keyword">import</span> com.itheima.mp.domain.vo.PageResult;<br><span class="hljs-keyword">import</span> com.itheima.mp.domain.vo.UserVO;<br><span class="hljs-keyword">import</span> com.itheima.mp.service.IUserService;<br><span class="hljs-keyword">import</span> io.swagger.annotations.Api;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-meta">@Api(tags = &quot;用户管理接口&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IUserService userService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/page&quot;)</span><br>    <span class="hljs-meta">@ApiOperation(&quot;用户条件分页查询&quot;)</span><br>    <span class="hljs-keyword">public</span> PageResult&lt;UserVO&gt; <span class="hljs-title function_">queryUserByPage</span><span class="hljs-params">(UserQueryDTO queryDTO)</span> &#123;<br>        <span class="hljs-keyword">return</span> userService.queryUserByPage(queryDTO);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="2-Service-层">2. Service 层</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;<br><span class="hljs-keyword">import</span> com.itheima.mp.domain.dto.UserQueryDTO;<br><span class="hljs-keyword">import</span> com.itheima.mp.domain.po.User;<br><span class="hljs-keyword">import</span> com.itheima.mp.domain.vo.PageResult;<br><span class="hljs-keyword">import</span> com.itheima.mp.domain.vo.UserVO;<br><span class="hljs-keyword">import</span> com.itheima.mp.mapper.UserMapper;<br><span class="hljs-keyword">import</span> com.itheima.mp.service.IUserService;<br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserService</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> PageResult&lt;UserVO&gt; <span class="hljs-title function_">queryUserByPage</span><span class="hljs-params">(UserQueryDTO queryDTO)</span> &#123;<br>        <span class="hljs-comment">// 1. 转换分页参数（PageDTO → MP Page）</span><br>        Page&lt;User&gt; page = queryDTO.toMpPage();<br><br>        <span class="hljs-comment">// 2. 转换查询条件（UserQueryDTO → LambdaQueryWrapper）</span><br>        Page&lt;User&gt; resultPage = lambdaQuery()<br>                .like(queryDTO.getName() != <span class="hljs-literal">null</span>, User::getUsername, queryDTO.getName())<br>                .eq(queryDTO.getStatus() != <span class="hljs-literal">null</span>, User::getStatus, queryDTO.getStatus())<br>                .ge(queryDTO.getMinBalance() != <span class="hljs-literal">null</span>, User::getBalance, queryDTO.getMinBalance())<br>                .le(queryDTO.getMaxBalance() != <span class="hljs-literal">null</span>, User::getBalance, queryDTO.getMaxBalance())<br>                .page(page);<br><br>        <span class="hljs-comment">// 3. 转换分页结果（PO Page → VO PageResult）</span><br>        <span class="hljs-comment">// 普通转换（属性拷贝）</span><br>        <span class="hljs-comment">// return PageResult.of(resultPage, UserVO.class);</span><br><br>        <span class="hljs-comment">// 自定义转换（示例：用户名脱敏）</span><br>        <span class="hljs-keyword">return</span> PageResult.of(resultPage, user -&gt; &#123;<br>            <span class="hljs-type">UserVO</span> <span class="hljs-variable">vo</span> <span class="hljs-operator">=</span> BeanUtil.copyProperties(user, UserVO.class);<br>            <span class="hljs-comment">// 脱敏逻辑：用户名保留前2位，其余用*代替</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> vo.getUsername();<br>            <span class="hljs-keyword">if</span> (username.length() &gt; <span class="hljs-number">2</span>) &#123;<br>                vo.setUsername(username.substring(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>) + <span class="hljs-string">&quot;*&quot;</span>.repeat(username.length() - <span class="hljs-number">2</span>));<br>            &#125;<br>            <span class="hljs-keyword">return</span> vo;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="5-3-3-接口测试与结果">5.3.3 接口测试与结果</h3>
<h4 id="请求参数（GET）">请求参数（GET）</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/users/page?pageNo=1&amp;pageSize=2&amp;sortBy=balance&amp;isAsc=false&amp;name=o&amp;status=1<br></code></pre></td></tr></table></figure>
<h4 id="响应结果">响应结果</h4>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;total&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;pages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Ja**&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">20</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;intro&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;佛系青年&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;gender&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;male&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;NORMAL&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;balance&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1600</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Ro**&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">19</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;intro&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;青涩少女&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;gender&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;female&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;NORMAL&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;balance&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">600</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<h2 id="5-4-插件功能总结">5.4 插件功能总结</h2>
<ol>
<li><strong>分页插件核心价值</strong>：自动拼接分页 SQL，封装分页元数据，避免手动编写 <code>LIMIT</code> 和 count 查询，适配所有单表查询场景。</li>
<li><strong>通用分页实体设计</strong>：通过 <code>PageDTO</code> 封装分页参数转换、<code>PageResult</code> 封装结果，减少重复代码，支持自定义转换逻辑（如脱敏、字段处理）。</li>
<li><strong>多插件组合要点</strong>：严格按 “租户 / 动态表名→分页 / 乐观锁→SQL 规范 / 防全表操作” 的顺序配置，避免拦截逻辑冲突。</li>
</ol>
<p>MyBatis-Plus 插件体系以 “轻量级、可插拔” 为设计理念，既能满足复杂业务需求，又不侵入原有代码，是提升开发效率与系统健壮性的重要工具。</p>
<p><img src="https://a1.boltp.com/2025/09/19/68cd6497c1133.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>MyBatis-Plus</tag>
      </tags>
  </entry>
</search>
